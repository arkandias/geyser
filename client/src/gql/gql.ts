/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetAppData($userId: Int!) {\n    currentPhase: currentPhaseByPk(id: 1) {\n      value\n    }\n    years: year(orderBy: { value: DESC }) {\n      value\n      current\n      visible\n    }\n    customTexts: appSetting(orderBy: [{ key: ASC }]) {\n      key\n      value\n    }\n    profile: teacherByPk(id: $userId) {\n      id\n      displayname\n      services {\n        id\n        year\n      }\n    }\n  }\n": typeof types.GetAppDataDocument,
    "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesService on Service {\n    id\n    teacher {\n      displayname\n    }\n  }\n": typeof types.CourseRowFragmentDoc,
    "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications {\n      hours\n    }\n    requests {\n      type\n      hoursWeighted\n    }\n    message {\n      content\n    }\n  }\n": typeof types.ServiceRowFragmentDoc,
    "\n  query GetAdminCourses {\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminDegree\n      ...AdminProgramsDegree\n      ...AdminTracksDegree\n      ...AdminCoursesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminProgram\n      ...AdminTracksProgram\n      ...AdminCoursesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminTrack\n      ...AdminCoursesTrack\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminCourse\n    }\n    types: courseType(orderBy: { label: ASC }) {\n      ...AdminCourseType\n      ...AdminCoursesCourseType\n    }\n  }\n": typeof types.GetAdminCoursesDocument,
    "\n  fragment AdminCourseType on CourseType {\n    id\n    label\n    coefficient\n    description\n  }\n\n  mutation InsertCourseTypes($objects: [CourseTypeInsertInput!]!) {\n    insertData: insertCourseType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourseTypes(\n    $objects: [CourseTypeInsertInput!]!\n    $onConflict: CourseTypeOnConflict\n  ) {\n    upsertData: insertCourseType(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourseTypes($ids: [Int!]!, $changes: CourseTypeSetInput!) {\n    updateData: updateCourseType(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourseTypes($ids: [Int!]!) {\n    deleteData: deleteCourseType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminCourseTypeFragmentDoc,
    "\n  fragment AdminCourse on Course {\n    id\n    year\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    track {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    semester\n    type {\n      label\n    }\n    hours\n    hoursAdjusted\n    groups\n    groupsAdjusted\n    description\n    priorityRule\n    visible\n  }\n\n  fragment AdminCoursesDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n      tracks {\n        id\n        name\n      }\n    }\n  }\n\n  fragment AdminCoursesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertCourses($objects: [CourseInsertInput!]!) {\n    insertData: insertCourse(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourses(\n    $objects: [CourseInsertInput!]!\n    $onConflict: CourseOnConflict\n  ) {\n    upsertData: insertCourse(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourses($ids: [Int!]!, $changes: CourseSetInput!) {\n    updateData: updateCourse(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourses($ids: [Int!]!) {\n    deleteData: deleteCourse(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminCourseFragmentDoc,
    "\n  fragment AdminDegree on Degree {\n    id\n    name\n    nameShort\n    visible\n  }\n\n  mutation InsertDegrees($objects: [DegreeInsertInput!]!) {\n    insertData: insertDegree(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertDegrees(\n    $objects: [DegreeInsertInput!]!\n    $onConflict: DegreeOnConflict\n  ) {\n    upsertData: insertDegree(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateDegrees($ids: [Int!]!, $changes: DegreeSetInput!) {\n    updateData: updateDegree(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteDegrees($ids: [Int!]!) {\n    deleteData: deleteDegree(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminDegreeFragmentDoc,
    "\n  fragment AdminProgram on Program {\n    id\n    degree {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminProgramsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertPrograms($objects: [ProgramInsertInput!]!) {\n    insertData: insertProgram(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPrograms(\n    $objects: [ProgramInsertInput!]!\n    $onConflict: ProgramOnConflict\n  ) {\n    upsertData: insertProgram(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePrograms($ids: [Int!]!, $changes: ProgramSetInput!) {\n    updateData: updateProgram(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePrograms($ids: [Int!]!) {\n    deleteData: deleteProgram(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminProgramFragmentDoc,
    "\n  fragment AdminTrack on Track {\n    id\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminTracksDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n    }\n  }\n\n  fragment AdminTracksProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertTracks($objects: [TrackInsertInput!]!) {\n    insertData: insertTrack(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTracks(\n    $objects: [TrackInsertInput!]!\n    $onConflict: TrackOnConflict\n  ) {\n    upsertData: insertTrack(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTracks($ids: [Int!]!, $changes: TrackSetInput!) {\n    updateData: updateTrack(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTracks($ids: [Int!]!) {\n    deleteData: deleteTrack(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminTrackFragmentDoc,
    "\n  query GetAdminRoles {\n    roles: role(\n      orderBy: [\n        { type: ASC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRole\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRolesTeacher\n    }\n  }\n": typeof types.GetAdminRolesDocument,
    "\n  mutation UpdateCustomText($key: String!, $value: String) {\n    insertAppSettingOne(\n      object: { key: $key, value: $value }\n      onConflict: { constraint: app_setting_pkey, updateColumns: [value] }\n    ) {\n      key\n    }\n  }\n\n  mutation DeleteCustomText($key: String!) {\n    deleteAppSettingByPk(key: $key) {\n      key\n    }\n  }\n": typeof types.UpdateCustomTextDocument,
    "\n  mutation SetCurrentPhase($phase: PhaseEnum!) {\n    updateCurrentPhaseByPk(pkColumns: { id: 1 }, _set: { value: $phase }) {\n      value\n    }\n  }\n": typeof types.SetCurrentPhaseDocument,
    "\n  fragment AdminRole on Role {\n    id\n    teacher {\n      email\n    }\n    type\n    comment\n  }\n\n  fragment AdminRolesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertRoles($objects: [RoleInsertInput!]!) {\n    insertData: insertRole(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRoles(\n    $objects: [RoleInsertInput!]!\n    $onConflict: RoleOnConflict\n  ) {\n    upsertData: insertRole(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRoles($ids: [Int!]!, $changes: RoleSetInput!) {\n    updateData: updateRole(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRoles($ids: [Int!]!) {\n    deleteData: deleteRole(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminRoleFragmentDoc,
    "\n  mutation SetCurrentYear($value: Int!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: { current: true }) {\n      value\n    }\n  }\n\n  mutation InsertYear($value: Int!, $visible: Boolean!) {\n    insertYearOne(object: { value: $value, visible: $visible }) {\n      value\n    }\n  }\n\n  mutation UpdateYear($value: Int!, $changes: YearSetInput!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: $changes) {\n      value\n    }\n  }\n\n  mutation DeleteYear($value: Int!) {\n    deleteYearByPk(value: $value) {\n      value\n    }\n  }\n\n  mutation CreateServices($year: Int!) {\n    createYearServices(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation CopyCourses($year: Int!) {\n    copyYearCourses(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation ComputePriorities($year: Int!) {\n    computeYearPriorities(args: { p_year: $year }) {\n      id\n    }\n  }\n": typeof types.SetCurrentYearDocument,
    "\n  query GetAdminRequests {\n    requests: request(\n      orderBy: [\n        { year: DESC }\n        { type: ASC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminRequest\n    }\n    priorities: priority(\n      orderBy: [\n        { year: DESC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminPriority\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRequestsService\n      ...AdminPrioritiesService\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRequestsTeacher\n      ...AdminPrioritiesTeacher\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminRequestsCourse\n      ...AdminPrioritiesCourse\n    }\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminRequestsDegree\n      ...AdminPrioritiesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminRequestsProgram\n      ...AdminPrioritiesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminRequestsTrack\n      ...AdminPrioritiesTrack\n    }\n    courseTypes: courseType(orderBy: { label: ASC }) {\n      ...AdminRequestsCourseType\n      ...AdminPrioritiesCourseType\n    }\n  }\n": typeof types.GetAdminRequestsDocument,
    "\n  fragment AdminPriority on Priority {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  fragment AdminPrioritiesService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminPrioritiesTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminPrioritiesCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminPrioritiesDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertPriorities($objects: [PriorityInsertInput!]!) {\n    insertData: insertPriority(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPriorities(\n    $objects: [PriorityInsertInput!]!\n    $onConflict: PriorityOnConflict\n  ) {\n    upsertData: insertPriority(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePriorities($ids: [Int!]!, $changes: PrioritySetInput!) {\n    updateData: updatePriority(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePriorities($ids: [Int!]!) {\n    deleteData: deletePriority(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminPriorityFragmentDoc,
    "\n  fragment AdminRequest on Request {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    type\n    hours\n  }\n\n  fragment AdminRequestsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminRequestsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminRequestsCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminRequestsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertRequests($objects: [RequestInsertInput!]!) {\n    insertData: insertRequest(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRequests(\n    $objects: [RequestInsertInput!]!\n    $onConflict: RequestOnConflict\n  ) {\n    upsertData: insertRequest(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRequests($ids: [Int!]!, $changes: RequestSetInput!) {\n    updateData: updateRequest(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequests($ids: [Int!]!) {\n    deleteData: deleteRequest(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminRequestFragmentDoc,
    "\n  query GetAdminTeachers {\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminTeacher\n      ...AdminServicesTeacher\n      ...AdminServiceModificationsTeacher\n    }\n    positions: position(orderBy: [{ label: ASC }]) {\n      ...AdminPosition\n      ...AdminTeachersPosition\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminService\n      ...AdminServiceModificationsService\n    }\n    serviceModifications: serviceModification(\n      orderBy: [\n        { service: { year: DESC } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminServiceModification\n    }\n    serviceModificationTypes: serviceModificationType(\n      orderBy: [{ label: ASC }]\n    ) {\n      ...AdminServiceModificationType\n      ...AdminServiceModificationsServiceModificationType\n    }\n  }\n": typeof types.GetAdminTeachersDocument,
    "\n  fragment AdminPosition on Position {\n    id\n    label\n    description\n    baseServiceHours\n  }\n\n  mutation InsertPositions($objects: [PositionInsertInput!]!) {\n    insertData: insertPosition(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPositions(\n    $objects: [PositionInsertInput!]!\n    $onConflict: PositionOnConflict!\n  ) {\n    upsertData: insertPosition(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePositions($ids: [Int!]!, $changes: PositionSetInput!) {\n    updateData: updatePosition(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePositions($ids: [Int!]!) {\n    deleteData: deletePosition(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminPositionFragmentDoc,
    "\n  fragment AdminServiceModificationType on ServiceModificationType {\n    id\n    label\n    description\n  }\n\n  mutation InsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n  ) {\n    insertData: insertServiceModificationType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n    $onConflict: ServiceModificationTypeOnConflict\n  ) {\n    upsertData: insertServiceModificationType(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModificationTypes(\n    $ids: [Int!]!\n    $changes: ServiceModificationTypeSetInput!\n  ) {\n    updateData: updateServiceModificationType(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModificationTypes($ids: [Int!]!) {\n    deleteData: deleteServiceModificationType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminServiceModificationTypeFragmentDoc,
    "\n  fragment AdminServiceModification on ServiceModification {\n    id\n    service {\n      year\n      teacher {\n        email\n        displayname\n      }\n    }\n    type {\n      label\n    }\n    hours\n  }\n\n  fragment AdminServiceModificationsServiceModificationType on ServiceModificationType {\n    id\n    label\n  }\n\n  fragment AdminServiceModificationsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminServiceModificationsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  mutation InsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n  ) {\n    insertData: insertServiceModification(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n    $onConflict: ServiceModificationOnConflict\n  ) {\n    upsertData: insertServiceModification(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModifications(\n    $ids: [Int!]!\n    $changes: ServiceModificationSetInput!\n  ) {\n    updateData: updateServiceModification(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModifications($ids: [Int!]!) {\n    deleteData: deleteServiceModification(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminServiceModificationFragmentDoc,
    "\n  fragment AdminService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n    hours\n  }\n\n  fragment AdminServicesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertServices($objects: [ServiceInsertInput!]!) {\n    insertData: insertService(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServices(\n    $objects: [ServiceInsertInput!]!\n    $onConflict: ServiceOnConflict\n  ) {\n    upsertData: insertService(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServices($ids: [Int!]!, $changes: ServiceSetInput!) {\n    updateData: updateService(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServices($ids: [Int!]!) {\n    deleteData: deleteService(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminServiceFragmentDoc,
    "\n  fragment AdminTeacher on Teacher {\n    id\n    email\n    firstname\n    lastname\n    alias\n    position {\n      label\n    }\n    baseServiceHours\n    visible\n    active\n  }\n\n  fragment AdminTeachersPosition on Position {\n    id\n    label\n  }\n\n  mutation InsertTeachers($objects: [TeacherInsertInput!]!) {\n    insertData: insertTeacher(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTeachers(\n    $objects: [TeacherInsertInput!]!\n    $onConflict: TeacherOnConflict\n  ) {\n    upsertData: insertTeacher(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTeachers($ids: [Int!]!, $changes: TeacherSetInput!) {\n    updateData: updateTeacher(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTeachers($ids: [Int!]!) {\n    deleteData: deleteTeacher(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.AdminTeacherFragmentDoc,
    "\n  fragment PriorityChipData on Priority {\n    id\n    service {\n      teacher {\n        displayname\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  mutation DeletePriority($id: Int!) {\n    deletePriorityByPk(id: $id) {\n      id\n    }\n  }\n\n  mutation DeleteComputedPriority($id: Int!) {\n    updatePriorityByPk(\n      pkColumns: { id: $id }\n      _set: { seniority: null, isPriority: null, computed: false }\n    ) {\n      id\n    }\n  }\n": typeof types.PriorityChipDataFragmentDoc,
    "\n  fragment PriorityFormData on Course {\n    year\n    courseId: id\n  }\n\n  mutation UpsertPriority(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $seniority: Int\n    $isPriority: Boolean\n  ) {\n    insertPriorityOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        seniority: $seniority\n        isPriority: $isPriority\n        computed: false\n      }\n      onConflict: {\n        constraint: priority_service_id_course_id_key\n        updateColumns: [seniority, isPriority, computed]\n      }\n    ) {\n      id\n    }\n  }\n": typeof types.PriorityFormDataFragmentDoc,
    "\n  fragment RequestCardData on Request {\n    id\n    year\n    service {\n      id\n      teacher {\n        displayname\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hoursEffective\n    }\n    type\n    hours\n    isPriority\n  }\n\n  query GetAssignment($serviceId: Int!, $courseId: Int!) {\n    requests: request(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: ASSIGNMENT } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      id\n      hours\n    }\n  }\n\n  mutation InsertAssignment(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: ASSIGNMENT\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation UpdateAssignment($id: Int!, $hours: Float!) {\n    updateRequestByPk(pkColumns: { id: $id }, _set: { hours: $hours }) {\n      id\n    }\n  }\n\n  mutation DeleteRequestCard($id: Int!) {\n    deleteRequestByPk(id: $id) {\n      id\n    }\n  }\n": typeof types.RequestCardDataFragmentDoc,
    "\n  fragment RequestFormData on Course {\n    year\n    courseId: id\n    hoursPerGroup: hoursEffective\n  }\n\n  mutation UpsertRequest(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      onConflict: {\n        constraint: request_service_id_course_id_type_key\n        updateColumns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n  ) {\n    deleteRequest(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.RequestFormDataFragmentDoc,
    "\n  query GetServices($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { displayname: ASC } }]\n    ) {\n      id\n      teacher {\n        displayname\n      }\n    }\n  }\n": typeof types.GetServicesDocument,
    "\n  fragment CourseArchivesData on Course {\n    year\n    programId\n    trackId\n    name\n    semester\n    typeId\n  }\n\n  query GetCourseArchives(\n    $year: Int!\n    $programId: Int!\n    $trackIdComp: IntComparisonExp\n    $name: String!\n    $semester: Int!\n    $typeId: Int!\n  ) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _lt: $year } }\n          { programId: { _eq: $programId } }\n          { trackId: $trackIdComp }\n          { name: { _eq: $name } }\n          { semester: { _eq: $semester } }\n          { typeId: { _eq: $typeId } }\n        ]\n      }\n      orderBy: [{ year: DESC }]\n    ) {\n      year\n      requests(\n        where: { type: { _eq: ASSIGNMENT } }\n        orderBy: [{ service: { teacher: { displayname: ASC } } }]\n      ) {\n        id\n        ...RequestCardData\n      }\n    }\n  }\n": typeof types.CourseArchivesDataFragmentDoc,
    "\n  fragment CourseCoordinators on Course {\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacher {\n        displayname\n      }\n      comment\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n  }\n": typeof types.CourseCoordinatorsFragmentDoc,
    "\n  fragment CourseDescription on Course {\n    courseId: id\n    description\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacherId\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    updateCourseByPk(\n      pkColumns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n": typeof types.CourseDescriptionFragmentDoc,
    "\n  fragment CourseDetails on Course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescription\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchivesData\n  }\n": typeof types.CourseDetailsFragmentDoc,
    "\n  fragment CourseExpansion on Course {\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n    name\n    semester\n    courseType: type {\n      label\n    }\n  }\n": typeof types.CourseExpansionFragmentDoc,
    "\n  fragment CoursePriorities on Course {\n    ...PriorityFormData\n\n    priorities(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      isPriority\n      ...PriorityChipData\n    }\n  }\n": typeof types.CoursePrioritiesFragmentDoc,
    "\n  fragment CourseRequests on Course {\n    ...RequestFormData\n\n    requests(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n": typeof types.CourseRequestsFragmentDoc,
    "\n  fragment TeacherServiceDetails on Service {\n    id\n    year\n    teacherId\n    hours\n    modifications(orderBy: [{ type: { label: ASC } }, { hours: ASC }]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $teacherId: Int!, $hours: Float!) {\n    updateService(\n      where: { year: { _eq: $year }, id: { _eq: $teacherId } }\n      _set: { hours: $hours }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationType(orderBy: { label: ASC }) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    insertServiceModificationOne(\n      object: {\n        serviceId: $serviceId\n        typeId: $modificationTypeId\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModificationByPk(id: $id) {\n      id\n    }\n  }\n": typeof types.TeacherServiceDetailsFragmentDoc,
    "\n  fragment TeacherServiceMessage on Service {\n    id\n    year\n    teacherId\n    message {\n      id\n      content\n    }\n  }\n\n  mutation UpsertMessage($serviceId: Int!, $content: String!) {\n    insertMessageOne(\n      object: { serviceId: $serviceId, content: $content }\n      onConflict: {\n        constraint: message_service_id_key\n        updateColumns: [content]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteMessage($serviceId: Int!) {\n    deleteRequest(where: { serviceId: { _eq: $serviceId } }) {\n      returning {\n        id\n      }\n    }\n  }\n": typeof types.TeacherServiceMessageFragmentDoc,
    "\n  fragment TeacherServicePriorities on Service {\n    priorities(\n      where: { isPriority: { _isNull: false } }\n      orderBy: [\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n        { course: { programId: ASC } }\n        { course: { trackId: ASC } }\n        { course: { name: ASC } }\n      ]\n    ) {\n      id\n      course {\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        name: nameDisplay\n        semester\n        type {\n          label\n        }\n      }\n      seniority\n      isPriority\n    }\n  }\n": typeof types.TeacherServicePrioritiesFragmentDoc,
    "\n  fragment TeacherServiceRequests on Service {\n    assignment: requests(where: { type: { _eq: ASSIGNMENT } }) {\n      id\n      hoursWeighted\n    }\n    primary: requests(where: { type: { _eq: PRIMARY } }) {\n      id\n      hoursWeighted\n    }\n    secondary: requests(where: { type: { _eq: SECONDARY } }) {\n      id\n      hoursWeighted\n    }\n  }\n": typeof types.TeacherServiceRequestsFragmentDoc,
    "\n  fragment ServiceTeacher on Teacher {\n    ...TeacherTitle\n    ...TeacherCoordinations\n    coordinationIds: coordinations {\n      id\n    }\n  }\n": typeof types.ServiceTeacherFragmentDoc,
    "\n  fragment TeacherCoordinations on Teacher {\n    coordinations(\n      orderBy: [\n        { programId: ASC_NULLS_LAST }\n        { trackId: ASC_NULLS_LAST }\n        { courseId: ASC }\n      ]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        year\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n": typeof types.TeacherCoordinationsFragmentDoc,
    "\n  fragment TeacherTitle on Teacher {\n    displayname\n    position {\n      label\n    }\n  }\n": typeof types.TeacherTitleFragmentDoc,
    "\n  query GetAssignments($year: Int!, $where: RequestBoolExp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: ASSIGNMENT } }\n          $where\n        ]\n      }\n      orderBy: [\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { semester: ASC } }\n        { course: { name: ASC } }\n        { course: { type: { label: ASC } } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n      ]\n    ) {\n      course {\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service {\n        teacher {\n          displayname\n          email\n        }\n      }\n    }\n  }\n": typeof types.GetAssignmentsDocument,
    "\n  mutation DummyMutation {\n    dummyFunction {\n      __typename\n    }\n  }\n": typeof types.DummyMutationDocument,
    "\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hoursEffective: { _gt: 0 } }\n          { groupsEffective: { _gt: 0 } }\n        ]\n      }\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { semester: ASC }\n        { name: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetServiceRows($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { lastname: ASC } }, { teacher: { firstname: ASC } }]\n    ) {\n      ...ServiceRow\n      ...TableCoursesService\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: courseByPk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n": typeof types.GetCourseRowsDocument,
    "\n  query GetTeacherDetails($id: Int!) {\n    teacher: teacherByPk(id: $id) {\n      ...ServiceTeacher\n    }\n  }\n\n  query GetServiceDetails($id: Int!) {\n    service: serviceByPk(id: $id) {\n      teacher {\n        ...ServiceTeacher\n      }\n      ...TeacherServiceDetails\n      ...TeacherServiceRequests\n      ...TeacherServicePriorities\n      ...TeacherServiceMessage\n    }\n  }\n": typeof types.GetTeacherDetailsDocument,
};
const documents: Documents = {
    "\n  query GetAppData($userId: Int!) {\n    currentPhase: currentPhaseByPk(id: 1) {\n      value\n    }\n    years: year(orderBy: { value: DESC }) {\n      value\n      current\n      visible\n    }\n    customTexts: appSetting(orderBy: [{ key: ASC }]) {\n      key\n      value\n    }\n    profile: teacherByPk(id: $userId) {\n      id\n      displayname\n      services {\n        id\n        year\n      }\n    }\n  }\n": types.GetAppDataDocument,
    "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesService on Service {\n    id\n    teacher {\n      displayname\n    }\n  }\n": types.CourseRowFragmentDoc,
    "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications {\n      hours\n    }\n    requests {\n      type\n      hoursWeighted\n    }\n    message {\n      content\n    }\n  }\n": types.ServiceRowFragmentDoc,
    "\n  query GetAdminCourses {\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminDegree\n      ...AdminProgramsDegree\n      ...AdminTracksDegree\n      ...AdminCoursesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminProgram\n      ...AdminTracksProgram\n      ...AdminCoursesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminTrack\n      ...AdminCoursesTrack\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminCourse\n    }\n    types: courseType(orderBy: { label: ASC }) {\n      ...AdminCourseType\n      ...AdminCoursesCourseType\n    }\n  }\n": types.GetAdminCoursesDocument,
    "\n  fragment AdminCourseType on CourseType {\n    id\n    label\n    coefficient\n    description\n  }\n\n  mutation InsertCourseTypes($objects: [CourseTypeInsertInput!]!) {\n    insertData: insertCourseType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourseTypes(\n    $objects: [CourseTypeInsertInput!]!\n    $onConflict: CourseTypeOnConflict\n  ) {\n    upsertData: insertCourseType(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourseTypes($ids: [Int!]!, $changes: CourseTypeSetInput!) {\n    updateData: updateCourseType(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourseTypes($ids: [Int!]!) {\n    deleteData: deleteCourseType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminCourseTypeFragmentDoc,
    "\n  fragment AdminCourse on Course {\n    id\n    year\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    track {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    semester\n    type {\n      label\n    }\n    hours\n    hoursAdjusted\n    groups\n    groupsAdjusted\n    description\n    priorityRule\n    visible\n  }\n\n  fragment AdminCoursesDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n      tracks {\n        id\n        name\n      }\n    }\n  }\n\n  fragment AdminCoursesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertCourses($objects: [CourseInsertInput!]!) {\n    insertData: insertCourse(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourses(\n    $objects: [CourseInsertInput!]!\n    $onConflict: CourseOnConflict\n  ) {\n    upsertData: insertCourse(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourses($ids: [Int!]!, $changes: CourseSetInput!) {\n    updateData: updateCourse(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourses($ids: [Int!]!) {\n    deleteData: deleteCourse(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminCourseFragmentDoc,
    "\n  fragment AdminDegree on Degree {\n    id\n    name\n    nameShort\n    visible\n  }\n\n  mutation InsertDegrees($objects: [DegreeInsertInput!]!) {\n    insertData: insertDegree(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertDegrees(\n    $objects: [DegreeInsertInput!]!\n    $onConflict: DegreeOnConflict\n  ) {\n    upsertData: insertDegree(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateDegrees($ids: [Int!]!, $changes: DegreeSetInput!) {\n    updateData: updateDegree(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteDegrees($ids: [Int!]!) {\n    deleteData: deleteDegree(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminDegreeFragmentDoc,
    "\n  fragment AdminProgram on Program {\n    id\n    degree {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminProgramsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertPrograms($objects: [ProgramInsertInput!]!) {\n    insertData: insertProgram(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPrograms(\n    $objects: [ProgramInsertInput!]!\n    $onConflict: ProgramOnConflict\n  ) {\n    upsertData: insertProgram(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePrograms($ids: [Int!]!, $changes: ProgramSetInput!) {\n    updateData: updateProgram(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePrograms($ids: [Int!]!) {\n    deleteData: deleteProgram(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminProgramFragmentDoc,
    "\n  fragment AdminTrack on Track {\n    id\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminTracksDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n    }\n  }\n\n  fragment AdminTracksProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertTracks($objects: [TrackInsertInput!]!) {\n    insertData: insertTrack(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTracks(\n    $objects: [TrackInsertInput!]!\n    $onConflict: TrackOnConflict\n  ) {\n    upsertData: insertTrack(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTracks($ids: [Int!]!, $changes: TrackSetInput!) {\n    updateData: updateTrack(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTracks($ids: [Int!]!) {\n    deleteData: deleteTrack(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminTrackFragmentDoc,
    "\n  query GetAdminRoles {\n    roles: role(\n      orderBy: [\n        { type: ASC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRole\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRolesTeacher\n    }\n  }\n": types.GetAdminRolesDocument,
    "\n  mutation UpdateCustomText($key: String!, $value: String) {\n    insertAppSettingOne(\n      object: { key: $key, value: $value }\n      onConflict: { constraint: app_setting_pkey, updateColumns: [value] }\n    ) {\n      key\n    }\n  }\n\n  mutation DeleteCustomText($key: String!) {\n    deleteAppSettingByPk(key: $key) {\n      key\n    }\n  }\n": types.UpdateCustomTextDocument,
    "\n  mutation SetCurrentPhase($phase: PhaseEnum!) {\n    updateCurrentPhaseByPk(pkColumns: { id: 1 }, _set: { value: $phase }) {\n      value\n    }\n  }\n": types.SetCurrentPhaseDocument,
    "\n  fragment AdminRole on Role {\n    id\n    teacher {\n      email\n    }\n    type\n    comment\n  }\n\n  fragment AdminRolesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertRoles($objects: [RoleInsertInput!]!) {\n    insertData: insertRole(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRoles(\n    $objects: [RoleInsertInput!]!\n    $onConflict: RoleOnConflict\n  ) {\n    upsertData: insertRole(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRoles($ids: [Int!]!, $changes: RoleSetInput!) {\n    updateData: updateRole(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRoles($ids: [Int!]!) {\n    deleteData: deleteRole(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminRoleFragmentDoc,
    "\n  mutation SetCurrentYear($value: Int!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: { current: true }) {\n      value\n    }\n  }\n\n  mutation InsertYear($value: Int!, $visible: Boolean!) {\n    insertYearOne(object: { value: $value, visible: $visible }) {\n      value\n    }\n  }\n\n  mutation UpdateYear($value: Int!, $changes: YearSetInput!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: $changes) {\n      value\n    }\n  }\n\n  mutation DeleteYear($value: Int!) {\n    deleteYearByPk(value: $value) {\n      value\n    }\n  }\n\n  mutation CreateServices($year: Int!) {\n    createYearServices(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation CopyCourses($year: Int!) {\n    copyYearCourses(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation ComputePriorities($year: Int!) {\n    computeYearPriorities(args: { p_year: $year }) {\n      id\n    }\n  }\n": types.SetCurrentYearDocument,
    "\n  query GetAdminRequests {\n    requests: request(\n      orderBy: [\n        { year: DESC }\n        { type: ASC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminRequest\n    }\n    priorities: priority(\n      orderBy: [\n        { year: DESC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminPriority\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRequestsService\n      ...AdminPrioritiesService\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRequestsTeacher\n      ...AdminPrioritiesTeacher\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminRequestsCourse\n      ...AdminPrioritiesCourse\n    }\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminRequestsDegree\n      ...AdminPrioritiesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminRequestsProgram\n      ...AdminPrioritiesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminRequestsTrack\n      ...AdminPrioritiesTrack\n    }\n    courseTypes: courseType(orderBy: { label: ASC }) {\n      ...AdminRequestsCourseType\n      ...AdminPrioritiesCourseType\n    }\n  }\n": types.GetAdminRequestsDocument,
    "\n  fragment AdminPriority on Priority {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  fragment AdminPrioritiesService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminPrioritiesTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminPrioritiesCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminPrioritiesDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertPriorities($objects: [PriorityInsertInput!]!) {\n    insertData: insertPriority(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPriorities(\n    $objects: [PriorityInsertInput!]!\n    $onConflict: PriorityOnConflict\n  ) {\n    upsertData: insertPriority(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePriorities($ids: [Int!]!, $changes: PrioritySetInput!) {\n    updateData: updatePriority(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePriorities($ids: [Int!]!) {\n    deleteData: deletePriority(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminPriorityFragmentDoc,
    "\n  fragment AdminRequest on Request {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    type\n    hours\n  }\n\n  fragment AdminRequestsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminRequestsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminRequestsCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminRequestsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertRequests($objects: [RequestInsertInput!]!) {\n    insertData: insertRequest(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRequests(\n    $objects: [RequestInsertInput!]!\n    $onConflict: RequestOnConflict\n  ) {\n    upsertData: insertRequest(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRequests($ids: [Int!]!, $changes: RequestSetInput!) {\n    updateData: updateRequest(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequests($ids: [Int!]!) {\n    deleteData: deleteRequest(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminRequestFragmentDoc,
    "\n  query GetAdminTeachers {\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminTeacher\n      ...AdminServicesTeacher\n      ...AdminServiceModificationsTeacher\n    }\n    positions: position(orderBy: [{ label: ASC }]) {\n      ...AdminPosition\n      ...AdminTeachersPosition\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminService\n      ...AdminServiceModificationsService\n    }\n    serviceModifications: serviceModification(\n      orderBy: [\n        { service: { year: DESC } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminServiceModification\n    }\n    serviceModificationTypes: serviceModificationType(\n      orderBy: [{ label: ASC }]\n    ) {\n      ...AdminServiceModificationType\n      ...AdminServiceModificationsServiceModificationType\n    }\n  }\n": types.GetAdminTeachersDocument,
    "\n  fragment AdminPosition on Position {\n    id\n    label\n    description\n    baseServiceHours\n  }\n\n  mutation InsertPositions($objects: [PositionInsertInput!]!) {\n    insertData: insertPosition(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPositions(\n    $objects: [PositionInsertInput!]!\n    $onConflict: PositionOnConflict!\n  ) {\n    upsertData: insertPosition(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePositions($ids: [Int!]!, $changes: PositionSetInput!) {\n    updateData: updatePosition(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePositions($ids: [Int!]!) {\n    deleteData: deletePosition(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminPositionFragmentDoc,
    "\n  fragment AdminServiceModificationType on ServiceModificationType {\n    id\n    label\n    description\n  }\n\n  mutation InsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n  ) {\n    insertData: insertServiceModificationType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n    $onConflict: ServiceModificationTypeOnConflict\n  ) {\n    upsertData: insertServiceModificationType(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModificationTypes(\n    $ids: [Int!]!\n    $changes: ServiceModificationTypeSetInput!\n  ) {\n    updateData: updateServiceModificationType(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModificationTypes($ids: [Int!]!) {\n    deleteData: deleteServiceModificationType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminServiceModificationTypeFragmentDoc,
    "\n  fragment AdminServiceModification on ServiceModification {\n    id\n    service {\n      year\n      teacher {\n        email\n        displayname\n      }\n    }\n    type {\n      label\n    }\n    hours\n  }\n\n  fragment AdminServiceModificationsServiceModificationType on ServiceModificationType {\n    id\n    label\n  }\n\n  fragment AdminServiceModificationsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminServiceModificationsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  mutation InsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n  ) {\n    insertData: insertServiceModification(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n    $onConflict: ServiceModificationOnConflict\n  ) {\n    upsertData: insertServiceModification(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModifications(\n    $ids: [Int!]!\n    $changes: ServiceModificationSetInput!\n  ) {\n    updateData: updateServiceModification(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModifications($ids: [Int!]!) {\n    deleteData: deleteServiceModification(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminServiceModificationFragmentDoc,
    "\n  fragment AdminService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n    hours\n  }\n\n  fragment AdminServicesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertServices($objects: [ServiceInsertInput!]!) {\n    insertData: insertService(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServices(\n    $objects: [ServiceInsertInput!]!\n    $onConflict: ServiceOnConflict\n  ) {\n    upsertData: insertService(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServices($ids: [Int!]!, $changes: ServiceSetInput!) {\n    updateData: updateService(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServices($ids: [Int!]!) {\n    deleteData: deleteService(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminServiceFragmentDoc,
    "\n  fragment AdminTeacher on Teacher {\n    id\n    email\n    firstname\n    lastname\n    alias\n    position {\n      label\n    }\n    baseServiceHours\n    visible\n    active\n  }\n\n  fragment AdminTeachersPosition on Position {\n    id\n    label\n  }\n\n  mutation InsertTeachers($objects: [TeacherInsertInput!]!) {\n    insertData: insertTeacher(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTeachers(\n    $objects: [TeacherInsertInput!]!\n    $onConflict: TeacherOnConflict\n  ) {\n    upsertData: insertTeacher(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTeachers($ids: [Int!]!, $changes: TeacherSetInput!) {\n    updateData: updateTeacher(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTeachers($ids: [Int!]!) {\n    deleteData: deleteTeacher(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.AdminTeacherFragmentDoc,
    "\n  fragment PriorityChipData on Priority {\n    id\n    service {\n      teacher {\n        displayname\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  mutation DeletePriority($id: Int!) {\n    deletePriorityByPk(id: $id) {\n      id\n    }\n  }\n\n  mutation DeleteComputedPriority($id: Int!) {\n    updatePriorityByPk(\n      pkColumns: { id: $id }\n      _set: { seniority: null, isPriority: null, computed: false }\n    ) {\n      id\n    }\n  }\n": types.PriorityChipDataFragmentDoc,
    "\n  fragment PriorityFormData on Course {\n    year\n    courseId: id\n  }\n\n  mutation UpsertPriority(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $seniority: Int\n    $isPriority: Boolean\n  ) {\n    insertPriorityOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        seniority: $seniority\n        isPriority: $isPriority\n        computed: false\n      }\n      onConflict: {\n        constraint: priority_service_id_course_id_key\n        updateColumns: [seniority, isPriority, computed]\n      }\n    ) {\n      id\n    }\n  }\n": types.PriorityFormDataFragmentDoc,
    "\n  fragment RequestCardData on Request {\n    id\n    year\n    service {\n      id\n      teacher {\n        displayname\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hoursEffective\n    }\n    type\n    hours\n    isPriority\n  }\n\n  query GetAssignment($serviceId: Int!, $courseId: Int!) {\n    requests: request(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: ASSIGNMENT } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      id\n      hours\n    }\n  }\n\n  mutation InsertAssignment(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: ASSIGNMENT\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation UpdateAssignment($id: Int!, $hours: Float!) {\n    updateRequestByPk(pkColumns: { id: $id }, _set: { hours: $hours }) {\n      id\n    }\n  }\n\n  mutation DeleteRequestCard($id: Int!) {\n    deleteRequestByPk(id: $id) {\n      id\n    }\n  }\n": types.RequestCardDataFragmentDoc,
    "\n  fragment RequestFormData on Course {\n    year\n    courseId: id\n    hoursPerGroup: hoursEffective\n  }\n\n  mutation UpsertRequest(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      onConflict: {\n        constraint: request_service_id_course_id_type_key\n        updateColumns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n  ) {\n    deleteRequest(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n": types.RequestFormDataFragmentDoc,
    "\n  query GetServices($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { displayname: ASC } }]\n    ) {\n      id\n      teacher {\n        displayname\n      }\n    }\n  }\n": types.GetServicesDocument,
    "\n  fragment CourseArchivesData on Course {\n    year\n    programId\n    trackId\n    name\n    semester\n    typeId\n  }\n\n  query GetCourseArchives(\n    $year: Int!\n    $programId: Int!\n    $trackIdComp: IntComparisonExp\n    $name: String!\n    $semester: Int!\n    $typeId: Int!\n  ) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _lt: $year } }\n          { programId: { _eq: $programId } }\n          { trackId: $trackIdComp }\n          { name: { _eq: $name } }\n          { semester: { _eq: $semester } }\n          { typeId: { _eq: $typeId } }\n        ]\n      }\n      orderBy: [{ year: DESC }]\n    ) {\n      year\n      requests(\n        where: { type: { _eq: ASSIGNMENT } }\n        orderBy: [{ service: { teacher: { displayname: ASC } } }]\n      ) {\n        id\n        ...RequestCardData\n      }\n    }\n  }\n": types.CourseArchivesDataFragmentDoc,
    "\n  fragment CourseCoordinators on Course {\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacher {\n        displayname\n      }\n      comment\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n  }\n": types.CourseCoordinatorsFragmentDoc,
    "\n  fragment CourseDescription on Course {\n    courseId: id\n    description\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacherId\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    updateCourseByPk(\n      pkColumns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n": types.CourseDescriptionFragmentDoc,
    "\n  fragment CourseDetails on Course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescription\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchivesData\n  }\n": types.CourseDetailsFragmentDoc,
    "\n  fragment CourseExpansion on Course {\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n    name\n    semester\n    courseType: type {\n      label\n    }\n  }\n": types.CourseExpansionFragmentDoc,
    "\n  fragment CoursePriorities on Course {\n    ...PriorityFormData\n\n    priorities(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      isPriority\n      ...PriorityChipData\n    }\n  }\n": types.CoursePrioritiesFragmentDoc,
    "\n  fragment CourseRequests on Course {\n    ...RequestFormData\n\n    requests(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n": types.CourseRequestsFragmentDoc,
    "\n  fragment TeacherServiceDetails on Service {\n    id\n    year\n    teacherId\n    hours\n    modifications(orderBy: [{ type: { label: ASC } }, { hours: ASC }]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $teacherId: Int!, $hours: Float!) {\n    updateService(\n      where: { year: { _eq: $year }, id: { _eq: $teacherId } }\n      _set: { hours: $hours }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationType(orderBy: { label: ASC }) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    insertServiceModificationOne(\n      object: {\n        serviceId: $serviceId\n        typeId: $modificationTypeId\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModificationByPk(id: $id) {\n      id\n    }\n  }\n": types.TeacherServiceDetailsFragmentDoc,
    "\n  fragment TeacherServiceMessage on Service {\n    id\n    year\n    teacherId\n    message {\n      id\n      content\n    }\n  }\n\n  mutation UpsertMessage($serviceId: Int!, $content: String!) {\n    insertMessageOne(\n      object: { serviceId: $serviceId, content: $content }\n      onConflict: {\n        constraint: message_service_id_key\n        updateColumns: [content]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteMessage($serviceId: Int!) {\n    deleteRequest(where: { serviceId: { _eq: $serviceId } }) {\n      returning {\n        id\n      }\n    }\n  }\n": types.TeacherServiceMessageFragmentDoc,
    "\n  fragment TeacherServicePriorities on Service {\n    priorities(\n      where: { isPriority: { _isNull: false } }\n      orderBy: [\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n        { course: { programId: ASC } }\n        { course: { trackId: ASC } }\n        { course: { name: ASC } }\n      ]\n    ) {\n      id\n      course {\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        name: nameDisplay\n        semester\n        type {\n          label\n        }\n      }\n      seniority\n      isPriority\n    }\n  }\n": types.TeacherServicePrioritiesFragmentDoc,
    "\n  fragment TeacherServiceRequests on Service {\n    assignment: requests(where: { type: { _eq: ASSIGNMENT } }) {\n      id\n      hoursWeighted\n    }\n    primary: requests(where: { type: { _eq: PRIMARY } }) {\n      id\n      hoursWeighted\n    }\n    secondary: requests(where: { type: { _eq: SECONDARY } }) {\n      id\n      hoursWeighted\n    }\n  }\n": types.TeacherServiceRequestsFragmentDoc,
    "\n  fragment ServiceTeacher on Teacher {\n    ...TeacherTitle\n    ...TeacherCoordinations\n    coordinationIds: coordinations {\n      id\n    }\n  }\n": types.ServiceTeacherFragmentDoc,
    "\n  fragment TeacherCoordinations on Teacher {\n    coordinations(\n      orderBy: [\n        { programId: ASC_NULLS_LAST }\n        { trackId: ASC_NULLS_LAST }\n        { courseId: ASC }\n      ]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        year\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n": types.TeacherCoordinationsFragmentDoc,
    "\n  fragment TeacherTitle on Teacher {\n    displayname\n    position {\n      label\n    }\n  }\n": types.TeacherTitleFragmentDoc,
    "\n  query GetAssignments($year: Int!, $where: RequestBoolExp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: ASSIGNMENT } }\n          $where\n        ]\n      }\n      orderBy: [\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { semester: ASC } }\n        { course: { name: ASC } }\n        { course: { type: { label: ASC } } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n      ]\n    ) {\n      course {\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service {\n        teacher {\n          displayname\n          email\n        }\n      }\n    }\n  }\n": types.GetAssignmentsDocument,
    "\n  mutation DummyMutation {\n    dummyFunction {\n      __typename\n    }\n  }\n": types.DummyMutationDocument,
    "\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hoursEffective: { _gt: 0 } }\n          { groupsEffective: { _gt: 0 } }\n        ]\n      }\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { semester: ASC }\n        { name: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetServiceRows($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { lastname: ASC } }, { teacher: { firstname: ASC } }]\n    ) {\n      ...ServiceRow\n      ...TableCoursesService\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: courseByPk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n": types.GetCourseRowsDocument,
    "\n  query GetTeacherDetails($id: Int!) {\n    teacher: teacherByPk(id: $id) {\n      ...ServiceTeacher\n    }\n  }\n\n  query GetServiceDetails($id: Int!) {\n    service: serviceByPk(id: $id) {\n      teacher {\n        ...ServiceTeacher\n      }\n      ...TeacherServiceDetails\n      ...TeacherServiceRequests\n      ...TeacherServicePriorities\n      ...TeacherServiceMessage\n    }\n  }\n": types.GetTeacherDetailsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAppData($userId: Int!) {\n    currentPhase: currentPhaseByPk(id: 1) {\n      value\n    }\n    years: year(orderBy: { value: DESC }) {\n      value\n      current\n      visible\n    }\n    customTexts: appSetting(orderBy: [{ key: ASC }]) {\n      key\n      value\n    }\n    profile: teacherByPk(id: $userId) {\n      id\n      displayname\n      services {\n        id\n        year\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAppData($userId: Int!) {\n    currentPhase: currentPhaseByPk(id: 1) {\n      value\n    }\n    years: year(orderBy: { value: DESC }) {\n      value\n      current\n      visible\n    }\n    customTexts: appSetting(orderBy: [{ key: ASC }]) {\n      key\n      value\n    }\n    profile: teacherByPk(id: $userId) {\n      id\n      displayname\n      services {\n        id\n        year\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesService on Service {\n    id\n    teacher {\n      displayname\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesService on Service {\n    id\n    teacher {\n      displayname\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications {\n      hours\n    }\n    requests {\n      type\n      hoursWeighted\n    }\n    message {\n      content\n    }\n  }\n"): (typeof documents)["\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications {\n      hours\n    }\n    requests {\n      type\n      hoursWeighted\n    }\n    message {\n      content\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAdminCourses {\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminDegree\n      ...AdminProgramsDegree\n      ...AdminTracksDegree\n      ...AdminCoursesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminProgram\n      ...AdminTracksProgram\n      ...AdminCoursesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminTrack\n      ...AdminCoursesTrack\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminCourse\n    }\n    types: courseType(orderBy: { label: ASC }) {\n      ...AdminCourseType\n      ...AdminCoursesCourseType\n    }\n  }\n"): (typeof documents)["\n  query GetAdminCourses {\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminDegree\n      ...AdminProgramsDegree\n      ...AdminTracksDegree\n      ...AdminCoursesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminProgram\n      ...AdminTracksProgram\n      ...AdminCoursesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminTrack\n      ...AdminCoursesTrack\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminCourse\n    }\n    types: courseType(orderBy: { label: ASC }) {\n      ...AdminCourseType\n      ...AdminCoursesCourseType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminCourseType on CourseType {\n    id\n    label\n    coefficient\n    description\n  }\n\n  mutation InsertCourseTypes($objects: [CourseTypeInsertInput!]!) {\n    insertData: insertCourseType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourseTypes(\n    $objects: [CourseTypeInsertInput!]!\n    $onConflict: CourseTypeOnConflict\n  ) {\n    upsertData: insertCourseType(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourseTypes($ids: [Int!]!, $changes: CourseTypeSetInput!) {\n    updateData: updateCourseType(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourseTypes($ids: [Int!]!) {\n    deleteData: deleteCourseType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminCourseType on CourseType {\n    id\n    label\n    coefficient\n    description\n  }\n\n  mutation InsertCourseTypes($objects: [CourseTypeInsertInput!]!) {\n    insertData: insertCourseType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourseTypes(\n    $objects: [CourseTypeInsertInput!]!\n    $onConflict: CourseTypeOnConflict\n  ) {\n    upsertData: insertCourseType(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourseTypes($ids: [Int!]!, $changes: CourseTypeSetInput!) {\n    updateData: updateCourseType(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourseTypes($ids: [Int!]!) {\n    deleteData: deleteCourseType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminCourse on Course {\n    id\n    year\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    track {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    semester\n    type {\n      label\n    }\n    hours\n    hoursAdjusted\n    groups\n    groupsAdjusted\n    description\n    priorityRule\n    visible\n  }\n\n  fragment AdminCoursesDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n      tracks {\n        id\n        name\n      }\n    }\n  }\n\n  fragment AdminCoursesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertCourses($objects: [CourseInsertInput!]!) {\n    insertData: insertCourse(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourses(\n    $objects: [CourseInsertInput!]!\n    $onConflict: CourseOnConflict\n  ) {\n    upsertData: insertCourse(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourses($ids: [Int!]!, $changes: CourseSetInput!) {\n    updateData: updateCourse(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourses($ids: [Int!]!) {\n    deleteData: deleteCourse(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminCourse on Course {\n    id\n    year\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    track {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    semester\n    type {\n      label\n    }\n    hours\n    hoursAdjusted\n    groups\n    groupsAdjusted\n    description\n    priorityRule\n    visible\n  }\n\n  fragment AdminCoursesDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n      tracks {\n        id\n        name\n      }\n    }\n  }\n\n  fragment AdminCoursesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminCoursesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertCourses($objects: [CourseInsertInput!]!) {\n    insertData: insertCourse(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertCourses(\n    $objects: [CourseInsertInput!]!\n    $onConflict: CourseOnConflict\n  ) {\n    upsertData: insertCourse(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateCourses($ids: [Int!]!, $changes: CourseSetInput!) {\n    updateData: updateCourse(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteCourses($ids: [Int!]!) {\n    deleteData: deleteCourse(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminDegree on Degree {\n    id\n    name\n    nameShort\n    visible\n  }\n\n  mutation InsertDegrees($objects: [DegreeInsertInput!]!) {\n    insertData: insertDegree(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertDegrees(\n    $objects: [DegreeInsertInput!]!\n    $onConflict: DegreeOnConflict\n  ) {\n    upsertData: insertDegree(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateDegrees($ids: [Int!]!, $changes: DegreeSetInput!) {\n    updateData: updateDegree(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteDegrees($ids: [Int!]!) {\n    deleteData: deleteDegree(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminDegree on Degree {\n    id\n    name\n    nameShort\n    visible\n  }\n\n  mutation InsertDegrees($objects: [DegreeInsertInput!]!) {\n    insertData: insertDegree(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertDegrees(\n    $objects: [DegreeInsertInput!]!\n    $onConflict: DegreeOnConflict\n  ) {\n    upsertData: insertDegree(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateDegrees($ids: [Int!]!, $changes: DegreeSetInput!) {\n    updateData: updateDegree(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteDegrees($ids: [Int!]!) {\n    deleteData: deleteDegree(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminProgram on Program {\n    id\n    degree {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminProgramsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertPrograms($objects: [ProgramInsertInput!]!) {\n    insertData: insertProgram(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPrograms(\n    $objects: [ProgramInsertInput!]!\n    $onConflict: ProgramOnConflict\n  ) {\n    upsertData: insertProgram(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePrograms($ids: [Int!]!, $changes: ProgramSetInput!) {\n    updateData: updateProgram(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePrograms($ids: [Int!]!) {\n    deleteData: deleteProgram(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminProgram on Program {\n    id\n    degree {\n      name\n      nameDisplay\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminProgramsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertPrograms($objects: [ProgramInsertInput!]!) {\n    insertData: insertProgram(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPrograms(\n    $objects: [ProgramInsertInput!]!\n    $onConflict: ProgramOnConflict\n  ) {\n    upsertData: insertProgram(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePrograms($ids: [Int!]!, $changes: ProgramSetInput!) {\n    updateData: updateProgram(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePrograms($ids: [Int!]!) {\n    deleteData: deleteProgram(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminTrack on Track {\n    id\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminTracksDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n    }\n  }\n\n  fragment AdminTracksProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertTracks($objects: [TrackInsertInput!]!) {\n    insertData: insertTrack(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTracks(\n    $objects: [TrackInsertInput!]!\n    $onConflict: TrackOnConflict\n  ) {\n    upsertData: insertTrack(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTracks($ids: [Int!]!, $changes: TrackSetInput!) {\n    updateData: updateTrack(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTracks($ids: [Int!]!) {\n    deleteData: deleteTrack(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminTrack on Track {\n    id\n    program {\n      name\n      nameDisplay\n      degree {\n        name\n        nameDisplay\n      }\n    }\n    name\n    nameShort\n    nameDisplay\n    visible\n  }\n\n  fragment AdminTracksDegree on Degree {\n    id\n    name\n    nameDisplay\n    programs {\n      id\n      name\n    }\n  }\n\n  fragment AdminTracksProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  mutation InsertTracks($objects: [TrackInsertInput!]!) {\n    insertData: insertTrack(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTracks(\n    $objects: [TrackInsertInput!]!\n    $onConflict: TrackOnConflict\n  ) {\n    upsertData: insertTrack(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTracks($ids: [Int!]!, $changes: TrackSetInput!) {\n    updateData: updateTrack(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTracks($ids: [Int!]!) {\n    deleteData: deleteTrack(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAdminRoles {\n    roles: role(\n      orderBy: [\n        { type: ASC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRole\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRolesTeacher\n    }\n  }\n"): (typeof documents)["\n  query GetAdminRoles {\n    roles: role(\n      orderBy: [\n        { type: ASC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRole\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRolesTeacher\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCustomText($key: String!, $value: String) {\n    insertAppSettingOne(\n      object: { key: $key, value: $value }\n      onConflict: { constraint: app_setting_pkey, updateColumns: [value] }\n    ) {\n      key\n    }\n  }\n\n  mutation DeleteCustomText($key: String!) {\n    deleteAppSettingByPk(key: $key) {\n      key\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCustomText($key: String!, $value: String) {\n    insertAppSettingOne(\n      object: { key: $key, value: $value }\n      onConflict: { constraint: app_setting_pkey, updateColumns: [value] }\n    ) {\n      key\n    }\n  }\n\n  mutation DeleteCustomText($key: String!) {\n    deleteAppSettingByPk(key: $key) {\n      key\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCurrentPhase($phase: PhaseEnum!) {\n    updateCurrentPhaseByPk(pkColumns: { id: 1 }, _set: { value: $phase }) {\n      value\n    }\n  }\n"): (typeof documents)["\n  mutation SetCurrentPhase($phase: PhaseEnum!) {\n    updateCurrentPhaseByPk(pkColumns: { id: 1 }, _set: { value: $phase }) {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminRole on Role {\n    id\n    teacher {\n      email\n    }\n    type\n    comment\n  }\n\n  fragment AdminRolesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertRoles($objects: [RoleInsertInput!]!) {\n    insertData: insertRole(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRoles(\n    $objects: [RoleInsertInput!]!\n    $onConflict: RoleOnConflict\n  ) {\n    upsertData: insertRole(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRoles($ids: [Int!]!, $changes: RoleSetInput!) {\n    updateData: updateRole(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRoles($ids: [Int!]!) {\n    deleteData: deleteRole(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminRole on Role {\n    id\n    teacher {\n      email\n    }\n    type\n    comment\n  }\n\n  fragment AdminRolesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertRoles($objects: [RoleInsertInput!]!) {\n    insertData: insertRole(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRoles(\n    $objects: [RoleInsertInput!]!\n    $onConflict: RoleOnConflict\n  ) {\n    upsertData: insertRole(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRoles($ids: [Int!]!, $changes: RoleSetInput!) {\n    updateData: updateRole(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRoles($ids: [Int!]!) {\n    deleteData: deleteRole(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCurrentYear($value: Int!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: { current: true }) {\n      value\n    }\n  }\n\n  mutation InsertYear($value: Int!, $visible: Boolean!) {\n    insertYearOne(object: { value: $value, visible: $visible }) {\n      value\n    }\n  }\n\n  mutation UpdateYear($value: Int!, $changes: YearSetInput!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: $changes) {\n      value\n    }\n  }\n\n  mutation DeleteYear($value: Int!) {\n    deleteYearByPk(value: $value) {\n      value\n    }\n  }\n\n  mutation CreateServices($year: Int!) {\n    createYearServices(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation CopyCourses($year: Int!) {\n    copyYearCourses(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation ComputePriorities($year: Int!) {\n    computeYearPriorities(args: { p_year: $year }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SetCurrentYear($value: Int!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: { current: true }) {\n      value\n    }\n  }\n\n  mutation InsertYear($value: Int!, $visible: Boolean!) {\n    insertYearOne(object: { value: $value, visible: $visible }) {\n      value\n    }\n  }\n\n  mutation UpdateYear($value: Int!, $changes: YearSetInput!) {\n    updateYearByPk(pkColumns: { value: $value }, _set: $changes) {\n      value\n    }\n  }\n\n  mutation DeleteYear($value: Int!) {\n    deleteYearByPk(value: $value) {\n      value\n    }\n  }\n\n  mutation CreateServices($year: Int!) {\n    createYearServices(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation CopyCourses($year: Int!) {\n    copyYearCourses(args: { p_year: $year }) {\n      id\n    }\n  }\n\n  mutation ComputePriorities($year: Int!) {\n    computeYearPriorities(args: { p_year: $year }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAdminRequests {\n    requests: request(\n      orderBy: [\n        { year: DESC }\n        { type: ASC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminRequest\n    }\n    priorities: priority(\n      orderBy: [\n        { year: DESC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminPriority\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRequestsService\n      ...AdminPrioritiesService\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRequestsTeacher\n      ...AdminPrioritiesTeacher\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminRequestsCourse\n      ...AdminPrioritiesCourse\n    }\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminRequestsDegree\n      ...AdminPrioritiesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminRequestsProgram\n      ...AdminPrioritiesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminRequestsTrack\n      ...AdminPrioritiesTrack\n    }\n    courseTypes: courseType(orderBy: { label: ASC }) {\n      ...AdminRequestsCourseType\n      ...AdminPrioritiesCourseType\n    }\n  }\n"): (typeof documents)["\n  query GetAdminRequests {\n    requests: request(\n      orderBy: [\n        { year: DESC }\n        { type: ASC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminRequest\n    }\n    priorities: priority(\n      orderBy: [\n        { year: DESC }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { name: ASC } }\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n      ]\n    ) {\n      ...AdminPriority\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminRequestsService\n      ...AdminPrioritiesService\n    }\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminRequestsTeacher\n      ...AdminPrioritiesTeacher\n    }\n    courses: course(\n      orderBy: [\n        { year: DESC }\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { name: ASC }\n        { semester: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminRequestsCourse\n      ...AdminPrioritiesCourse\n    }\n    degrees: degree(orderBy: [{ name: ASC }]) {\n      ...AdminRequestsDegree\n      ...AdminPrioritiesDegree\n    }\n    programs: program(orderBy: [{ degree: { name: ASC } }, { name: ASC }]) {\n      ...AdminRequestsProgram\n      ...AdminPrioritiesProgram\n    }\n    tracks: track(\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { name: ASC }\n      ]\n    ) {\n      ...AdminRequestsTrack\n      ...AdminPrioritiesTrack\n    }\n    courseTypes: courseType(orderBy: { label: ASC }) {\n      ...AdminRequestsCourseType\n      ...AdminPrioritiesCourseType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminPriority on Priority {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  fragment AdminPrioritiesService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminPrioritiesTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminPrioritiesCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminPrioritiesDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertPriorities($objects: [PriorityInsertInput!]!) {\n    insertData: insertPriority(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPriorities(\n    $objects: [PriorityInsertInput!]!\n    $onConflict: PriorityOnConflict\n  ) {\n    upsertData: insertPriority(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePriorities($ids: [Int!]!, $changes: PrioritySetInput!) {\n    updateData: updatePriority(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePriorities($ids: [Int!]!) {\n    deleteData: deletePriority(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminPriority on Priority {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  fragment AdminPrioritiesService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminPrioritiesTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminPrioritiesCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminPrioritiesDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminPrioritiesCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertPriorities($objects: [PriorityInsertInput!]!) {\n    insertData: insertPriority(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPriorities(\n    $objects: [PriorityInsertInput!]!\n    $onConflict: PriorityOnConflict\n  ) {\n    upsertData: insertPriority(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePriorities($ids: [Int!]!, $changes: PrioritySetInput!) {\n    updateData: updatePriority(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePriorities($ids: [Int!]!) {\n    deleteData: deletePriority(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminRequest on Request {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    type\n    hours\n  }\n\n  fragment AdminRequestsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminRequestsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminRequestsCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminRequestsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertRequests($objects: [RequestInsertInput!]!) {\n    insertData: insertRequest(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRequests(\n    $objects: [RequestInsertInput!]!\n    $onConflict: RequestOnConflict\n  ) {\n    upsertData: insertRequest(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRequests($ids: [Int!]!, $changes: RequestSetInput!) {\n    updateData: updateRequest(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequests($ids: [Int!]!) {\n    deleteData: deleteRequest(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminRequest on Request {\n    id\n    year\n    service {\n      teacher {\n        email\n        displayname\n      }\n    }\n    course {\n      name\n      nameDisplay\n      program {\n        name\n        nameDisplay\n        degree {\n          name\n          nameDisplay\n        }\n      }\n      track {\n        name\n        nameDisplay\n      }\n      semester\n      type {\n        label\n      }\n    }\n    type\n    hours\n  }\n\n  fragment AdminRequestsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminRequestsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  fragment AdminRequestsCourse on Course {\n    id\n    year\n    program {\n      name\n      degree {\n        name\n      }\n    }\n    track {\n      name\n      program {\n        name\n        degree {\n          name\n        }\n      }\n    }\n    name\n    nameDisplay\n    semester\n    type {\n      label\n    }\n  }\n\n  fragment AdminRequestsDegree on Degree {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsProgram on Program {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsTrack on Track {\n    id\n    name\n    nameDisplay\n  }\n\n  fragment AdminRequestsCourseType on CourseType {\n    id\n    label\n  }\n\n  mutation InsertRequests($objects: [RequestInsertInput!]!) {\n    insertData: insertRequest(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertRequests(\n    $objects: [RequestInsertInput!]!\n    $onConflict: RequestOnConflict\n  ) {\n    upsertData: insertRequest(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateRequests($ids: [Int!]!, $changes: RequestSetInput!) {\n    updateData: updateRequest(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequests($ids: [Int!]!) {\n    deleteData: deleteRequest(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAdminTeachers {\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminTeacher\n      ...AdminServicesTeacher\n      ...AdminServiceModificationsTeacher\n    }\n    positions: position(orderBy: [{ label: ASC }]) {\n      ...AdminPosition\n      ...AdminTeachersPosition\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminService\n      ...AdminServiceModificationsService\n    }\n    serviceModifications: serviceModification(\n      orderBy: [\n        { service: { year: DESC } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminServiceModification\n    }\n    serviceModificationTypes: serviceModificationType(\n      orderBy: [{ label: ASC }]\n    ) {\n      ...AdminServiceModificationType\n      ...AdminServiceModificationsServiceModificationType\n    }\n  }\n"): (typeof documents)["\n  query GetAdminTeachers {\n    teachers: teacher(orderBy: [{ lastname: ASC }, { firstname: ASC }]) {\n      ...AdminTeacher\n      ...AdminServicesTeacher\n      ...AdminServiceModificationsTeacher\n    }\n    positions: position(orderBy: [{ label: ASC }]) {\n      ...AdminPosition\n      ...AdminTeachersPosition\n    }\n    services: service(\n      orderBy: [\n        { year: DESC }\n        { teacher: { lastname: ASC } }\n        { teacher: { firstname: ASC } }\n      ]\n    ) {\n      ...AdminService\n      ...AdminServiceModificationsService\n    }\n    serviceModifications: serviceModification(\n      orderBy: [\n        { service: { year: DESC } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...AdminServiceModification\n    }\n    serviceModificationTypes: serviceModificationType(\n      orderBy: [{ label: ASC }]\n    ) {\n      ...AdminServiceModificationType\n      ...AdminServiceModificationsServiceModificationType\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminPosition on Position {\n    id\n    label\n    description\n    baseServiceHours\n  }\n\n  mutation InsertPositions($objects: [PositionInsertInput!]!) {\n    insertData: insertPosition(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPositions(\n    $objects: [PositionInsertInput!]!\n    $onConflict: PositionOnConflict!\n  ) {\n    upsertData: insertPosition(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePositions($ids: [Int!]!, $changes: PositionSetInput!) {\n    updateData: updatePosition(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePositions($ids: [Int!]!) {\n    deleteData: deletePosition(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminPosition on Position {\n    id\n    label\n    description\n    baseServiceHours\n  }\n\n  mutation InsertPositions($objects: [PositionInsertInput!]!) {\n    insertData: insertPosition(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertPositions(\n    $objects: [PositionInsertInput!]!\n    $onConflict: PositionOnConflict!\n  ) {\n    upsertData: insertPosition(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdatePositions($ids: [Int!]!, $changes: PositionSetInput!) {\n    updateData: updatePosition(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeletePositions($ids: [Int!]!) {\n    deleteData: deletePosition(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminServiceModificationType on ServiceModificationType {\n    id\n    label\n    description\n  }\n\n  mutation InsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n  ) {\n    insertData: insertServiceModificationType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n    $onConflict: ServiceModificationTypeOnConflict\n  ) {\n    upsertData: insertServiceModificationType(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModificationTypes(\n    $ids: [Int!]!\n    $changes: ServiceModificationTypeSetInput!\n  ) {\n    updateData: updateServiceModificationType(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModificationTypes($ids: [Int!]!) {\n    deleteData: deleteServiceModificationType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminServiceModificationType on ServiceModificationType {\n    id\n    label\n    description\n  }\n\n  mutation InsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n  ) {\n    insertData: insertServiceModificationType(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModificationTypes(\n    $objects: [ServiceModificationTypeInsertInput!]!\n    $onConflict: ServiceModificationTypeOnConflict\n  ) {\n    upsertData: insertServiceModificationType(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModificationTypes(\n    $ids: [Int!]!\n    $changes: ServiceModificationTypeSetInput!\n  ) {\n    updateData: updateServiceModificationType(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModificationTypes($ids: [Int!]!) {\n    deleteData: deleteServiceModificationType(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminServiceModification on ServiceModification {\n    id\n    service {\n      year\n      teacher {\n        email\n        displayname\n      }\n    }\n    type {\n      label\n    }\n    hours\n  }\n\n  fragment AdminServiceModificationsServiceModificationType on ServiceModificationType {\n    id\n    label\n  }\n\n  fragment AdminServiceModificationsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminServiceModificationsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  mutation InsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n  ) {\n    insertData: insertServiceModification(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n    $onConflict: ServiceModificationOnConflict\n  ) {\n    upsertData: insertServiceModification(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModifications(\n    $ids: [Int!]!\n    $changes: ServiceModificationSetInput!\n  ) {\n    updateData: updateServiceModification(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModifications($ids: [Int!]!) {\n    deleteData: deleteServiceModification(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminServiceModification on ServiceModification {\n    id\n    service {\n      year\n      teacher {\n        email\n        displayname\n      }\n    }\n    type {\n      label\n    }\n    hours\n  }\n\n  fragment AdminServiceModificationsServiceModificationType on ServiceModificationType {\n    id\n    label\n  }\n\n  fragment AdminServiceModificationsService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n  }\n\n  fragment AdminServiceModificationsTeacher on Teacher {\n    email\n    displayname\n  }\n\n  mutation InsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n  ) {\n    insertData: insertServiceModification(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServiceModifications(\n    $objects: [ServiceModificationInsertInput!]!\n    $onConflict: ServiceModificationOnConflict\n  ) {\n    upsertData: insertServiceModification(\n      objects: $objects\n      onConflict: $onConflict\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServiceModifications(\n    $ids: [Int!]!\n    $changes: ServiceModificationSetInput!\n  ) {\n    updateData: updateServiceModification(\n      where: { id: { _in: $ids } }\n      _set: $changes\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServiceModifications($ids: [Int!]!) {\n    deleteData: deleteServiceModification(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n    hours\n  }\n\n  fragment AdminServicesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertServices($objects: [ServiceInsertInput!]!) {\n    insertData: insertService(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServices(\n    $objects: [ServiceInsertInput!]!\n    $onConflict: ServiceOnConflict\n  ) {\n    upsertData: insertService(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServices($ids: [Int!]!, $changes: ServiceSetInput!) {\n    updateData: updateService(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServices($ids: [Int!]!) {\n    deleteData: deleteService(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminService on Service {\n    id\n    year\n    teacher {\n      email\n      displayname\n    }\n    hours\n  }\n\n  fragment AdminServicesTeacher on Teacher {\n    id\n    email\n    displayname\n  }\n\n  mutation InsertServices($objects: [ServiceInsertInput!]!) {\n    insertData: insertService(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertServices(\n    $objects: [ServiceInsertInput!]!\n    $onConflict: ServiceOnConflict\n  ) {\n    upsertData: insertService(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateServices($ids: [Int!]!, $changes: ServiceSetInput!) {\n    updateData: updateService(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteServices($ids: [Int!]!) {\n    deleteData: deleteService(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AdminTeacher on Teacher {\n    id\n    email\n    firstname\n    lastname\n    alias\n    position {\n      label\n    }\n    baseServiceHours\n    visible\n    active\n  }\n\n  fragment AdminTeachersPosition on Position {\n    id\n    label\n  }\n\n  mutation InsertTeachers($objects: [TeacherInsertInput!]!) {\n    insertData: insertTeacher(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTeachers(\n    $objects: [TeacherInsertInput!]!\n    $onConflict: TeacherOnConflict\n  ) {\n    upsertData: insertTeacher(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTeachers($ids: [Int!]!, $changes: TeacherSetInput!) {\n    updateData: updateTeacher(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTeachers($ids: [Int!]!) {\n    deleteData: deleteTeacher(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AdminTeacher on Teacher {\n    id\n    email\n    firstname\n    lastname\n    alias\n    position {\n      label\n    }\n    baseServiceHours\n    visible\n    active\n  }\n\n  fragment AdminTeachersPosition on Position {\n    id\n    label\n  }\n\n  mutation InsertTeachers($objects: [TeacherInsertInput!]!) {\n    insertData: insertTeacher(objects: $objects) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpsertTeachers(\n    $objects: [TeacherInsertInput!]!\n    $onConflict: TeacherOnConflict\n  ) {\n    upsertData: insertTeacher(objects: $objects, onConflict: $onConflict) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation UpdateTeachers($ids: [Int!]!, $changes: TeacherSetInput!) {\n    updateData: updateTeacher(where: { id: { _in: $ids } }, _set: $changes) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteTeachers($ids: [Int!]!) {\n    deleteData: deleteTeacher(where: { id: { _in: $ids } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PriorityChipData on Priority {\n    id\n    service {\n      teacher {\n        displayname\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  mutation DeletePriority($id: Int!) {\n    deletePriorityByPk(id: $id) {\n      id\n    }\n  }\n\n  mutation DeleteComputedPriority($id: Int!) {\n    updatePriorityByPk(\n      pkColumns: { id: $id }\n      _set: { seniority: null, isPriority: null, computed: false }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment PriorityChipData on Priority {\n    id\n    service {\n      teacher {\n        displayname\n      }\n    }\n    seniority\n    isPriority\n    computed\n  }\n\n  mutation DeletePriority($id: Int!) {\n    deletePriorityByPk(id: $id) {\n      id\n    }\n  }\n\n  mutation DeleteComputedPriority($id: Int!) {\n    updatePriorityByPk(\n      pkColumns: { id: $id }\n      _set: { seniority: null, isPriority: null, computed: false }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PriorityFormData on Course {\n    year\n    courseId: id\n  }\n\n  mutation UpsertPriority(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $seniority: Int\n    $isPriority: Boolean\n  ) {\n    insertPriorityOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        seniority: $seniority\n        isPriority: $isPriority\n        computed: false\n      }\n      onConflict: {\n        constraint: priority_service_id_course_id_key\n        updateColumns: [seniority, isPriority, computed]\n      }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment PriorityFormData on Course {\n    year\n    courseId: id\n  }\n\n  mutation UpsertPriority(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $seniority: Int\n    $isPriority: Boolean\n  ) {\n    insertPriorityOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        seniority: $seniority\n        isPriority: $isPriority\n        computed: false\n      }\n      onConflict: {\n        constraint: priority_service_id_course_id_key\n        updateColumns: [seniority, isPriority, computed]\n      }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestCardData on Request {\n    id\n    year\n    service {\n      id\n      teacher {\n        displayname\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hoursEffective\n    }\n    type\n    hours\n    isPriority\n  }\n\n  query GetAssignment($serviceId: Int!, $courseId: Int!) {\n    requests: request(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: ASSIGNMENT } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      id\n      hours\n    }\n  }\n\n  mutation InsertAssignment(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: ASSIGNMENT\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation UpdateAssignment($id: Int!, $hours: Float!) {\n    updateRequestByPk(pkColumns: { id: $id }, _set: { hours: $hours }) {\n      id\n    }\n  }\n\n  mutation DeleteRequestCard($id: Int!) {\n    deleteRequestByPk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment RequestCardData on Request {\n    id\n    year\n    service {\n      id\n      teacher {\n        displayname\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hoursEffective\n    }\n    type\n    hours\n    isPriority\n  }\n\n  query GetAssignment($serviceId: Int!, $courseId: Int!) {\n    requests: request(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: ASSIGNMENT } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      id\n      hours\n    }\n  }\n\n  mutation InsertAssignment(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: ASSIGNMENT\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation UpdateAssignment($id: Int!, $hours: Float!) {\n    updateRequestByPk(pkColumns: { id: $id }, _set: { hours: $hours }) {\n      id\n    }\n  }\n\n  mutation DeleteRequestCard($id: Int!) {\n    deleteRequestByPk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestFormData on Course {\n    year\n    courseId: id\n    hoursPerGroup: hoursEffective\n  }\n\n  mutation UpsertRequest(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      onConflict: {\n        constraint: request_service_id_course_id_type_key\n        updateColumns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n  ) {\n    deleteRequest(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment RequestFormData on Course {\n    year\n    courseId: id\n    hoursPerGroup: hoursEffective\n  }\n\n  mutation UpsertRequest(\n    $year: Int!\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n    $hours: Float!\n  ) {\n    insertRequestOne(\n      object: {\n        year: $year\n        serviceId: $serviceId\n        courseId: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      onConflict: {\n        constraint: request_service_id_course_id_type_key\n        updateColumns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: RequestTypeEnum!\n  ) {\n    deleteRequest(\n      where: {\n        _and: [\n          { serviceId: { _eq: $serviceId } }\n          { courseId: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetServices($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { displayname: ASC } }]\n    ) {\n      id\n      teacher {\n        displayname\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetServices($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { displayname: ASC } }]\n    ) {\n      id\n      teacher {\n        displayname\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseArchivesData on Course {\n    year\n    programId\n    trackId\n    name\n    semester\n    typeId\n  }\n\n  query GetCourseArchives(\n    $year: Int!\n    $programId: Int!\n    $trackIdComp: IntComparisonExp\n    $name: String!\n    $semester: Int!\n    $typeId: Int!\n  ) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _lt: $year } }\n          { programId: { _eq: $programId } }\n          { trackId: $trackIdComp }\n          { name: { _eq: $name } }\n          { semester: { _eq: $semester } }\n          { typeId: { _eq: $typeId } }\n        ]\n      }\n      orderBy: [{ year: DESC }]\n    ) {\n      year\n      requests(\n        where: { type: { _eq: ASSIGNMENT } }\n        orderBy: [{ service: { teacher: { displayname: ASC } } }]\n      ) {\n        id\n        ...RequestCardData\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseArchivesData on Course {\n    year\n    programId\n    trackId\n    name\n    semester\n    typeId\n  }\n\n  query GetCourseArchives(\n    $year: Int!\n    $programId: Int!\n    $trackIdComp: IntComparisonExp\n    $name: String!\n    $semester: Int!\n    $typeId: Int!\n  ) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _lt: $year } }\n          { programId: { _eq: $programId } }\n          { trackId: $trackIdComp }\n          { name: { _eq: $name } }\n          { semester: { _eq: $semester } }\n          { typeId: { _eq: $typeId } }\n        ]\n      }\n      orderBy: [{ year: DESC }]\n    ) {\n      year\n      requests(\n        where: { type: { _eq: ASSIGNMENT } }\n        orderBy: [{ service: { teacher: { displayname: ASC } } }]\n      ) {\n        id\n        ...RequestCardData\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseCoordinators on Course {\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacher {\n        displayname\n      }\n      comment\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseCoordinators on Course {\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacher {\n        displayname\n      }\n      comment\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacher {\n          displayname\n        }\n        comment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDescription on Course {\n    courseId: id\n    description\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacherId\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    updateCourseByPk(\n      pkColumns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment CourseDescription on Course {\n    courseId: id\n    description\n    coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n      teacherId\n    }\n    program {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n    track {\n      coordinations(orderBy: [{ teacher: { displayname: ASC } }]) {\n        teacherId\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    updateCourseByPk(\n      pkColumns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDetails on Course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescription\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchivesData\n  }\n"): (typeof documents)["\n  fragment CourseDetails on Course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescription\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchivesData\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseExpansion on Course {\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n    name\n    semester\n    courseType: type {\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment CourseExpansion on Course {\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n    name\n    semester\n    courseType: type {\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CoursePriorities on Course {\n    ...PriorityFormData\n\n    priorities(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      isPriority\n      ...PriorityChipData\n    }\n  }\n"): (typeof documents)["\n  fragment CoursePriorities on Course {\n    ...PriorityFormData\n\n    priorities(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      isPriority\n      ...PriorityChipData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRequests on Course {\n    ...RequestFormData\n\n    requests(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRequests on Course {\n    ...RequestFormData\n\n    requests(orderBy: [{ service: { teacher: { displayname: ASC } } }]) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServiceDetails on Service {\n    id\n    year\n    teacherId\n    hours\n    modifications(orderBy: [{ type: { label: ASC } }, { hours: ASC }]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $teacherId: Int!, $hours: Float!) {\n    updateService(\n      where: { year: { _eq: $year }, id: { _eq: $teacherId } }\n      _set: { hours: $hours }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationType(orderBy: { label: ASC }) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    insertServiceModificationOne(\n      object: {\n        serviceId: $serviceId\n        typeId: $modificationTypeId\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModificationByPk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServiceDetails on Service {\n    id\n    year\n    teacherId\n    hours\n    modifications(orderBy: [{ type: { label: ASC } }, { hours: ASC }]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $teacherId: Int!, $hours: Float!) {\n    updateService(\n      where: { year: { _eq: $year }, id: { _eq: $teacherId } }\n      _set: { hours: $hours }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationType(orderBy: { label: ASC }) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    insertServiceModificationOne(\n      object: {\n        serviceId: $serviceId\n        typeId: $modificationTypeId\n        hours: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModificationByPk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServiceMessage on Service {\n    id\n    year\n    teacherId\n    message {\n      id\n      content\n    }\n  }\n\n  mutation UpsertMessage($serviceId: Int!, $content: String!) {\n    insertMessageOne(\n      object: { serviceId: $serviceId, content: $content }\n      onConflict: {\n        constraint: message_service_id_key\n        updateColumns: [content]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteMessage($serviceId: Int!) {\n    deleteRequest(where: { serviceId: { _eq: $serviceId } }) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServiceMessage on Service {\n    id\n    year\n    teacherId\n    message {\n      id\n      content\n    }\n  }\n\n  mutation UpsertMessage($serviceId: Int!, $content: String!) {\n    insertMessageOne(\n      object: { serviceId: $serviceId, content: $content }\n      onConflict: {\n        constraint: message_service_id_key\n        updateColumns: [content]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteMessage($serviceId: Int!) {\n    deleteRequest(where: { serviceId: { _eq: $serviceId } }) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServicePriorities on Service {\n    priorities(\n      where: { isPriority: { _isNull: false } }\n      orderBy: [\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n        { course: { programId: ASC } }\n        { course: { trackId: ASC } }\n        { course: { name: ASC } }\n      ]\n    ) {\n      id\n      course {\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        name: nameDisplay\n        semester\n        type {\n          label\n        }\n      }\n      seniority\n      isPriority\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServicePriorities on Service {\n    priorities(\n      where: { isPriority: { _isNull: false } }\n      orderBy: [\n        { course: { semester: ASC } }\n        { course: { type: { label: ASC } } }\n        { course: { programId: ASC } }\n        { course: { trackId: ASC } }\n        { course: { name: ASC } }\n      ]\n    ) {\n      id\n      course {\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        name: nameDisplay\n        semester\n        type {\n          label\n        }\n      }\n      seniority\n      isPriority\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServiceRequests on Service {\n    assignment: requests(where: { type: { _eq: ASSIGNMENT } }) {\n      id\n      hoursWeighted\n    }\n    primary: requests(where: { type: { _eq: PRIMARY } }) {\n      id\n      hoursWeighted\n    }\n    secondary: requests(where: { type: { _eq: SECONDARY } }) {\n      id\n      hoursWeighted\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServiceRequests on Service {\n    assignment: requests(where: { type: { _eq: ASSIGNMENT } }) {\n      id\n      hoursWeighted\n    }\n    primary: requests(where: { type: { _eq: PRIMARY } }) {\n      id\n      hoursWeighted\n    }\n    secondary: requests(where: { type: { _eq: SECONDARY } }) {\n      id\n      hoursWeighted\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ServiceTeacher on Teacher {\n    ...TeacherTitle\n    ...TeacherCoordinations\n    coordinationIds: coordinations {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment ServiceTeacher on Teacher {\n    ...TeacherTitle\n    ...TeacherCoordinations\n    coordinationIds: coordinations {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherCoordinations on Teacher {\n    coordinations(\n      orderBy: [\n        { programId: ASC_NULLS_LAST }\n        { trackId: ASC_NULLS_LAST }\n        { courseId: ASC }\n      ]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        year\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherCoordinations on Teacher {\n    coordinations(\n      orderBy: [\n        { programId: ASC_NULLS_LAST }\n        { trackId: ASC_NULLS_LAST }\n        { courseId: ASC }\n      ]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        year\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherTitle on Teacher {\n    displayname\n    position {\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherTitle on Teacher {\n    displayname\n    position {\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAssignments($year: Int!, $where: RequestBoolExp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: ASSIGNMENT } }\n          $where\n        ]\n      }\n      orderBy: [\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { semester: ASC } }\n        { course: { name: ASC } }\n        { course: { type: { label: ASC } } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n      ]\n    ) {\n      course {\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service {\n        teacher {\n          displayname\n          email\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAssignments($year: Int!, $where: RequestBoolExp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: ASSIGNMENT } }\n          $where\n        ]\n      }\n      orderBy: [\n        { course: { program: { degree: { name: ASC } } } }\n        { course: { program: { name: ASC } } }\n        { course: { track: { name: ASC } } }\n        { course: { semester: ASC } }\n        { course: { name: ASC } }\n        { course: { type: { label: ASC } } }\n        { service: { teacher: { lastname: ASC } } }\n        { service: { teacher: { firstname: ASC } } }\n      ]\n    ) {\n      course {\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service {\n        teacher {\n          displayname\n          email\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DummyMutation {\n    dummyFunction {\n      __typename\n    }\n  }\n"): (typeof documents)["\n  mutation DummyMutation {\n    dummyFunction {\n      __typename\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hoursEffective: { _gt: 0 } }\n          { groupsEffective: { _gt: 0 } }\n        ]\n      }\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { semester: ASC }\n        { name: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetServiceRows($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { lastname: ASC } }, { teacher: { firstname: ASC } }]\n    ) {\n      ...ServiceRow\n      ...TableCoursesService\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: courseByPk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n"): (typeof documents)["\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hoursEffective: { _gt: 0 } }\n          { groupsEffective: { _gt: 0 } }\n        ]\n      }\n      orderBy: [\n        { program: { degree: { name: ASC } } }\n        { program: { name: ASC } }\n        { track: { name: ASC } }\n        { semester: ASC }\n        { name: ASC }\n        { type: { label: ASC } }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetServiceRows($year: Int!) {\n    services: service(\n      where: { year: { _eq: $year } }\n      orderBy: [{ teacher: { lastname: ASC } }, { teacher: { firstname: ASC } }]\n    ) {\n      ...ServiceRow\n      ...TableCoursesService\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: courseByPk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTeacherDetails($id: Int!) {\n    teacher: teacherByPk(id: $id) {\n      ...ServiceTeacher\n    }\n  }\n\n  query GetServiceDetails($id: Int!) {\n    service: serviceByPk(id: $id) {\n      teacher {\n        ...ServiceTeacher\n      }\n      ...TeacherServiceDetails\n      ...TeacherServiceRequests\n      ...TeacherServicePriorities\n      ...TeacherServiceMessage\n    }\n  }\n"): (typeof documents)["\n  query GetTeacherDetails($id: Int!) {\n    teacher: teacherByPk(id: $id) {\n      ...ServiceTeacher\n    }\n  }\n\n  query GetServiceDetails($id: Int!) {\n    service: serviceByPk(id: $id) {\n      teacher {\n        ...ServiceTeacher\n      }\n      ...TeacherServiceDetails\n      ...TeacherServiceRequests\n      ...TeacherServicePriorities\n      ...TeacherServiceMessage\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;