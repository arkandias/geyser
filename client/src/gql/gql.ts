/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetAppData($uid: String!) {\n    currentPhase(id: 1) {\n      value\n    }\n    years(orderBy: [VALUE_DESC]) {\n      value\n      current\n      visible\n    }\n    appSettings(orderBy: [KEY_ASC]) {\n      key\n      value\n    }\n    services(condition: { uid: $uid }) {\n      id\n      year: yearValue\n    }\n  }\n": typeof types.GetAppDataDocument,
    "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track: trackProgram {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests: requestsByYearValueAndCourseId {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesVService on VService {\n    id\n    teacher: vTeacherByUid {\n      displayname\n    }\n  }\n": typeof types.CourseRowFragmentDoc,
    "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications: serviceModifications {\n      hours\n    }\n    requests: requestsByYearValueAndServiceId {\n      type\n      hoursWeighted\n    }\n    message\n  }\n": typeof types.ServiceRowFragmentDoc,
    "\n  fragment TeacherServiceDetails on Service {\n    id\n    uid\n    yearValue\n    hours\n    modifications: serviceModifications(orderBy: [TYPE_ID_ASC, HOURS_ASC]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $uid: String!, $hours: Float!) {\n    updateServiceByYearValueAndUid(\n      input: { yearValue: $year, uid: $uid, patch: { hours: $hours } }\n    ) {\n      service {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationTypes(orderBy: [LABEL_ASC]) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    createServiceModification(\n      input: {\n        serviceModification: {\n          serviceId: $serviceId\n          typeId: $modificationTypeId\n          hours: $hours\n        }\n      }\n    ) {\n      serviceModification {\n        id\n      }\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModification(input: { id: $id }) {\n      serviceModification {\n        id\n      }\n    }\n  }\n": typeof types.TeacherServiceDetailsFragmentDoc,
    "\n  fragment TeacherServiceMessage on Service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    updateService(input: { id: $serviceId, patch: { message: $message } }) {\n      service {\n        id\n      }\n    }\n  }\n": typeof types.TeacherServiceMessageFragmentDoc,
    "\n  fragment TeacherCoordinations on Teacher {\n    coordinations: coordinationsByUid(\n      orderBy: [PROGRAM_ID_ASC, TRACK_ID_ASC, COURSE_ID_ASC]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        yearValue\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n": typeof types.TeacherCoordinationsFragmentDoc,
    "\n  query GetRequests($condition: RequestCondition = {}) {\n    requests: requests(condition: $condition) {\n      course: courseByYearValueAndCourseId {\n        id\n        name: nameDisplay\n        program {\n          id\n          name: nameDisplay\n          degree {\n            id\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          id\n          name: nameDisplay\n          program {\n            id\n            name: nameDisplay\n            degree {\n              id\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service: vServiceByServiceId {\n        teacher: vTeacherByUid {\n          uid\n          firstname\n          lastname\n          displayname\n        }\n      }\n    }\n  }\n": typeof types.GetRequestsDocument,
    "\n  mutation DummyMutation {\n    dummyMutation(input: {}) {\n      clientMutationId\n    }\n  }\n": typeof types.DummyMutationDocument,
};
const documents: Documents = {
    "\n  query GetAppData($uid: String!) {\n    currentPhase(id: 1) {\n      value\n    }\n    years(orderBy: [VALUE_DESC]) {\n      value\n      current\n      visible\n    }\n    appSettings(orderBy: [KEY_ASC]) {\n      key\n      value\n    }\n    services(condition: { uid: $uid }) {\n      id\n      year: yearValue\n    }\n  }\n": types.GetAppDataDocument,
    "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track: trackProgram {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests: requestsByYearValueAndCourseId {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesVService on VService {\n    id\n    teacher: vTeacherByUid {\n      displayname\n    }\n  }\n": types.CourseRowFragmentDoc,
    "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications: serviceModifications {\n      hours\n    }\n    requests: requestsByYearValueAndServiceId {\n      type\n      hoursWeighted\n    }\n    message\n  }\n": types.ServiceRowFragmentDoc,
    "\n  fragment TeacherServiceDetails on Service {\n    id\n    uid\n    yearValue\n    hours\n    modifications: serviceModifications(orderBy: [TYPE_ID_ASC, HOURS_ASC]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $uid: String!, $hours: Float!) {\n    updateServiceByYearValueAndUid(\n      input: { yearValue: $year, uid: $uid, patch: { hours: $hours } }\n    ) {\n      service {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationTypes(orderBy: [LABEL_ASC]) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    createServiceModification(\n      input: {\n        serviceModification: {\n          serviceId: $serviceId\n          typeId: $modificationTypeId\n          hours: $hours\n        }\n      }\n    ) {\n      serviceModification {\n        id\n      }\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModification(input: { id: $id }) {\n      serviceModification {\n        id\n      }\n    }\n  }\n": types.TeacherServiceDetailsFragmentDoc,
    "\n  fragment TeacherServiceMessage on Service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    updateService(input: { id: $serviceId, patch: { message: $message } }) {\n      service {\n        id\n      }\n    }\n  }\n": types.TeacherServiceMessageFragmentDoc,
    "\n  fragment TeacherCoordinations on Teacher {\n    coordinations: coordinationsByUid(\n      orderBy: [PROGRAM_ID_ASC, TRACK_ID_ASC, COURSE_ID_ASC]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        yearValue\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n": types.TeacherCoordinationsFragmentDoc,
    "\n  query GetRequests($condition: RequestCondition = {}) {\n    requests: requests(condition: $condition) {\n      course: courseByYearValueAndCourseId {\n        id\n        name: nameDisplay\n        program {\n          id\n          name: nameDisplay\n          degree {\n            id\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          id\n          name: nameDisplay\n          program {\n            id\n            name: nameDisplay\n            degree {\n              id\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service: vServiceByServiceId {\n        teacher: vTeacherByUid {\n          uid\n          firstname\n          lastname\n          displayname\n        }\n      }\n    }\n  }\n": types.GetRequestsDocument,
    "\n  mutation DummyMutation {\n    dummyMutation(input: {}) {\n      clientMutationId\n    }\n  }\n": types.DummyMutationDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAppData($uid: String!) {\n    currentPhase(id: 1) {\n      value\n    }\n    years(orderBy: [VALUE_DESC]) {\n      value\n      current\n      visible\n    }\n    appSettings(orderBy: [KEY_ASC]) {\n      key\n      value\n    }\n    services(condition: { uid: $uid }) {\n      id\n      year: yearValue\n    }\n  }\n"): (typeof documents)["\n  query GetAppData($uid: String!) {\n    currentPhase(id: 1) {\n      value\n    }\n    years(orderBy: [VALUE_DESC]) {\n      value\n      current\n      visible\n    }\n    appSettings(orderBy: [KEY_ASC]) {\n      key\n      value\n    }\n    services(condition: { uid: $uid }) {\n      id\n      year: yearValue\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track: trackProgram {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests: requestsByYearValueAndCourseId {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesVService on VService {\n    id\n    teacher: vTeacherByUid {\n      displayname\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRow on Course {\n    id\n    name: nameDisplay\n    visible\n    program {\n      degree {\n        name: nameDisplay\n        visible\n      }\n      id\n      name: nameDisplay\n      visible\n    }\n    track: trackProgram {\n      name: nameDisplay\n      visible\n    }\n    semester\n    type {\n      label\n      coefficient\n    }\n    hoursPerGroup: hoursEffective\n    numberOfGroups: groupsEffective\n    requests: requestsByYearValueAndCourseId {\n      serviceId\n      type\n      hours\n      isPriority\n    }\n  }\n\n  fragment TableCoursesVService on VService {\n    id\n    teacher: vTeacherByUid {\n      displayname\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications: serviceModifications {\n      hours\n    }\n    requests: requestsByYearValueAndServiceId {\n      type\n      hoursWeighted\n    }\n    message\n  }\n"): (typeof documents)["\n  fragment ServiceRow on Service {\n    id\n    teacher {\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    modifications: serviceModifications {\n      hours\n    }\n    requests: requestsByYearValueAndServiceId {\n      type\n      hoursWeighted\n    }\n    message\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServiceDetails on Service {\n    id\n    uid\n    yearValue\n    hours\n    modifications: serviceModifications(orderBy: [TYPE_ID_ASC, HOURS_ASC]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $uid: String!, $hours: Float!) {\n    updateServiceByYearValueAndUid(\n      input: { yearValue: $year, uid: $uid, patch: { hours: $hours } }\n    ) {\n      service {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationTypes(orderBy: [LABEL_ASC]) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    createServiceModification(\n      input: {\n        serviceModification: {\n          serviceId: $serviceId\n          typeId: $modificationTypeId\n          hours: $hours\n        }\n      }\n    ) {\n      serviceModification {\n        id\n      }\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModification(input: { id: $id }) {\n      serviceModification {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServiceDetails on Service {\n    id\n    uid\n    yearValue\n    hours\n    modifications: serviceModifications(orderBy: [TYPE_ID_ASC, HOURS_ASC]) {\n      id\n      modificationType: type {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpdateService($year: Int!, $uid: String!, $hours: Float!) {\n    updateServiceByYearValueAndUid(\n      input: { yearValue: $year, uid: $uid, patch: { hours: $hours } }\n    ) {\n      service {\n        id\n      }\n    }\n  }\n\n  query GetModificationTypes {\n    modificationTypes: serviceModificationTypes(orderBy: [LABEL_ASC]) {\n      id\n      label\n      description\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationTypeId: Int!\n    $hours: Float!\n  ) {\n    createServiceModification(\n      input: {\n        serviceModification: {\n          serviceId: $serviceId\n          typeId: $modificationTypeId\n          hours: $hours\n        }\n      }\n    ) {\n      serviceModification {\n        id\n      }\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    deleteServiceModification(input: { id: $id }) {\n      serviceModification {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherServiceMessage on Service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    updateService(input: { id: $serviceId, patch: { message: $message } }) {\n      service {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherServiceMessage on Service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    updateService(input: { id: $serviceId, patch: { message: $message } }) {\n      service {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherCoordinations on Teacher {\n    coordinations: coordinationsByUid(\n      orderBy: [PROGRAM_ID_ASC, TRACK_ID_ASC, COURSE_ID_ASC]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        yearValue\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherCoordinations on Teacher {\n    coordinations: coordinationsByUid(\n      orderBy: [PROGRAM_ID_ASC, TRACK_ID_ASC, COURSE_ID_ASC]\n    ) {\n      id\n      program {\n        id\n        name: nameDisplay\n        degree {\n          name: nameDisplay\n        }\n      }\n      track {\n        id\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n      }\n      course {\n        id\n        yearValue\n        name: nameDisplay\n        program {\n          name: nameDisplay\n          degree {\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          name: nameDisplay\n          program {\n            name: nameDisplay\n            degree {\n              name: nameDisplay\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRequests($condition: RequestCondition = {}) {\n    requests: requests(condition: $condition) {\n      course: courseByYearValueAndCourseId {\n        id\n        name: nameDisplay\n        program {\n          id\n          name: nameDisplay\n          degree {\n            id\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          id\n          name: nameDisplay\n          program {\n            id\n            name: nameDisplay\n            degree {\n              id\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service: vServiceByServiceId {\n        teacher: vTeacherByUid {\n          uid\n          firstname\n          lastname\n          displayname\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRequests($condition: RequestCondition = {}) {\n    requests: requests(condition: $condition) {\n      course: courseByYearValueAndCourseId {\n        id\n        name: nameDisplay\n        program {\n          id\n          name: nameDisplay\n          degree {\n            id\n            name: nameDisplay\n          }\n        }\n        track: trackProgram {\n          id\n          name: nameDisplay\n          program {\n            id\n            name: nameDisplay\n            degree {\n              id\n              name: nameDisplay\n            }\n          }\n        }\n        semester\n        type {\n          label\n        }\n      }\n      service: vServiceByServiceId {\n        teacher: vTeacherByUid {\n          uid\n          firstname\n          lastname\n          displayname\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DummyMutation {\n    dummyMutation(input: {}) {\n      clientMutationId\n    }\n  }\n"): (typeof documents)["\n  mutation DummyMutation {\n    dummyMutation(input: {}) {\n      clientMutationId\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;