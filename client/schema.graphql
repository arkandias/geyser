"""All input for the `addTimestampColumns` mutation."""
input AddTimestampColumnsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pTable: String
}

"""The output of our `addTimestampColumns` mutation."""
type AddTimestampColumnsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addTimestampColumnsToAllTables` mutation."""
input AddTimestampColumnsToAllTablesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `addTimestampColumnsToAllTables` mutation."""
type AddTimestampColumnsToAllTablesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Application settings (e.g., custom UI parameters)"""
type AppSetting implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Text identifier"""
  key: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Text content"""
  value: String
}

"""
A condition to be used against `AppSetting` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AppSettingCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `key` field."""
  key: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `AppSetting`"""
input AppSettingInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Text identifier"""
  key: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Text content"""
  value: String
}

"""
Represents an update to a `AppSetting`. Fields that are set will be updated.
"""
input AppSettingPatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Text identifier"""
  key: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Text content"""
  value: String
}

"""Methods to use when ordering `AppSetting`."""
enum AppSettingsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  KEY_ASC
  KEY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VALUE_ASC
  VALUE_DESC
}

"""All input for the `computeServicePriorities` mutation."""
input ComputeServicePrioritiesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  serviceRow: ServiceInput
}

"""The output of our `computeServicePriorities` mutation."""
type ComputeServicePrioritiesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  priorities: [Priority]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `computeYearPriorities` mutation."""
input ComputeYearPrioritiesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pYear: Int
}

"""The output of our `computeYearPriorities` mutation."""
type ComputeYearPrioritiesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  priorities: [Priority]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Academic coordination assignments at program, track, or course level"""
type Coordination implements Node {
  """Additional coordination details"""
  comment: String

  """Reads a single `Course` that is related to this `Coordination`."""
  course: Course

  """
  Course being coordinated (mutually exclusive with program_id and track_id)
  """
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Unique coordination identifier"""
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Program` that is related to this `Coordination`."""
  program: Program

  """
  Program being coordinated (mutually exclusive with track_id and course_id)
  """
  programId: Int

  """Reads a single `Teacher` that is related to this `Coordination`."""
  teacher: Teacher!

  """Reads a single `Track` that is related to this `Coordination`."""
  track: Track

  """
  Track being coordinated (mutually exclusive with program_id and course_id)
  """
  trackId: Int

  """Coordinating teacher"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `Coordination` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CoordinationCondition {
  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `programId` field."""
  programId: Int

  """Checks for equality with the object’s `trackId` field."""
  trackId: Int

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Coordination`"""
input CoordinationInput {
  """Additional coordination details"""
  comment: String

  """
  Course being coordinated (mutually exclusive with program_id and track_id)
  """
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Program being coordinated (mutually exclusive with track_id and course_id)
  """
  programId: Int

  """
  Track being coordinated (mutually exclusive with program_id and course_id)
  """
  trackId: Int

  """Coordinating teacher"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""
Represents an update to a `Coordination`. Fields that are set will be updated.
"""
input CoordinationPatch {
  """Additional coordination details"""
  comment: String

  """
  Course being coordinated (mutually exclusive with program_id and track_id)
  """
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Program being coordinated (mutually exclusive with track_id and course_id)
  """
  programId: Int

  """
  Track being coordinated (mutually exclusive with program_id and course_id)
  """
  trackId: Int

  """Coordinating teacher"""
  uid: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Methods to use when ordering `Coordination`."""
enum CoordinationsOrderBy {
  COMMENT_ASC
  COMMENT_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROGRAM_ID_ASC
  PROGRAM_ID_DESC
  TRACK_ID_ASC
  TRACK_ID_DESC
  UID_ASC
  UID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `copyYearCourses` mutation."""
input CopyYearCoursesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pYear: Int
}

"""The output of our `copyYearCourses` mutation."""
type CopyYearCoursesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  courses: [Course]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Detailed course definitions and configurations"""
type Course implements Node {
  """Reads and enables pagination through a set of `Coordination`."""
  coordinations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoordinationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Coordination`."""
    orderBy: [CoordinationsOrderBy!]
  ): [Coordination!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Computed study year (1-3) based on semester"""
  cycleYear: Int!

  """Course description"""
  description: String

  """Standard number of student groups"""
  groups: Int!

  """Modified number of groups if different from standard"""
  groupsAdjusted: Int

  """Actual number of groups used, defaulting to standard if no adjustment"""
  groupsEffective: Int

  """Standard teaching hours per group"""
  hours: Float!

  """Modified teaching hours per group if different from standard"""
  hoursAdjusted: Float

  """Actual teaching hours used, defaulting to standard if no adjustment"""
  hoursEffective: Int

  """Unique course identifier"""
  id: Int!

  """Full course name"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated course name"""
  nameShort: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Priority`."""
  prioritiesByYearValueAndCourseId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PriorityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Priority`."""
    orderBy: [PrioritiesOrderBy!]
  ): [Priority!]!

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Reads a single `Program` that is related to this `Course`."""
  program: Program!

  """Program offering this course"""
  programId: Int!

  """Reads and enables pagination through a set of `Request`."""
  requestsByYearValueAndCourseId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!]
  ): [Request!]!

  """Academic semester (1-6)"""
  semester: Int!

  """Optional track specialization for this course"""
  trackId: Int

  """Reads a single `Track` that is related to this `Course`."""
  trackProgram: Track

  """Reads a single `CourseType` that is related to this `Course`."""
  type: CourseType!

  """Reference to course delivery type affecting workload calculation"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Controls course visibility in the user interface and queries"""
  visible: Boolean!

  """Reads a single `Year` that is related to this `Course`."""
  year: Year!

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""
A condition to be used against `Course` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CourseCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `cycleYear` field."""
  cycleYear: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `groups` field."""
  groups: Int

  """Checks for equality with the object’s `groupsAdjusted` field."""
  groupsAdjusted: Int

  """Checks for equality with the object’s `groupsEffective` field."""
  groupsEffective: Int

  """Checks for equality with the object’s `hours` field."""
  hours: Float

  """Checks for equality with the object’s `hoursAdjusted` field."""
  hoursAdjusted: Float

  """Checks for equality with the object’s `hoursEffective` field."""
  hoursEffective: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nameDisplay` field."""
  nameDisplay: String

  """Checks for equality with the object’s `nameShort` field."""
  nameShort: String

  """Checks for equality with the object’s `priorityRule` field."""
  priorityRule: Int

  """Checks for equality with the object’s `programId` field."""
  programId: Int

  """Checks for equality with the object’s `semester` field."""
  semester: Int

  """Checks for equality with the object’s `trackId` field."""
  trackId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean

  """Checks for equality with the object’s `yearValue` field."""
  yearValue: Int
}

"""An input for mutations affecting `Course`"""
input CourseInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Course description"""
  description: String

  """Standard number of student groups"""
  groups: Int!

  """Modified number of groups if different from standard"""
  groupsAdjusted: Int

  """Actual number of groups used, defaulting to standard if no adjustment"""
  groupsEffective: Int

  """Standard teaching hours per group"""
  hours: Float!

  """Modified teaching hours per group if different from standard"""
  hoursAdjusted: Float

  """Actual teaching hours used, defaulting to standard if no adjustment"""
  hoursEffective: Int

  """Full course name"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated course name"""
  nameShort: String

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program offering this course"""
  programId: Int!

  """Academic semester (1-6)"""
  semester: Int!

  """Optional track specialization for this course"""
  trackId: Int

  """Reference to course delivery type affecting workload calculation"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls course visibility in the user interface and queries"""
  visible: Boolean

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""
Represents an update to a `Course`. Fields that are set will be updated.
"""
input CoursePatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Course description"""
  description: String

  """Standard number of student groups"""
  groups: Int

  """Modified number of groups if different from standard"""
  groupsAdjusted: Int

  """Actual number of groups used, defaulting to standard if no adjustment"""
  groupsEffective: Int

  """Standard teaching hours per group"""
  hours: Float

  """Modified teaching hours per group if different from standard"""
  hoursAdjusted: Float

  """Actual teaching hours used, defaulting to standard if no adjustment"""
  hoursEffective: Int

  """Full course name"""
  name: String

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated course name"""
  nameShort: String

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program offering this course"""
  programId: Int

  """Academic semester (1-6)"""
  semester: Int

  """Optional track specialization for this course"""
  trackId: Int

  """Reference to course delivery type affecting workload calculation"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls course visibility in the user interface and queries"""
  visible: Boolean

  """Academic year when the course is offered"""
  yearValue: Int
}

"""Types of course delivery with associated workload coefficients"""
type CourseType implements Node {
  """Workload multiplier for service hour calculations"""
  coefficient: Float!

  """Reads and enables pagination through a set of `Course`."""
  coursesByTypeId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!]
  ): [Course!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Description of the course type and its characteristics"""
  description: String

  """Unique course type identifier"""
  id: Int!

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `CourseType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CourseTypeCondition {
  """Checks for equality with the object’s `coefficient` field."""
  coefficient: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `CourseType`"""
input CourseTypeInput {
  """Workload multiplier for service hour calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Description of the course type and its characteristics"""
  description: String

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""
Represents an update to a `CourseType`. Fields that are set will be updated.
"""
input CourseTypePatch {
  """Workload multiplier for service hour calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Description of the course type and its characteristics"""
  description: String

  """Human-readable type name for display purposes, unique"""
  label: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Methods to use when ordering `CourseType`."""
enum CourseTypesOrderBy {
  COEFFICIENT_ASC
  COEFFICIENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Course`."""
enum CoursesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CYCLE_YEAR_ASC
  CYCLE_YEAR_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GROUPS_ADJUSTED_ASC
  GROUPS_ADJUSTED_DESC
  GROUPS_ASC
  GROUPS_DESC
  GROUPS_EFFECTIVE_ASC
  GROUPS_EFFECTIVE_DESC
  HOURS_ADJUSTED_ASC
  HOURS_ADJUSTED_DESC
  HOURS_ASC
  HOURS_DESC
  HOURS_EFFECTIVE_ASC
  HOURS_EFFECTIVE_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NAME_DISPLAY_ASC
  NAME_DISPLAY_DESC
  NAME_SHORT_ASC
  NAME_SHORT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRIORITY_RULE_ASC
  PRIORITY_RULE_DESC
  PROGRAM_ID_ASC
  PROGRAM_ID_DESC
  SEMESTER_ASC
  SEMESTER_DESC
  TRACK_ID_ASC
  TRACK_ID_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
  YEAR_VALUE_ASC
  YEAR_VALUE_DESC
}

"""All input for the create `AppSetting` mutation."""
input CreateAppSettingInput {
  """The `AppSetting` to be created by this mutation."""
  appSetting: AppSettingInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AppSetting` mutation."""
type CreateAppSettingPayload {
  """The `AppSetting` that was created by this mutation."""
  appSetting: AppSetting

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Coordination` mutation."""
input CreateCoordinationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Coordination` to be created by this mutation."""
  coordination: CoordinationInput!
}

"""The output of our create `Coordination` mutation."""
type CreateCoordinationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Coordination` that was created by this mutation."""
  coordination: Coordination

  """Reads a single `Course` that is related to this `Coordination`."""
  course: Course

  """Reads a single `Program` that is related to this `Coordination`."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Teacher` that is related to this `Coordination`."""
  teacher: Teacher!

  """Reads a single `Track` that is related to this `Coordination`."""
  track: Track
}

"""All input for the create `Course` mutation."""
input CreateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Course` to be created by this mutation."""
  course: CourseInput!
}

"""The output of our create `Course` mutation."""
type CreateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was created by this mutation."""
  course: Course

  """Reads a single `Program` that is related to this `Course`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Track` that is related to this `Course`."""
  trackProgram: Track

  """Reads a single `CourseType` that is related to this `Course`."""
  type: CourseType!

  """Reads a single `Year` that is related to this `Course`."""
  year: Year!
}

"""All input for the create `CourseType` mutation."""
input CreateCourseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CourseType` to be created by this mutation."""
  courseType: CourseTypeInput!
}

"""The output of our create `CourseType` mutation."""
type CreateCourseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseType` that was created by this mutation."""
  courseType: CourseType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CurrentPhase` mutation."""
input CreateCurrentPhaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CurrentPhase` to be created by this mutation."""
  currentPhase: CurrentPhaseInput!
}

"""The output of our create `CurrentPhase` mutation."""
type CreateCurrentPhasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentPhase` that was created by this mutation."""
  currentPhase: CurrentPhase

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Degree` mutation."""
input CreateDegreeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Degree` to be created by this mutation."""
  degree: DegreeInput!
}

"""The output of our create `Degree` mutation."""
type CreateDegreePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Degree` that was created by this mutation."""
  degree: Degree

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Position` mutation."""
input CreatePositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Position` to be created by this mutation."""
  position: PositionInput!
}

"""The output of our create `Position` mutation."""
type CreatePositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Position` that was created by this mutation."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Priority` mutation."""
input CreatePriorityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Priority` to be created by this mutation."""
  priority: PriorityInput!
}

"""The output of our create `Priority` mutation."""
type CreatePriorityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Priority`."""
  courseByYearValueAndCourseId: Course!

  """The `Priority` that was created by this mutation."""
  priority: Priority

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `Priority`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `Year` that is related to this `Priority`."""
  year: Year!
}

"""All input for the create `Program` mutation."""
input CreateProgramInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Program` to be created by this mutation."""
  program: ProgramInput!
}

"""The output of our create `Program` mutation."""
type CreateProgramPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Degree` that is related to this `Program`."""
  degree: Degree!

  """The `Program` that was created by this mutation."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Request` mutation."""
input CreateRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Request` to be created by this mutation."""
  request: RequestInput!
}

"""The output of our create `Request` mutation."""
type CreateRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Request`."""
  courseByYearValueAndCourseId: Course!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Request` that was created by this mutation."""
  request: Request

  """Reads a single `Service` that is related to this `Request`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `VService` that is related to this `Request`."""
  vServiceByServiceId: VService!

  """Reads a single `Year` that is related to this `Request`."""
  year: Year!
}

"""All input for the create `Role` mutation."""
input CreateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Role` to be created by this mutation."""
  role: RoleInput!
}

"""The output of our create `Role` mutation."""
type CreateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was created by this mutation."""
  role: Role

  """Reads a single `Teacher` that is related to this `Role`."""
  teacher: Teacher!
}

"""All input for the create `Service` mutation."""
input CreateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Service` to be created by this mutation."""
  service: ServiceInput!
}

"""All input for the create `ServiceModification` mutation."""
input CreateServiceModificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ServiceModification` to be created by this mutation."""
  serviceModification: ServiceModificationInput!
}

"""The output of our create `ServiceModification` mutation."""
type CreateServiceModificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Service` that is related to this `ServiceModification`.
  """
  service: Service!

  """The `ServiceModification` that was created by this mutation."""
  serviceModification: ServiceModification

  """
  Reads a single `ServiceModificationType` that is related to this `ServiceModification`.
  """
  type: ServiceModificationType!
}

"""All input for the create `ServiceModificationType` mutation."""
input CreateServiceModificationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ServiceModificationType` to be created by this mutation."""
  serviceModificationType: ServiceModificationTypeInput!
}

"""The output of our create `ServiceModificationType` mutation."""
type CreateServiceModificationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ServiceModificationType` that was created by this mutation."""
  serviceModificationType: ServiceModificationType
}

"""The output of our create `Service` mutation."""
type CreateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Service` that was created by this mutation."""
  service: Service

  """Reads a single `Teacher` that is related to this `Service`."""
  teacher: Teacher!

  """Reads a single `Year` that is related to this `Service`."""
  year: Year!
}

"""All input for the create `Teacher` mutation."""
input CreateTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Teacher` to be created by this mutation."""
  teacher: TeacherInput!
}

"""The output of our create `Teacher` mutation."""
type CreateTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Position` that is related to this `Teacher`."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Teacher` that was created by this mutation."""
  teacher: Teacher
}

"""All input for the `createTeacherService` mutation."""
input CreateTeacherServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pUid: String
  pYear: Int
}

"""The output of our `createTeacherService` mutation."""
type CreateTeacherServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  services: [Service]
}

"""All input for the create `Track` mutation."""
input CreateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Track` to be created by this mutation."""
  track: TrackInput!
}

"""The output of our create `Track` mutation."""
type CreateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Program` that is related to this `Track`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was created by this mutation."""
  track: Track
}

"""All input for the create `VService` mutation."""
input CreateVServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VService` to be created by this mutation."""
  vService: VServiceInput!
}

"""The output of our create `VService` mutation."""
type CreateVServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VService` that was created by this mutation."""
  vService: VService

  """Reads a single `VTeacher` that is related to this `VService`."""
  vTeacherByUid: VTeacher!

  """Reads a single `Year` that is related to this `VService`."""
  year: Year!
}

"""All input for the create `VTeacher` mutation."""
input CreateVTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `VTeacher` to be created by this mutation."""
  vTeacher: VTeacherInput!
}

"""The output of our create `VTeacher` mutation."""
type CreateVTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `VTeacher` that was created by this mutation."""
  vTeacher: VTeacher
}

"""All input for the create `Year` mutation."""
input CreateYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Year` to be created by this mutation."""
  year: YearInput!
}

"""The output of our create `Year` mutation."""
type CreateYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Year` that was created by this mutation."""
  year: Year
}

"""All input for the `createYearServices` mutation."""
input CreateYearServicesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  pYear: Int
}

"""The output of our `createYearServices` mutation."""
type CreateYearServicesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  services: [Service]
}

"""Singleton table that stores the active system phase reference"""
type CurrentPhase implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Primary key with constraint to ensure only one record exists"""
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Reference to the currently active phase identifier"""
  value: Phase
}

"""
A condition to be used against `CurrentPhase` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CurrentPhaseCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `value` field."""
  value: Phase
}

"""An input for mutations affecting `CurrentPhase`"""
input CurrentPhaseInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Primary key with constraint to ensure only one record exists"""
  id: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Reference to the currently active phase identifier"""
  value: Phase
}

"""
Represents an update to a `CurrentPhase`. Fields that are set will be updated.
"""
input CurrentPhasePatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Primary key with constraint to ensure only one record exists"""
  id: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Reference to the currently active phase identifier"""
  value: Phase
}

"""Methods to use when ordering `CurrentPhase`."""
enum CurrentPhasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VALUE_ASC
  VALUE_DESC
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
to unexpected results.
"""
scalar Datetime

"""Academic degrees offered by the institution"""
type Degree implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Unique degree identifier"""
  id: Int!

  """Full degree name, unique (e.g., Bachelor of Science)"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated degree name (e.g., BSc)"""
  nameShort: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Program`."""
  programs(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Program`."""
    orderBy: [ProgramsOrderBy!]
  ): [Program!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Controls degree visibility in the user interface and queries"""
  visible: Boolean!
}

"""
A condition to be used against `Degree` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DegreeCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nameDisplay` field."""
  nameDisplay: String

  """Checks for equality with the object’s `nameShort` field."""
  nameShort: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `Degree`"""
input DegreeInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Full degree name, unique (e.g., Bachelor of Science)"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated degree name (e.g., BSc)"""
  nameShort: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls degree visibility in the user interface and queries"""
  visible: Boolean
}

"""
Represents an update to a `Degree`. Fields that are set will be updated.
"""
input DegreePatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Full degree name, unique (e.g., Bachelor of Science)"""
  name: String

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated degree name (e.g., BSc)"""
  nameShort: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls degree visibility in the user interface and queries"""
  visible: Boolean
}

"""Methods to use when ordering `Degree`."""
enum DegreesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NAME_DISPLAY_ASC
  NAME_DISPLAY_DESC
  NAME_SHORT_ASC
  NAME_SHORT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}

"""All input for the `deleteAppSettingByNodeId` mutation."""
input DeleteAppSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppSetting` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteAppSetting` mutation."""
input DeleteAppSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Text identifier"""
  key: String!
}

"""The output of our delete `AppSetting` mutation."""
type DeleteAppSettingPayload {
  """The `AppSetting` that was deleted by this mutation."""
  appSetting: AppSetting

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAppSettingNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCoordinationByNodeId` mutation."""
input DeleteCoordinationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Coordination` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCoordinationByUidAndCourseIdAndTrackIdAndProgramId` mutation.
"""
input DeleteCoordinationByUidAndCourseIdAndTrackIdAndProgramIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Course being coordinated (mutually exclusive with program_id and track_id)
  """
  courseId: Int!

  """
  Program being coordinated (mutually exclusive with track_id and course_id)
  """
  programId: Int!

  """
  Track being coordinated (mutually exclusive with program_id and course_id)
  """
  trackId: Int!

  """Coordinating teacher"""
  uid: String!
}

"""All input for the `deleteCoordination` mutation."""
input DeleteCoordinationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique coordination identifier"""
  id: Int!
}

"""The output of our delete `Coordination` mutation."""
type DeleteCoordinationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Coordination` that was deleted by this mutation."""
  coordination: Coordination

  """Reads a single `Course` that is related to this `Coordination`."""
  course: Course
  deletedCoordinationNodeId: ID

  """Reads a single `Program` that is related to this `Coordination`."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Teacher` that is related to this `Coordination`."""
  teacher: Teacher!

  """Reads a single `Track` that is related to this `Coordination`."""
  track: Track
}

"""All input for the `deleteCourseByIdAndYearValue` mutation."""
input DeleteCourseByIdAndYearValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course identifier"""
  id: Int!

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""All input for the `deleteCourseByNodeId` mutation."""
input DeleteCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeId` mutation.
"""
input DeleteCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Full course name"""
  name: String!

  """Program offering this course"""
  programId: Int!

  """Academic semester (1-6)"""
  semester: Int!

  """Optional track specialization for this course"""
  trackId: Int!

  """Reference to course delivery type affecting workload calculation"""
  typeId: Int!

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""All input for the `deleteCourse` mutation."""
input DeleteCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course identifier"""
  id: Int!
}

"""The output of our delete `Course` mutation."""
type DeleteCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was deleted by this mutation."""
  course: Course
  deletedCourseNodeId: ID

  """Reads a single `Program` that is related to this `Course`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Track` that is related to this `Course`."""
  trackProgram: Track

  """Reads a single `CourseType` that is related to this `Course`."""
  type: CourseType!

  """Reads a single `Year` that is related to this `Course`."""
  year: Year!
}

"""All input for the `deleteCourseTypeByLabel` mutation."""
input DeleteCourseTypeByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable type name for display purposes, unique"""
  label: String!
}

"""All input for the `deleteCourseTypeByNodeId` mutation."""
input DeleteCourseTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCourseType` mutation."""
input DeleteCourseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course type identifier"""
  id: Int!
}

"""The output of our delete `CourseType` mutation."""
type DeleteCourseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseType` that was deleted by this mutation."""
  courseType: CourseType
  deletedCourseTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCurrentPhaseByNodeId` mutation."""
input DeleteCurrentPhaseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CurrentPhase` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCurrentPhase` mutation."""
input DeleteCurrentPhaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key with constraint to ensure only one record exists"""
  id: Int!
}

"""The output of our delete `CurrentPhase` mutation."""
type DeleteCurrentPhasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentPhase` that was deleted by this mutation."""
  currentPhase: CurrentPhase
  deletedCurrentPhaseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDegreeByName` mutation."""
input DeleteDegreeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Full degree name, unique (e.g., Bachelor of Science)"""
  name: String!
}

"""All input for the `deleteDegreeByNodeId` mutation."""
input DeleteDegreeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Degree` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDegree` mutation."""
input DeleteDegreeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique degree identifier"""
  id: Int!
}

"""The output of our delete `Degree` mutation."""
type DeleteDegreePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Degree` that was deleted by this mutation."""
  degree: Degree
  deletedDegreeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePositionByLabel` mutation."""
input DeletePositionByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable position name for display purposes, unique"""
  label: String!
}

"""All input for the `deletePositionByNodeId` mutation."""
input DeletePositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Position` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePosition` mutation."""
input DeletePositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique position identifier"""
  id: Int!
}

"""The output of our delete `Position` mutation."""
type DeletePositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPositionNodeId: ID

  """The `Position` that was deleted by this mutation."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePriorityByNodeId` mutation."""
input DeletePriorityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Priority` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePriorityByServiceIdAndCourseId` mutation."""
input DeletePriorityByServiceIdAndCourseIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Course for which priority is tracked"""
  courseId: Int!

  """Associated teacher service record"""
  serviceId: Int!
}

"""All input for the `deletePriority` mutation."""
input DeletePriorityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique priority record identifier"""
  id: Int!
}

"""The output of our delete `Priority` mutation."""
type DeletePriorityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Priority`."""
  courseByYearValueAndCourseId: Course!
  deletedPriorityNodeId: ID

  """The `Priority` that was deleted by this mutation."""
  priority: Priority

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `Priority`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `Year` that is related to this `Priority`."""
  year: Year!
}

"""All input for the `deleteProgramByDegreeIdAndName` mutation."""
input DeleteProgramByDegreeIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Parent degree for this program"""
  degreeId: Int!

  """Full program name, unique within its degree (e.g., Mathematics)"""
  name: String!
}

"""All input for the `deleteProgramByNodeId` mutation."""
input DeleteProgramByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Program` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProgram` mutation."""
input DeleteProgramInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique program identifier"""
  id: Int!
}

"""The output of our delete `Program` mutation."""
type DeleteProgramPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Degree` that is related to this `Program`."""
  degree: Degree!
  deletedProgramNodeId: ID

  """The `Program` that was deleted by this mutation."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRequestByNodeId` mutation."""
input DeleteRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Request` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRequestByServiceIdAndCourseIdAndType` mutation.
"""
input DeleteRequestByServiceIdAndCourseIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Requested or assigned course"""
  courseId: Int!
  serviceId: Int!

  """Type of request (primary choice, backup, or final assignment)"""
  type: RequestType!
}

"""All input for the `deleteRequest` mutation."""
input DeleteRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique request identifier"""
  id: Int!
}

"""The output of our delete `Request` mutation."""
type DeleteRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Request`."""
  courseByYearValueAndCourseId: Course!
  deletedRequestNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Request` that was deleted by this mutation."""
  request: Request

  """Reads a single `Service` that is related to this `Request`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `VService` that is related to this `Request`."""
  vServiceByServiceId: VService!

  """Reads a single `Year` that is related to this `Request`."""
  year: Year!
}

"""All input for the `deleteRoleByNodeId` mutation."""
input DeleteRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteRoleByUidAndType` mutation."""
input DeleteRoleByUidAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Type of privileged role"""
  type: RoleType!

  """Teacher identifier with role access"""
  uid: String!
}

"""All input for the `deleteRole` mutation."""
input DeleteRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique role assignment identifier"""
  id: Int!
}

"""The output of our delete `Role` mutation."""
type DeleteRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRoleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was deleted by this mutation."""
  role: Role

  """Reads a single `Teacher` that is related to this `Role`."""
  teacher: Teacher!
}

"""All input for the `deleteServiceByIdAndYearValue` mutation."""
input DeleteServiceByIdAndYearValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique service identifier"""
  id: Int!

  """Academic year for this service record"""
  yearValue: Int!
}

"""All input for the `deleteServiceByNodeId` mutation."""
input DeleteServiceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteServiceByYearValueAndUid` mutation."""
input DeleteServiceByYearValueAndUidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Teacher identifier linking to teacher table"""
  uid: String!

  """Academic year for this service record"""
  yearValue: Int!
}

"""All input for the `deleteService` mutation."""
input DeleteServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique service identifier"""
  id: Int!
}

"""All input for the `deleteServiceModificationByNodeId` mutation."""
input DeleteServiceModificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceModification` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteServiceModification` mutation."""
input DeleteServiceModificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique modification identifier"""
  id: Int!
}

"""The output of our delete `ServiceModification` mutation."""
type DeleteServiceModificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedServiceModificationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Service` that is related to this `ServiceModification`.
  """
  service: Service!

  """The `ServiceModification` that was deleted by this mutation."""
  serviceModification: ServiceModification

  """
  Reads a single `ServiceModificationType` that is related to this `ServiceModification`.
  """
  type: ServiceModificationType!
}

"""All input for the `deleteServiceModificationTypeByLabel` mutation."""
input DeleteServiceModificationTypeByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable type name for display purposes, unique"""
  label: String!
}

"""All input for the `deleteServiceModificationTypeByNodeId` mutation."""
input DeleteServiceModificationTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceModificationType` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteServiceModificationType` mutation."""
input DeleteServiceModificationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique modification type identifier"""
  id: Int!
}

"""The output of our delete `ServiceModificationType` mutation."""
type DeleteServiceModificationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedServiceModificationTypeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ServiceModificationType` that was deleted by this mutation."""
  serviceModificationType: ServiceModificationType
}

"""The output of our delete `Service` mutation."""
type DeleteServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedServiceNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Service` that was deleted by this mutation."""
  service: Service

  """Reads a single `Teacher` that is related to this `Service`."""
  teacher: Teacher!

  """Reads a single `Year` that is related to this `Service`."""
  year: Year!
}

"""All input for the `deleteTeacherByNodeId` mutation."""
input DeleteTeacherByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Teacher` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTeacher` mutation."""
input DeleteTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Teacher's email address (primary key)."""
  uid: String!
}

"""The output of our delete `Teacher` mutation."""
type DeleteTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTeacherNodeId: ID

  """Reads a single `Position` that is related to this `Teacher`."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Teacher` that was deleted by this mutation."""
  teacher: Teacher
}

"""All input for the `deleteTrackByIdAndProgramId` mutation."""
input DeleteTrackByIdAndProgramIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique track identifier"""
  id: Int!

  """Parent program for this track"""
  programId: Int!
}

"""All input for the `deleteTrackByNodeId` mutation."""
input DeleteTrackByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTrackByProgramIdAndName` mutation."""
input DeleteTrackByProgramIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Full track name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String!

  """Parent program for this track"""
  programId: Int!
}

"""All input for the `deleteTrack` mutation."""
input DeleteTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique track identifier"""
  id: Int!
}

"""The output of our delete `Track` mutation."""
type DeleteTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTrackNodeId: ID

  """Reads a single `Program` that is related to this `Track`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was deleted by this mutation."""
  track: Track
}

"""All input for the `deleteYearByNodeId` mutation."""
input DeleteYearByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Year` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteYear` mutation."""
input DeleteYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Academic year identifier (e.g., 2024 for 2024-2025 academic year)"""
  value: Int!
}

"""The output of our delete `Year` mutation."""
type DeleteYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedYearNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Year` that was deleted by this mutation."""
  year: Year
}

"""All input for the `dummyMutation` mutation."""
input DummyMutationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `dummyMutation` mutation."""
type DummyMutationPayload {
  boolean: Boolean

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Adds created_at and updated_at timestamp columns to the specified table, along with an automatic update trigger for updated_at
  """
  addTimestampColumns(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddTimestampColumnsInput!
  ): AddTimestampColumnsPayload

  """
  Adds created_at and updated_at timestamp columns to all tables in the public schema, along with an automatic update trigger for updated_at
  """
  addTimestampColumnsToAllTables(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddTimestampColumnsToAllTablesInput!
  ): AddTimestampColumnsToAllTablesPayload

  """
  Computes courses seniority and priority status for a given service based on previous year's course assignments
  """
  computeServicePriorities(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ComputeServicePrioritiesInput!
  ): ComputeServicePrioritiesPayload

  """
  Computes seniority and priority status for all services in a given year
  """
  computeYearPriorities(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ComputeYearPrioritiesInput!
  ): ComputeYearPrioritiesPayload

  """
  Creates copies of all courses from the previous year into the specified year
  """
  copyYearCourses(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CopyYearCoursesInput!
  ): CopyYearCoursesPayload

  """Creates a single `AppSetting`."""
  createAppSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAppSettingInput!
  ): CreateAppSettingPayload

  """Creates a single `Coordination`."""
  createCoordination(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCoordinationInput!
  ): CreateCoordinationPayload

  """Creates a single `Course`."""
  createCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseInput!
  ): CreateCoursePayload

  """Creates a single `CourseType`."""
  createCourseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCourseTypeInput!
  ): CreateCourseTypePayload

  """Creates a single `CurrentPhase`."""
  createCurrentPhase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCurrentPhaseInput!
  ): CreateCurrentPhasePayload

  """Creates a single `Degree`."""
  createDegree(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDegreeInput!
  ): CreateDegreePayload

  """Creates a single `Position`."""
  createPosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePositionInput!
  ): CreatePositionPayload

  """Creates a single `Priority`."""
  createPriority(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePriorityInput!
  ): CreatePriorityPayload

  """Creates a single `Program`."""
  createProgram(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProgramInput!
  ): CreateProgramPayload

  """Creates a single `Request`."""
  createRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRequestInput!
  ): CreateRequestPayload

  """Creates a single `Role`."""
  createRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleInput!
  ): CreateRolePayload

  """Creates a single `Service`."""
  createService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceInput!
  ): CreateServicePayload

  """Creates a single `ServiceModification`."""
  createServiceModification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceModificationInput!
  ): CreateServiceModificationPayload

  """Creates a single `ServiceModificationType`."""
  createServiceModificationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceModificationTypeInput!
  ): CreateServiceModificationTypePayload

  """Creates a single `Teacher`."""
  createTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeacherInput!
  ): CreateTeacherPayload

  """
  Creates a new service entry for a specific year and teacher with default base hours, using personal base_service_hours if set and position's base_service_hours otherwise
  """
  createTeacherService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeacherServiceInput!
  ): CreateTeacherServicePayload

  """Creates a single `Track`."""
  createTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrackInput!
  ): CreateTrackPayload

  """Creates a single `VService`."""
  createVService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVServiceInput!
  ): CreateVServicePayload

  """Creates a single `VTeacher`."""
  createVTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateVTeacherInput!
  ): CreateVTeacherPayload

  """Creates a single `Year`."""
  createYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateYearInput!
  ): CreateYearPayload

  """
  Creates service entries for all active teachers for a specific year, using personal base_service_hours if set and position's base_service_hours otherwise
  """
  createYearServices(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateYearServicesInput!
  ): CreateYearServicesPayload

  """Deletes a single `AppSetting` using a unique key."""
  deleteAppSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppSettingInput!
  ): DeleteAppSettingPayload

  """Deletes a single `AppSetting` using its globally unique id."""
  deleteAppSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAppSettingByNodeIdInput!
  ): DeleteAppSettingPayload

  """Deletes a single `Coordination` using a unique key."""
  deleteCoordination(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCoordinationInput!
  ): DeleteCoordinationPayload

  """Deletes a single `Coordination` using its globally unique id."""
  deleteCoordinationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCoordinationByNodeIdInput!
  ): DeleteCoordinationPayload

  """Deletes a single `Coordination` using a unique key."""
  deleteCoordinationByUidAndCourseIdAndTrackIdAndProgramId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCoordinationByUidAndCourseIdAndTrackIdAndProgramIdInput!
  ): DeleteCoordinationPayload

  """Deletes a single `Course` using a unique key."""
  deleteCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourseByIdAndYearValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByIdAndYearValueInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using its globally unique id."""
  deleteCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByNodeIdInput!
  ): DeleteCoursePayload

  """Deletes a single `Course` using a unique key."""
  deleteCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeIdInput!
  ): DeleteCoursePayload

  """Deletes a single `CourseType` using a unique key."""
  deleteCourseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseTypeInput!
  ): DeleteCourseTypePayload

  """Deletes a single `CourseType` using a unique key."""
  deleteCourseTypeByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseTypeByLabelInput!
  ): DeleteCourseTypePayload

  """Deletes a single `CourseType` using its globally unique id."""
  deleteCourseTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCourseTypeByNodeIdInput!
  ): DeleteCourseTypePayload

  """Deletes a single `CurrentPhase` using a unique key."""
  deleteCurrentPhase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCurrentPhaseInput!
  ): DeleteCurrentPhasePayload

  """Deletes a single `CurrentPhase` using its globally unique id."""
  deleteCurrentPhaseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCurrentPhaseByNodeIdInput!
  ): DeleteCurrentPhasePayload

  """Deletes a single `Degree` using a unique key."""
  deleteDegree(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDegreeInput!
  ): DeleteDegreePayload

  """Deletes a single `Degree` using a unique key."""
  deleteDegreeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDegreeByNameInput!
  ): DeleteDegreePayload

  """Deletes a single `Degree` using its globally unique id."""
  deleteDegreeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDegreeByNodeIdInput!
  ): DeleteDegreePayload

  """Deletes a single `Position` using a unique key."""
  deletePosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePositionInput!
  ): DeletePositionPayload

  """Deletes a single `Position` using a unique key."""
  deletePositionByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePositionByLabelInput!
  ): DeletePositionPayload

  """Deletes a single `Position` using its globally unique id."""
  deletePositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePositionByNodeIdInput!
  ): DeletePositionPayload

  """Deletes a single `Priority` using a unique key."""
  deletePriority(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePriorityInput!
  ): DeletePriorityPayload

  """Deletes a single `Priority` using its globally unique id."""
  deletePriorityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePriorityByNodeIdInput!
  ): DeletePriorityPayload

  """Deletes a single `Priority` using a unique key."""
  deletePriorityByServiceIdAndCourseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePriorityByServiceIdAndCourseIdInput!
  ): DeletePriorityPayload

  """Deletes a single `Program` using a unique key."""
  deleteProgram(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramInput!
  ): DeleteProgramPayload

  """Deletes a single `Program` using a unique key."""
  deleteProgramByDegreeIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramByDegreeIdAndNameInput!
  ): DeleteProgramPayload

  """Deletes a single `Program` using its globally unique id."""
  deleteProgramByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProgramByNodeIdInput!
  ): DeleteProgramPayload

  """Deletes a single `Request` using a unique key."""
  deleteRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestInput!
  ): DeleteRequestPayload

  """Deletes a single `Request` using its globally unique id."""
  deleteRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestByNodeIdInput!
  ): DeleteRequestPayload

  """Deletes a single `Request` using a unique key."""
  deleteRequestByServiceIdAndCourseIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRequestByServiceIdAndCourseIdAndTypeInput!
  ): DeleteRequestPayload

  """Deletes a single `Role` using a unique key."""
  deleteRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleInput!
  ): DeleteRolePayload

  """Deletes a single `Role` using its globally unique id."""
  deleteRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByNodeIdInput!
  ): DeleteRolePayload

  """Deletes a single `Role` using a unique key."""
  deleteRoleByUidAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByUidAndTypeInput!
  ): DeleteRolePayload

  """Deletes a single `Service` using a unique key."""
  deleteService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceInput!
  ): DeleteServicePayload

  """Deletes a single `Service` using a unique key."""
  deleteServiceByIdAndYearValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceByIdAndYearValueInput!
  ): DeleteServicePayload

  """Deletes a single `Service` using its globally unique id."""
  deleteServiceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceByNodeIdInput!
  ): DeleteServicePayload

  """Deletes a single `Service` using a unique key."""
  deleteServiceByYearValueAndUid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceByYearValueAndUidInput!
  ): DeleteServicePayload

  """Deletes a single `ServiceModification` using a unique key."""
  deleteServiceModification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceModificationInput!
  ): DeleteServiceModificationPayload

  """Deletes a single `ServiceModification` using its globally unique id."""
  deleteServiceModificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceModificationByNodeIdInput!
  ): DeleteServiceModificationPayload

  """Deletes a single `ServiceModificationType` using a unique key."""
  deleteServiceModificationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceModificationTypeInput!
  ): DeleteServiceModificationTypePayload

  """Deletes a single `ServiceModificationType` using a unique key."""
  deleteServiceModificationTypeByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceModificationTypeByLabelInput!
  ): DeleteServiceModificationTypePayload

  """
  Deletes a single `ServiceModificationType` using its globally unique id.
  """
  deleteServiceModificationTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceModificationTypeByNodeIdInput!
  ): DeleteServiceModificationTypePayload

  """Deletes a single `Teacher` using a unique key."""
  deleteTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeacherInput!
  ): DeleteTeacherPayload

  """Deletes a single `Teacher` using its globally unique id."""
  deleteTeacherByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeacherByNodeIdInput!
  ): DeleteTeacherPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrackByIdAndProgramId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByIdAndProgramIdInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using its globally unique id."""
  deleteTrackByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByNodeIdInput!
  ): DeleteTrackPayload

  """Deletes a single `Track` using a unique key."""
  deleteTrackByProgramIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrackByProgramIdAndNameInput!
  ): DeleteTrackPayload

  """Deletes a single `Year` using a unique key."""
  deleteYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteYearInput!
  ): DeleteYearPayload

  """Deletes a single `Year` using its globally unique id."""
  deleteYearByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteYearByNodeIdInput!
  ): DeleteYearPayload

  """Dummy mutation that does nothing"""
  dummyMutation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DummyMutationInput!
  ): DummyMutationPayload

  """Updates a single `AppSetting` using a unique key and a patch."""
  updateAppSetting(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppSettingInput!
  ): UpdateAppSettingPayload

  """
  Updates a single `AppSetting` using its globally unique id and a patch.
  """
  updateAppSettingByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAppSettingByNodeIdInput!
  ): UpdateAppSettingPayload

  """Updates a single `Coordination` using a unique key and a patch."""
  updateCoordination(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCoordinationInput!
  ): UpdateCoordinationPayload

  """
  Updates a single `Coordination` using its globally unique id and a patch.
  """
  updateCoordinationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCoordinationByNodeIdInput!
  ): UpdateCoordinationPayload

  """Updates a single `Coordination` using a unique key and a patch."""
  updateCoordinationByUidAndCourseIdAndTrackIdAndProgramId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCoordinationByUidAndCourseIdAndTrackIdAndProgramIdInput!
  ): UpdateCoordinationPayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourseByIdAndYearValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByIdAndYearValueInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using its globally unique id and a patch."""
  updateCourseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByNodeIdInput!
  ): UpdateCoursePayload

  """Updates a single `Course` using a unique key and a patch."""
  updateCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeIdInput!
  ): UpdateCoursePayload

  """Updates a single `CourseType` using a unique key and a patch."""
  updateCourseType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseTypeInput!
  ): UpdateCourseTypePayload

  """Updates a single `CourseType` using a unique key and a patch."""
  updateCourseTypeByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseTypeByLabelInput!
  ): UpdateCourseTypePayload

  """
  Updates a single `CourseType` using its globally unique id and a patch.
  """
  updateCourseTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCourseTypeByNodeIdInput!
  ): UpdateCourseTypePayload

  """Updates a single `CurrentPhase` using a unique key and a patch."""
  updateCurrentPhase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCurrentPhaseInput!
  ): UpdateCurrentPhasePayload

  """
  Updates a single `CurrentPhase` using its globally unique id and a patch.
  """
  updateCurrentPhaseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCurrentPhaseByNodeIdInput!
  ): UpdateCurrentPhasePayload

  """Updates a single `Degree` using a unique key and a patch."""
  updateDegree(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDegreeInput!
  ): UpdateDegreePayload

  """Updates a single `Degree` using a unique key and a patch."""
  updateDegreeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDegreeByNameInput!
  ): UpdateDegreePayload

  """Updates a single `Degree` using its globally unique id and a patch."""
  updateDegreeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDegreeByNodeIdInput!
  ): UpdateDegreePayload

  """Updates a single `Position` using a unique key and a patch."""
  updatePosition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePositionInput!
  ): UpdatePositionPayload

  """Updates a single `Position` using a unique key and a patch."""
  updatePositionByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePositionByLabelInput!
  ): UpdatePositionPayload

  """Updates a single `Position` using its globally unique id and a patch."""
  updatePositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePositionByNodeIdInput!
  ): UpdatePositionPayload

  """Updates a single `Priority` using a unique key and a patch."""
  updatePriority(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePriorityInput!
  ): UpdatePriorityPayload

  """Updates a single `Priority` using its globally unique id and a patch."""
  updatePriorityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePriorityByNodeIdInput!
  ): UpdatePriorityPayload

  """Updates a single `Priority` using a unique key and a patch."""
  updatePriorityByServiceIdAndCourseId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePriorityByServiceIdAndCourseIdInput!
  ): UpdatePriorityPayload

  """Updates a single `Program` using a unique key and a patch."""
  updateProgram(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramInput!
  ): UpdateProgramPayload

  """Updates a single `Program` using a unique key and a patch."""
  updateProgramByDegreeIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramByDegreeIdAndNameInput!
  ): UpdateProgramPayload

  """Updates a single `Program` using its globally unique id and a patch."""
  updateProgramByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProgramByNodeIdInput!
  ): UpdateProgramPayload

  """Updates a single `Request` using a unique key and a patch."""
  updateRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRequestInput!
  ): UpdateRequestPayload

  """Updates a single `Request` using its globally unique id and a patch."""
  updateRequestByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRequestByNodeIdInput!
  ): UpdateRequestPayload

  """Updates a single `Request` using a unique key and a patch."""
  updateRequestByServiceIdAndCourseIdAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRequestByServiceIdAndCourseIdAndTypeInput!
  ): UpdateRequestPayload

  """Updates a single `Role` using a unique key and a patch."""
  updateRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleInput!
  ): UpdateRolePayload

  """Updates a single `Role` using its globally unique id and a patch."""
  updateRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByNodeIdInput!
  ): UpdateRolePayload

  """Updates a single `Role` using a unique key and a patch."""
  updateRoleByUidAndType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByUidAndTypeInput!
  ): UpdateRolePayload

  """Updates a single `Service` using a unique key and a patch."""
  updateService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceInput!
  ): UpdateServicePayload

  """Updates a single `Service` using a unique key and a patch."""
  updateServiceByIdAndYearValue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceByIdAndYearValueInput!
  ): UpdateServicePayload

  """Updates a single `Service` using its globally unique id and a patch."""
  updateServiceByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceByNodeIdInput!
  ): UpdateServicePayload

  """Updates a single `Service` using a unique key and a patch."""
  updateServiceByYearValueAndUid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceByYearValueAndUidInput!
  ): UpdateServicePayload

  """Updates a single `ServiceModification` using a unique key and a patch."""
  updateServiceModification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceModificationInput!
  ): UpdateServiceModificationPayload

  """
  Updates a single `ServiceModification` using its globally unique id and a patch.
  """
  updateServiceModificationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceModificationByNodeIdInput!
  ): UpdateServiceModificationPayload

  """
  Updates a single `ServiceModificationType` using a unique key and a patch.
  """
  updateServiceModificationType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceModificationTypeInput!
  ): UpdateServiceModificationTypePayload

  """
  Updates a single `ServiceModificationType` using a unique key and a patch.
  """
  updateServiceModificationTypeByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceModificationTypeByLabelInput!
  ): UpdateServiceModificationTypePayload

  """
  Updates a single `ServiceModificationType` using its globally unique id and a patch.
  """
  updateServiceModificationTypeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceModificationTypeByNodeIdInput!
  ): UpdateServiceModificationTypePayload

  """Updates a single `Teacher` using a unique key and a patch."""
  updateTeacher(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeacherInput!
  ): UpdateTeacherPayload

  """Updates a single `Teacher` using its globally unique id and a patch."""
  updateTeacherByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeacherByNodeIdInput!
  ): UpdateTeacherPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrack(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrackByIdAndProgramId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByIdAndProgramIdInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using its globally unique id and a patch."""
  updateTrackByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByNodeIdInput!
  ): UpdateTrackPayload

  """Updates a single `Track` using a unique key and a patch."""
  updateTrackByProgramIdAndName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrackByProgramIdAndNameInput!
  ): UpdateTrackPayload

  """Updates a single `Year` using a unique key and a patch."""
  updateYear(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateYearInput!
  ): UpdateYearPayload

  """Updates a single `Year` using its globally unique id and a patch."""
  updateYearByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateYearByNodeIdInput!
  ): UpdateYearPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

enum Phase {
  """
  The course assignment committee reviews requests and makes final teaching assignments, during which teachers can view but not modify their requests.
  """
  ASSIGNMENTS

  """
  Teachers submit their teaching preferences by making primary and secondary course requests, while also confirming their required teaching hours and any service modifications.
  """
  REQUESTS

  """
  Teachers can view their final course assignments for the upcoming year, along with historical assignments from previous years.
  """
  RESULTS

  """
  System is temporarily closed, typically between academic years or during maintenance periods.
  """
  SHUTDOWN
}

"""Teaching positions with associated service hour requirements"""
type Position implements Node {
  """
  Default annual teaching hours required for this position, can be overridden per teacher
  """
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Optional description of the position"""
  description: String

  """Unique position identifier"""
  id: Int!

  """Human-readable position name for display purposes, unique"""
  label: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Teacher`."""
  teachers(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeacherCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Teacher`."""
    orderBy: [TeachersOrderBy!]
  ): [Teacher!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `Position` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PositionCondition {
  """Checks for equality with the object’s `baseServiceHours` field."""
  baseServiceHours: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Position`"""
input PositionInput {
  """
  Default annual teaching hours required for this position, can be overridden per teacher
  """
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Optional description of the position"""
  description: String

  """Human-readable position name for display purposes, unique"""
  label: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""
Represents an update to a `Position`. Fields that are set will be updated.
"""
input PositionPatch {
  """
  Default annual teaching hours required for this position, can be overridden per teacher
  """
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Optional description of the position"""
  description: String

  """Human-readable position name for display purposes, unique"""
  label: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Methods to use when ordering `Position`."""
enum PositionsOrderBy {
  BASE_SERVICE_HOURS_ASC
  BASE_SERVICE_HOURS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Priority`."""
enum PrioritiesOrderBy {
  COMPUTED_ASC
  COMPUTED_DESC
  COURSE_ID_ASC
  COURSE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_PRIORITY_ASC
  IS_PRIORITY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENIORITY_ASC
  SENIORITY_DESC
  SERVICE_ID_ASC
  SERVICE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  YEAR_VALUE_ASC
  YEAR_VALUE_DESC
}

"""Teacher course assignment history and priority status"""
type Priority implements Node {
  """
  Flag indicating whether the seniority value was automatically computed rather than manually assigned
  """
  computed: Boolean!

  """Reads a single `Course` that is related to this `Priority`."""
  courseByYearValueAndCourseId: Course!

  """Course for which priority is tracked"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Unique priority record identifier"""
  id: Int!

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Consecutive years teaching this course before current year"""
  seniority: Int

  """Reads a single `Service` that is related to this `Priority`."""
  serviceByYearValueAndServiceId: Service!

  """Associated teacher service record"""
  serviceId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Reads a single `Year` that is related to this `Priority`."""
  year: Year!

  """Year of the priority (must match service's and course's year)"""
  yearValue: Int!
}

"""
A condition to be used against `Priority` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PriorityCondition {
  """Checks for equality with the object’s `computed` field."""
  computed: Boolean

  """Checks for equality with the object’s `courseId` field."""
  courseId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPriority` field."""
  isPriority: Boolean

  """Checks for equality with the object’s `seniority` field."""
  seniority: Int

  """Checks for equality with the object’s `serviceId` field."""
  serviceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `yearValue` field."""
  yearValue: Int
}

"""An input for mutations affecting `Priority`"""
input PriorityInput {
  """
  Flag indicating whether the seniority value was automatically computed rather than manually assigned
  """
  computed: Boolean

  """Course for which priority is tracked"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Consecutive years teaching this course before current year"""
  seniority: Int

  """Associated teacher service record"""
  serviceId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Year of the priority (must match service's and course's year)"""
  yearValue: Int!
}

"""
Represents an update to a `Priority`. Fields that are set will be updated.
"""
input PriorityPatch {
  """
  Flag indicating whether the seniority value was automatically computed rather than manually assigned
  """
  computed: Boolean

  """Course for which priority is tracked"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Consecutive years teaching this course before current year"""
  seniority: Int

  """Associated teacher service record"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Year of the priority (must match service's and course's year)"""
  yearValue: Int
}

"""Academic programs within each degree"""
type Program implements Node {
  """Reads and enables pagination through a set of `Coordination`."""
  coordinations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoordinationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Coordination`."""
    orderBy: [CoordinationsOrderBy!]
  ): [Coordination!]!

  """Reads and enables pagination through a set of `Course`."""
  courses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!]
  ): [Course!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Reads a single `Degree` that is related to this `Program`."""
  degree: Degree!

  """Parent degree for this program"""
  degreeId: Int!

  """Unique program identifier"""
  id: Int!

  """Full program name, unique within its degree (e.g., Mathematics)"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated program name"""
  nameShort: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Track`."""
  tracks(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!]
  ): [Track!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Controls program visibility in the user interface and queries"""
  visible: Boolean!
}

"""
A condition to be used against `Program` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProgramCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `degreeId` field."""
  degreeId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nameDisplay` field."""
  nameDisplay: String

  """Checks for equality with the object’s `nameShort` field."""
  nameShort: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `Program`"""
input ProgramInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Parent degree for this program"""
  degreeId: Int!

  """Full program name, unique within its degree (e.g., Mathematics)"""
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated program name"""
  nameShort: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls program visibility in the user interface and queries"""
  visible: Boolean
}

"""
Represents an update to a `Program`. Fields that are set will be updated.
"""
input ProgramPatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Parent degree for this program"""
  degreeId: Int

  """Full program name, unique within its degree (e.g., Mathematics)"""
  name: String

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated program name"""
  nameShort: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls program visibility in the user interface and queries"""
  visible: Boolean
}

"""Methods to use when ordering `Program`."""
enum ProgramsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEGREE_ID_ASC
  DEGREE_ID_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NAME_DISPLAY_ASC
  NAME_DISPLAY_DESC
  NAME_SHORT_ASC
  NAME_SHORT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Get a single `AppSetting`."""
  appSetting(key: String!): AppSetting

  """Reads a single `AppSetting` using its globally unique `ID`."""
  appSettingByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AppSetting`.
    """
    nodeId: ID!
  ): AppSetting

  """Reads a set of `AppSetting`."""
  appSettings(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AppSettingCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AppSetting`."""
    orderBy: [AppSettingsOrderBy!]
  ): [AppSetting!]

  """Get a single `Coordination`."""
  coordination(id: Int!): Coordination

  """Reads a single `Coordination` using its globally unique `ID`."""
  coordinationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Coordination`.
    """
    nodeId: ID!
  ): Coordination

  """Get a single `Coordination`."""
  coordinationByUidAndCourseIdAndTrackIdAndProgramId(courseId: Int!, programId: Int!, trackId: Int!, uid: String!): Coordination

  """Reads a set of `Coordination`."""
  coordinations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoordinationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Coordination`."""
    orderBy: [CoordinationsOrderBy!]
  ): [Coordination!]

  """Get a single `Course`."""
  course(id: Int!): Course

  """Get a single `Course`."""
  courseByIdAndYearValue(id: Int!, yearValue: Int!): Course

  """Reads a single `Course` using its globally unique `ID`."""
  courseByNodeId(
    """The globally unique `ID` to be used in selecting a single `Course`."""
    nodeId: ID!
  ): Course

  """Get a single `Course`."""
  courseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeId(name: String!, programId: Int!, semester: Int!, trackId: Int!, typeId: Int!, yearValue: Int!): Course

  """Get a single `CourseType`."""
  courseType(id: Int!): CourseType

  """Get a single `CourseType`."""
  courseTypeByLabel(label: String!): CourseType

  """Reads a single `CourseType` using its globally unique `ID`."""
  courseTypeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CourseType`.
    """
    nodeId: ID!
  ): CourseType

  """Reads a set of `CourseType`."""
  courseTypes(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseTypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CourseType`."""
    orderBy: [CourseTypesOrderBy!]
  ): [CourseType!]

  """Reads a set of `Course`."""
  courses(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!]
  ): [Course!]

  """Get a single `CurrentPhase`."""
  currentPhase(id: Int!): CurrentPhase

  """Reads a single `CurrentPhase` using its globally unique `ID`."""
  currentPhaseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CurrentPhase`.
    """
    nodeId: ID!
  ): CurrentPhase

  """Reads a set of `CurrentPhase`."""
  currentPhases(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CurrentPhaseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CurrentPhase`."""
    orderBy: [CurrentPhasesOrderBy!]
  ): [CurrentPhase!]

  """Get a single `Degree`."""
  degree(id: Int!): Degree

  """Get a single `Degree`."""
  degreeByName(name: String!): Degree

  """Reads a single `Degree` using its globally unique `ID`."""
  degreeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Degree`."""
    nodeId: ID!
  ): Degree

  """Reads a set of `Degree`."""
  degrees(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DegreeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Degree`."""
    orderBy: [DegreesOrderBy!]
  ): [Degree!]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Get a single `Position`."""
  position(id: Int!): Position

  """Get a single `Position`."""
  positionByLabel(label: String!): Position

  """Reads a single `Position` using its globally unique `ID`."""
  positionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Position`."""
    nodeId: ID!
  ): Position

  """Reads a set of `Position`."""
  positions(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PositionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Position`."""
    orderBy: [PositionsOrderBy!]
  ): [Position!]

  """Reads a set of `Priority`."""
  priorities(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PriorityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Priority`."""
    orderBy: [PrioritiesOrderBy!]
  ): [Priority!]

  """Get a single `Priority`."""
  priority(id: Int!): Priority

  """Reads a single `Priority` using its globally unique `ID`."""
  priorityByNodeId(
    """The globally unique `ID` to be used in selecting a single `Priority`."""
    nodeId: ID!
  ): Priority

  """Get a single `Priority`."""
  priorityByServiceIdAndCourseId(courseId: Int!, serviceId: Int!): Priority

  """Get a single `Program`."""
  program(id: Int!): Program

  """Get a single `Program`."""
  programByDegreeIdAndName(degreeId: Int!, name: String!): Program

  """Reads a single `Program` using its globally unique `ID`."""
  programByNodeId(
    """The globally unique `ID` to be used in selecting a single `Program`."""
    nodeId: ID!
  ): Program

  """Reads a set of `Program`."""
  programs(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProgramCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Program`."""
    orderBy: [ProgramsOrderBy!]
  ): [Program!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Get a single `Request`."""
  request(id: Int!): Request

  """Reads a single `Request` using its globally unique `ID`."""
  requestByNodeId(
    """The globally unique `ID` to be used in selecting a single `Request`."""
    nodeId: ID!
  ): Request

  """Get a single `Request`."""
  requestByServiceIdAndCourseIdAndType(courseId: Int!, serviceId: Int!, type: RequestType!): Request

  """Reads a set of `Request`."""
  requests(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!]
  ): [Request!]

  """Get a single `Role`."""
  role(id: Int!): Role

  """Reads a single `Role` using its globally unique `ID`."""
  roleByNodeId(
    """The globally unique `ID` to be used in selecting a single `Role`."""
    nodeId: ID!
  ): Role

  """Get a single `Role`."""
  roleByUidAndType(type: RoleType!, uid: String!): Role

  """Reads a set of `Role`."""
  roles(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
  ): [Role!]

  """Get a single `Service`."""
  service(id: Int!): Service

  """Get a single `Service`."""
  serviceByIdAndYearValue(id: Int!, yearValue: Int!): Service

  """Reads a single `Service` using its globally unique `ID`."""
  serviceByNodeId(
    """The globally unique `ID` to be used in selecting a single `Service`."""
    nodeId: ID!
  ): Service

  """Get a single `Service`."""
  serviceByYearValueAndUid(uid: String!, yearValue: Int!): Service

  """Get a single `ServiceModification`."""
  serviceModification(id: Int!): ServiceModification

  """Reads a single `ServiceModification` using its globally unique `ID`."""
  serviceModificationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ServiceModification`.
    """
    nodeId: ID!
  ): ServiceModification

  """Get a single `ServiceModificationType`."""
  serviceModificationType(id: Int!): ServiceModificationType

  """Get a single `ServiceModificationType`."""
  serviceModificationTypeByLabel(label: String!): ServiceModificationType

  """
  Reads a single `ServiceModificationType` using its globally unique `ID`.
  """
  serviceModificationTypeByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ServiceModificationType`.
    """
    nodeId: ID!
  ): ServiceModificationType

  """Reads a set of `ServiceModificationType`."""
  serviceModificationTypes(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceModificationTypeCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ServiceModificationType`."""
    orderBy: [ServiceModificationTypesOrderBy!]
  ): [ServiceModificationType!]

  """Reads a set of `ServiceModification`."""
  serviceModifications(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceModificationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ServiceModification`."""
    orderBy: [ServiceModificationsOrderBy!]
  ): [ServiceModification!]

  """Reads a set of `Service`."""
  services(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!]
  ): [Service!]

  """Get a single `Teacher`."""
  teacher(uid: String!): Teacher

  """Reads a single `Teacher` using its globally unique `ID`."""
  teacherByNodeId(
    """The globally unique `ID` to be used in selecting a single `Teacher`."""
    nodeId: ID!
  ): Teacher

  """Reads a set of `Teacher`."""
  teachers(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeacherCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Teacher`."""
    orderBy: [TeachersOrderBy!]
  ): [Teacher!]

  """Get a single `Track`."""
  track(id: Int!): Track

  """Get a single `Track`."""
  trackByIdAndProgramId(id: Int!, programId: Int!): Track

  """Reads a single `Track` using its globally unique `ID`."""
  trackByNodeId(
    """The globally unique `ID` to be used in selecting a single `Track`."""
    nodeId: ID!
  ): Track

  """Get a single `Track`."""
  trackByProgramIdAndName(name: String!, programId: Int!): Track

  """Reads a set of `Track`."""
  tracks(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrackCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Track`."""
    orderBy: [TracksOrderBy!]
  ): [Track!]

  """Reads a set of `VService`."""
  vServices(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `VService`."""
    orderBy: [VServicesOrderBy!]
  ): [VService!]

  """Reads a set of `VTeacher`."""
  vTeachers(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VTeacherCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `VTeacher`."""
    orderBy: [VTeachersOrderBy!]
  ): [VTeacher!]

  """Get a single `Year`."""
  year(value: Int!): Year

  """Reads a single `Year` using its globally unique `ID`."""
  yearByNodeId(
    """The globally unique `ID` to be used in selecting a single `Year`."""
    nodeId: ID!
  ): Year

  """Reads a set of `Year`."""
  years(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: YearCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Year`."""
    orderBy: [YearsOrderBy!]
  ): [Year!]
}

"""Teacher requests and assignments for courses"""
type Request implements Node {
  """Reads a single `Course` that is related to this `Request`."""
  courseByYearValueAndCourseId: Course!

  """Requested or assigned course"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Requested or assigned teaching hours"""
  hours: Float!
  hoursWeighted: Float

  """Unique request identifier"""
  id: Int!
  isPriority: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Service` that is related to this `Request`."""
  serviceByYearValueAndServiceId: Service!
  serviceId: Int!

  """Type of request (primary choice, backup, or final assignment)"""
  type: RequestType!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Reads a single `VService` that is related to this `Request`."""
  vServiceByServiceId: VService!

  """Reads a single `Year` that is related to this `Request`."""
  year: Year!

  """Year of the request (must match service's and course's year)"""
  yearValue: Int!
}

"""
A condition to be used against `Request` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RequestCondition {
  """Checks for equality with the object’s `courseId` field."""
  courseId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `hours` field."""
  hours: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serviceId` field."""
  serviceId: Int

  """Checks for equality with the object’s `type` field."""
  type: RequestType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `yearValue` field."""
  yearValue: Int
}

"""An input for mutations affecting `Request`"""
input RequestInput {
  """Requested or assigned course"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Requested or assigned teaching hours"""
  hours: Float!
  serviceId: Int!

  """Type of request (primary choice, backup, or final assignment)"""
  type: RequestType!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Year of the request (must match service's and course's year)"""
  yearValue: Int!
}

"""
Represents an update to a `Request`. Fields that are set will be updated.
"""
input RequestPatch {
  """Requested or assigned course"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Requested or assigned teaching hours"""
  hours: Float
  serviceId: Int

  """Type of request (primary choice, backup, or final assignment)"""
  type: RequestType

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Year of the request (must match service's and course's year)"""
  yearValue: Int
}

enum RequestType {
  """
  Final course assignment made by the committee during the assignments phase
  """
  ASSIGNMENT

  """Teacher's preferred course choices submitted during the requests phase"""
  PRIMARY

  """Teacher's backup course choices submitted during the requests phase"""
  SECONDARY
}

"""Methods to use when ordering `Request`."""
enum RequestsOrderBy {
  COURSE_ID_ASC
  COURSE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  HOURS_ASC
  HOURS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ID_ASC
  SERVICE_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  YEAR_VALUE_ASC
  YEAR_VALUE_DESC
}

"""Teacher role assignments for system privileges"""
type Role implements Node {
  """Additional information about this privilege assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Unique role assignment identifier"""
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Teacher` that is related to this `Role`."""
  teacher: Teacher!

  """Type of privileged role"""
  type: RoleType!

  """Teacher identifier with role access"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `Role` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoleCondition {
  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `type` field."""
  type: RoleType

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Role`"""
input RoleInput {
  """Additional information about this privilege assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Type of privileged role"""
  type: RoleType!

  """Teacher identifier with role access"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Represents an update to a `Role`. Fields that are set will be updated."""
input RolePatch {
  """Additional information about this privilege assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: Datetime

  """Type of privileged role"""
  type: RoleType

  """Teacher identifier with role access"""
  uid: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

enum RoleType {
  """
  Full system administration access with ability to manage users, roles, and system configuration
  """
  ADMIN

  """
  Member of the course assignment committee with extra abilities during the assignments phase
  """
  COMMISSIONER

  """Base role with limited abilities"""
  TEACHER
}

"""Methods to use when ordering `Role`."""
enum RolesOrderBy {
  COMMENT_ASC
  COMMENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UID_ASC
  UID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Annual teaching service records tracking required hours and modifications
"""
type Service implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Required teaching hours for the year before modifications"""
  hours: Float!

  """Unique service identifier"""
  id: Int!

  """Optional message from teacher to course assignment committee"""
  message: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Priority`."""
  prioritiesByYearValueAndServiceId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PriorityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Priority`."""
    orderBy: [PrioritiesOrderBy!]
  ): [Priority!]!

  """Reads and enables pagination through a set of `Request`."""
  requestsByYearValueAndServiceId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!]
  ): [Request!]!

  """Reads and enables pagination through a set of `ServiceModification`."""
  serviceModifications(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceModificationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ServiceModification`."""
    orderBy: [ServiceModificationsOrderBy!]
  ): [ServiceModification!]!

  """Reads a single `Teacher` that is related to this `Service`."""
  teacher: Teacher!

  """Teacher identifier linking to teacher table"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Reads a single `Year` that is related to this `Service`."""
  year: Year!

  """Academic year for this service record"""
  yearValue: Int!
}

"""
A condition to be used against `Service` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ServiceCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `hours` field."""
  hours: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `yearValue` field."""
  yearValue: Int
}

"""An input for mutations affecting `Service`"""
input ServiceInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Required teaching hours for the year before modifications"""
  hours: Float!

  """Optional message from teacher to course assignment committee"""
  message: String

  """Teacher identifier linking to teacher table"""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Academic year for this service record"""
  yearValue: Int!
}

"""Individual modifications to base teaching service hours"""
type ServiceModification implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Hour adjustment amount (negative values increase required hours)"""
  hours: Float!

  """Unique modification identifier"""
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Service` that is related to this `ServiceModification`.
  """
  service: Service!

  """Reference to affected service record"""
  serviceId: Int!

  """
  Reads a single `ServiceModificationType` that is related to this `ServiceModification`.
  """
  type: ServiceModificationType!

  """Reference to service modification type"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `ServiceModification` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ServiceModificationCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `hours` field."""
  hours: Float

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `serviceId` field."""
  serviceId: Int

  """Checks for equality with the object’s `typeId` field."""
  typeId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ServiceModification`"""
input ServiceModificationInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Hour adjustment amount (negative values increase required hours)"""
  hours: Float!

  """Reference to affected service record"""
  serviceId: Int!

  """Reference to service modification type"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""
Represents an update to a `ServiceModification`. Fields that are set will be updated.
"""
input ServiceModificationPatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Hour adjustment amount (negative values increase required hours)"""
  hours: Float

  """Reference to affected service record"""
  serviceId: Int

  """Reference to service modification type"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Categories of service hour modifications"""
type ServiceModificationType implements Node {
  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Detailed explanation of the modification type and its application"""
  description: String

  """Unique modification type identifier"""
  id: Int!

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `ServiceModification`."""
  serviceModificationsByTypeId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceModificationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ServiceModification`."""
    orderBy: [ServiceModificationsOrderBy!]
  ): [ServiceModification!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!
}

"""
A condition to be used against `ServiceModificationType` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ServiceModificationTypeCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `ServiceModificationType`"""
input ServiceModificationTypeInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Detailed explanation of the modification type and its application"""
  description: String

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""
Represents an update to a `ServiceModificationType`. Fields that are set will be updated.
"""
input ServiceModificationTypePatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Detailed explanation of the modification type and its application"""
  description: String

  """Human-readable type name for display purposes, unique"""
  label: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime
}

"""Methods to use when ordering `ServiceModificationType`."""
enum ServiceModificationTypesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `ServiceModification`."""
enum ServiceModificationsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  HOURS_ASC
  HOURS_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SERVICE_ID_ASC
  SERVICE_ID_DESC
  TYPE_ID_ASC
  TYPE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Service`. Fields that are set will be updated.
"""
input ServicePatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """Required teaching hours for the year before modifications"""
  hours: Float

  """Optional message from teacher to course assignment committee"""
  message: String

  """Teacher identifier linking to teacher table"""
  uid: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Academic year for this service record"""
  yearValue: Int
}

"""Methods to use when ordering `Service`."""
enum ServicesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  HOURS_ASC
  HOURS_DESC
  ID_ASC
  ID_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UID_ASC
  UID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  YEAR_VALUE_ASC
  YEAR_VALUE_DESC
}

"""Core teacher information and status"""
type Teacher implements Node {
  """
  Controls system access and automatic service creation for upcoming years
  """
  active: Boolean!

  """Optional display name, used instead of first/last name when set"""
  alias: String

  """
  Individual override for annual teaching hours, takes precedence over position's base hours
  """
  baseServiceHours: Float

  """Reads and enables pagination through a set of `Coordination`."""
  coordinationsByUid(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoordinationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Coordination`."""
    orderBy: [CoordinationsOrderBy!]
  ): [Coordination!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """
  Preferred display name, using alias when available, otherwise full name
  """
  displayname: String

  """Teacher's first name"""
  firstname: String!

  """Teacher's last name"""
  lastname: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Position` that is related to this `Teacher`."""
  position: Position

  """Reference to teacher's position, determines default service hours"""
  positionId: Int

  """Reads and enables pagination through a set of `Role`."""
  rolesByUid(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Role`."""
    orderBy: [RolesOrderBy!]
  ): [Role!]!

  """Reads and enables pagination through a set of `Service`."""
  servicesByUid(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!]
  ): [Service!]!

  """Teacher's email address (primary key)."""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Controls teacher visibility in the user interface and queries"""
  visible: Boolean!
}

"""
A condition to be used against `Teacher` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeacherCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `baseServiceHours` field."""
  baseServiceHours: Float

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `displayname` field."""
  displayname: String

  """Checks for equality with the object’s `firstname` field."""
  firstname: String

  """Checks for equality with the object’s `lastname` field."""
  lastname: String

  """Checks for equality with the object’s `positionId` field."""
  positionId: Int

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `Teacher`"""
input TeacherInput {
  """
  Controls system access and automatic service creation for upcoming years
  """
  active: Boolean

  """Optional display name, used instead of first/last name when set"""
  alias: String

  """
  Individual override for annual teaching hours, takes precedence over position's base hours
  """
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Preferred display name, using alias when available, otherwise full name
  """
  displayname: String

  """Teacher's first name"""
  firstname: String!

  """Teacher's last name"""
  lastname: String!

  """Reference to teacher's position, determines default service hours"""
  positionId: Int

  """Teacher's email address (primary key)."""
  uid: String!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls teacher visibility in the user interface and queries"""
  visible: Boolean
}

"""
Represents an update to a `Teacher`. Fields that are set will be updated.
"""
input TeacherPatch {
  """
  Controls system access and automatic service creation for upcoming years
  """
  active: Boolean

  """Optional display name, used instead of first/last name when set"""
  alias: String

  """
  Individual override for annual teaching hours, takes precedence over position's base hours
  """
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Preferred display name, using alias when available, otherwise full name
  """
  displayname: String

  """Teacher's first name"""
  firstname: String

  """Teacher's last name"""
  lastname: String

  """Reference to teacher's position, determines default service hours"""
  positionId: Int

  """Teacher's email address (primary key)."""
  uid: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls teacher visibility in the user interface and queries"""
  visible: Boolean
}

"""Methods to use when ordering `Teacher`."""
enum TeachersOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  ALIAS_ASC
  ALIAS_DESC
  BASE_SERVICE_HOURS_ASC
  BASE_SERVICE_HOURS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DISPLAYNAME_ASC
  DISPLAYNAME_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  LASTNAME_ASC
  LASTNAME_DESC
  NATURAL
  POSITION_ID_ASC
  POSITION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UID_ASC
  UID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}

"""Specialization tracks within academic programs"""
type Track implements Node {
  """Reads and enables pagination through a set of `Coordination`."""
  coordinations(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CoordinationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Coordination`."""
    orderBy: [CoordinationsOrderBy!]
  ): [Coordination!]!

  """Reads and enables pagination through a set of `Course`."""
  coursesByTrackIdAndProgramId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!]
  ): [Course!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """Unique track identifier"""
  id: Int!

  """
  Full track name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated track name"""
  nameShort: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Program` that is related to this `Track`."""
  program: Program!

  """Parent program for this track"""
  programId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Controls track visibility in the user interface and queries"""
  visible: Boolean!
}

"""
A condition to be used against `Track` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TrackCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `nameDisplay` field."""
  nameDisplay: String

  """Checks for equality with the object’s `nameShort` field."""
  nameShort: String

  """Checks for equality with the object’s `programId` field."""
  programId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `Track`"""
input TrackInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Full track name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String!

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated track name"""
  nameShort: String

  """Parent program for this track"""
  programId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls track visibility in the user interface and queries"""
  visible: Boolean
}

"""
Represents an update to a `Track`. Fields that are set will be updated.
"""
input TrackPatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Full track name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """
  Preferred display name, using abbreviated name when available, otherwise full name
  """
  nameDisplay: String

  """Abbreviated track name"""
  nameShort: String

  """Parent program for this track"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Controls track visibility in the user interface and queries"""
  visible: Boolean
}

"""Methods to use when ordering `Track`."""
enum TracksOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NAME_DISPLAY_ASC
  NAME_DISPLAY_DESC
  NAME_SHORT_ASC
  NAME_SHORT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROGRAM_ID_ASC
  PROGRAM_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}

"""All input for the `updateAppSettingByNodeId` mutation."""
input UpdateAppSettingByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AppSetting` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AppSetting` being updated.
  """
  patch: AppSettingPatch!
}

"""All input for the `updateAppSetting` mutation."""
input UpdateAppSettingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Text identifier"""
  key: String!

  """
  An object where the defined keys will be set on the `AppSetting` being updated.
  """
  patch: AppSettingPatch!
}

"""The output of our update `AppSetting` mutation."""
type UpdateAppSettingPayload {
  """The `AppSetting` that was updated by this mutation."""
  appSetting: AppSetting

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCoordinationByNodeId` mutation."""
input UpdateCoordinationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Coordination` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Coordination` being updated.
  """
  patch: CoordinationPatch!
}

"""
All input for the `updateCoordinationByUidAndCourseIdAndTrackIdAndProgramId` mutation.
"""
input UpdateCoordinationByUidAndCourseIdAndTrackIdAndProgramIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Course being coordinated (mutually exclusive with program_id and track_id)
  """
  courseId: Int!

  """
  An object where the defined keys will be set on the `Coordination` being updated.
  """
  patch: CoordinationPatch!

  """
  Program being coordinated (mutually exclusive with track_id and course_id)
  """
  programId: Int!

  """
  Track being coordinated (mutually exclusive with program_id and course_id)
  """
  trackId: Int!

  """Coordinating teacher"""
  uid: String!
}

"""All input for the `updateCoordination` mutation."""
input UpdateCoordinationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique coordination identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Coordination` being updated.
  """
  patch: CoordinationPatch!
}

"""The output of our update `Coordination` mutation."""
type UpdateCoordinationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Coordination` that was updated by this mutation."""
  coordination: Coordination

  """Reads a single `Course` that is related to this `Coordination`."""
  course: Course

  """Reads a single `Program` that is related to this `Coordination`."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Teacher` that is related to this `Coordination`."""
  teacher: Teacher!

  """Reads a single `Track` that is related to this `Coordination`."""
  track: Track
}

"""All input for the `updateCourseByIdAndYearValue` mutation."""
input UpdateCourseByIdAndYearValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""All input for the `updateCourseByNodeId` mutation."""
input UpdateCourseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Course` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
}

"""
All input for the `updateCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeId` mutation.
"""
input UpdateCourseByYearValueAndProgramIdAndTrackIdAndNameAndSemesterAndTypeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Full course name"""
  name: String!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!

  """Program offering this course"""
  programId: Int!

  """Academic semester (1-6)"""
  semester: Int!

  """Optional track specialization for this course"""
  trackId: Int!

  """Reference to course delivery type affecting workload calculation"""
  typeId: Int!

  """Academic year when the course is offered"""
  yearValue: Int!
}

"""All input for the `updateCourse` mutation."""
input UpdateCourseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Course` being updated.
  """
  patch: CoursePatch!
}

"""The output of our update `Course` mutation."""
type UpdateCoursePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Course` that was updated by this mutation."""
  course: Course

  """Reads a single `Program` that is related to this `Course`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Track` that is related to this `Course`."""
  trackProgram: Track

  """Reads a single `CourseType` that is related to this `Course`."""
  type: CourseType!

  """Reads a single `Year` that is related to this `Course`."""
  year: Year!
}

"""All input for the `updateCourseTypeByLabel` mutation."""
input UpdateCourseTypeByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  An object where the defined keys will be set on the `CourseType` being updated.
  """
  patch: CourseTypePatch!
}

"""All input for the `updateCourseTypeByNodeId` mutation."""
input UpdateCourseTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CourseType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CourseType` being updated.
  """
  patch: CourseTypePatch!
}

"""All input for the `updateCourseType` mutation."""
input UpdateCourseTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique course type identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `CourseType` being updated.
  """
  patch: CourseTypePatch!
}

"""The output of our update `CourseType` mutation."""
type UpdateCourseTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CourseType` that was updated by this mutation."""
  courseType: CourseType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCurrentPhaseByNodeId` mutation."""
input UpdateCurrentPhaseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CurrentPhase` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CurrentPhase` being updated.
  """
  patch: CurrentPhasePatch!
}

"""All input for the `updateCurrentPhase` mutation."""
input UpdateCurrentPhaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key with constraint to ensure only one record exists"""
  id: Int!

  """
  An object where the defined keys will be set on the `CurrentPhase` being updated.
  """
  patch: CurrentPhasePatch!
}

"""The output of our update `CurrentPhase` mutation."""
type UpdateCurrentPhasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CurrentPhase` that was updated by this mutation."""
  currentPhase: CurrentPhase

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDegreeByName` mutation."""
input UpdateDegreeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Full degree name, unique (e.g., Bachelor of Science)"""
  name: String!

  """
  An object where the defined keys will be set on the `Degree` being updated.
  """
  patch: DegreePatch!
}

"""All input for the `updateDegreeByNodeId` mutation."""
input UpdateDegreeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Degree` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Degree` being updated.
  """
  patch: DegreePatch!
}

"""All input for the `updateDegree` mutation."""
input UpdateDegreeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique degree identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Degree` being updated.
  """
  patch: DegreePatch!
}

"""The output of our update `Degree` mutation."""
type UpdateDegreePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Degree` that was updated by this mutation."""
  degree: Degree

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePositionByLabel` mutation."""
input UpdatePositionByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable position name for display purposes, unique"""
  label: String!

  """
  An object where the defined keys will be set on the `Position` being updated.
  """
  patch: PositionPatch!
}

"""All input for the `updatePositionByNodeId` mutation."""
input UpdatePositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Position` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Position` being updated.
  """
  patch: PositionPatch!
}

"""All input for the `updatePosition` mutation."""
input UpdatePositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique position identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Position` being updated.
  """
  patch: PositionPatch!
}

"""The output of our update `Position` mutation."""
type UpdatePositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Position` that was updated by this mutation."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePriorityByNodeId` mutation."""
input UpdatePriorityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Priority` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Priority` being updated.
  """
  patch: PriorityPatch!
}

"""All input for the `updatePriorityByServiceIdAndCourseId` mutation."""
input UpdatePriorityByServiceIdAndCourseIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Course for which priority is tracked"""
  courseId: Int!

  """
  An object where the defined keys will be set on the `Priority` being updated.
  """
  patch: PriorityPatch!

  """Associated teacher service record"""
  serviceId: Int!
}

"""All input for the `updatePriority` mutation."""
input UpdatePriorityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique priority record identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Priority` being updated.
  """
  patch: PriorityPatch!
}

"""The output of our update `Priority` mutation."""
type UpdatePriorityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Priority`."""
  courseByYearValueAndCourseId: Course!

  """The `Priority` that was updated by this mutation."""
  priority: Priority

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `Priority`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `Year` that is related to this `Priority`."""
  year: Year!
}

"""All input for the `updateProgramByDegreeIdAndName` mutation."""
input UpdateProgramByDegreeIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Parent degree for this program"""
  degreeId: Int!

  """Full program name, unique within its degree (e.g., Mathematics)"""
  name: String!

  """
  An object where the defined keys will be set on the `Program` being updated.
  """
  patch: ProgramPatch!
}

"""All input for the `updateProgramByNodeId` mutation."""
input UpdateProgramByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Program` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Program` being updated.
  """
  patch: ProgramPatch!
}

"""All input for the `updateProgram` mutation."""
input UpdateProgramInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique program identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Program` being updated.
  """
  patch: ProgramPatch!
}

"""The output of our update `Program` mutation."""
type UpdateProgramPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Degree` that is related to this `Program`."""
  degree: Degree!

  """The `Program` that was updated by this mutation."""
  program: Program

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateRequestByNodeId` mutation."""
input UpdateRequestByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Request` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Request` being updated.
  """
  patch: RequestPatch!
}

"""
All input for the `updateRequestByServiceIdAndCourseIdAndType` mutation.
"""
input UpdateRequestByServiceIdAndCourseIdAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Requested or assigned course"""
  courseId: Int!

  """
  An object where the defined keys will be set on the `Request` being updated.
  """
  patch: RequestPatch!
  serviceId: Int!

  """Type of request (primary choice, backup, or final assignment)"""
  type: RequestType!
}

"""All input for the `updateRequest` mutation."""
input UpdateRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique request identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Request` being updated.
  """
  patch: RequestPatch!
}

"""The output of our update `Request` mutation."""
type UpdateRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Course` that is related to this `Request`."""
  courseByYearValueAndCourseId: Course!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Request` that was updated by this mutation."""
  request: Request

  """Reads a single `Service` that is related to this `Request`."""
  serviceByYearValueAndServiceId: Service!

  """Reads a single `VService` that is related to this `Request`."""
  vServiceByServiceId: VService!

  """Reads a single `Year` that is related to this `Request`."""
  year: Year!
}

"""All input for the `updateRoleByNodeId` mutation."""
input UpdateRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!
}

"""All input for the `updateRoleByUidAndType` mutation."""
input UpdateRoleByUidAndTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!

  """Type of privileged role"""
  type: RoleType!

  """Teacher identifier with role access"""
  uid: String!
}

"""All input for the `updateRole` mutation."""
input UpdateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique role assignment identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!
}

"""The output of our update `Role` mutation."""
type UpdateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Role` that was updated by this mutation."""
  role: Role

  """Reads a single `Teacher` that is related to this `Role`."""
  teacher: Teacher!
}

"""All input for the `updateServiceByIdAndYearValue` mutation."""
input UpdateServiceByIdAndYearValueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique service identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!

  """Academic year for this service record"""
  yearValue: Int!
}

"""All input for the `updateServiceByNodeId` mutation."""
input UpdateServiceByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!
}

"""All input for the `updateServiceByYearValueAndUid` mutation."""
input UpdateServiceByYearValueAndUidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!

  """Teacher identifier linking to teacher table"""
  uid: String!

  """Academic year for this service record"""
  yearValue: Int!
}

"""All input for the `updateService` mutation."""
input UpdateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique service identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  patch: ServicePatch!
}

"""All input for the `updateServiceModificationByNodeId` mutation."""
input UpdateServiceModificationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceModification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ServiceModification` being updated.
  """
  patch: ServiceModificationPatch!
}

"""All input for the `updateServiceModification` mutation."""
input UpdateServiceModificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique modification identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `ServiceModification` being updated.
  """
  patch: ServiceModificationPatch!
}

"""The output of our update `ServiceModification` mutation."""
type UpdateServiceModificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Service` that is related to this `ServiceModification`.
  """
  service: Service!

  """The `ServiceModification` that was updated by this mutation."""
  serviceModification: ServiceModification

  """
  Reads a single `ServiceModificationType` that is related to this `ServiceModification`.
  """
  type: ServiceModificationType!
}

"""All input for the `updateServiceModificationTypeByLabel` mutation."""
input UpdateServiceModificationTypeByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Human-readable type name for display purposes, unique"""
  label: String!

  """
  An object where the defined keys will be set on the `ServiceModificationType` being updated.
  """
  patch: ServiceModificationTypePatch!
}

"""All input for the `updateServiceModificationTypeByNodeId` mutation."""
input UpdateServiceModificationTypeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceModificationType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ServiceModificationType` being updated.
  """
  patch: ServiceModificationTypePatch!
}

"""All input for the `updateServiceModificationType` mutation."""
input UpdateServiceModificationTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique modification type identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `ServiceModificationType` being updated.
  """
  patch: ServiceModificationTypePatch!
}

"""The output of our update `ServiceModificationType` mutation."""
type UpdateServiceModificationTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ServiceModificationType` that was updated by this mutation."""
  serviceModificationType: ServiceModificationType
}

"""The output of our update `Service` mutation."""
type UpdateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Service` that was updated by this mutation."""
  service: Service

  """Reads a single `Teacher` that is related to this `Service`."""
  teacher: Teacher!

  """Reads a single `Year` that is related to this `Service`."""
  year: Year!
}

"""All input for the `updateTeacherByNodeId` mutation."""
input UpdateTeacherByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Teacher` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Teacher` being updated.
  """
  patch: TeacherPatch!
}

"""All input for the `updateTeacher` mutation."""
input UpdateTeacherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Teacher` being updated.
  """
  patch: TeacherPatch!

  """Teacher's email address (primary key)."""
  uid: String!
}

"""The output of our update `Teacher` mutation."""
type UpdateTeacherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Position` that is related to this `Teacher`."""
  position: Position

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Teacher` that was updated by this mutation."""
  teacher: Teacher
}

"""All input for the `updateTrackByIdAndProgramId` mutation."""
input UpdateTrackByIdAndProgramIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique track identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  patch: TrackPatch!

  """Parent program for this track"""
  programId: Int!
}

"""All input for the `updateTrackByNodeId` mutation."""
input UpdateTrackByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Track` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  patch: TrackPatch!
}

"""All input for the `updateTrackByProgramIdAndName` mutation."""
input UpdateTrackByProgramIdAndNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Full track name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  patch: TrackPatch!

  """Parent program for this track"""
  programId: Int!
}

"""All input for the `updateTrack` mutation."""
input UpdateTrackInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique track identifier"""
  id: Int!

  """
  An object where the defined keys will be set on the `Track` being updated.
  """
  patch: TrackPatch!
}

"""The output of our update `Track` mutation."""
type UpdateTrackPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Program` that is related to this `Track`."""
  program: Program!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Track` that was updated by this mutation."""
  track: Track
}

"""All input for the `updateYearByNodeId` mutation."""
input UpdateYearByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Year` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Year` being updated.
  """
  patch: YearPatch!
}

"""All input for the `updateYear` mutation."""
input UpdateYearInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Year` being updated.
  """
  patch: YearPatch!

  """Academic year identifier (e.g., 2024 for 2024-2025 academic year)"""
  value: Int!
}

"""The output of our update `Year` mutation."""
type UpdateYearPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Year` that was updated by this mutation."""
  year: Year
}

"""Non-sensitive service data for general user access"""
type VService {
  id: Int

  """Reads and enables pagination through a set of `Request`."""
  requestsByServiceId(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!]
  ): [Request!]!
  uid: String!

  """Reads a single `VTeacher` that is related to this `VService`."""
  vTeacherByUid: VTeacher!

  """Reads a single `Year` that is related to this `VService`."""
  year: Year!
  yearValue: Int!
}

"""
A condition to be used against `VService` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VServiceCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `yearValue` field."""
  yearValue: Int
}

"""An input for mutations affecting `VService`"""
input VServiceInput {
  id: Int
  uid: String!
  yearValue: Int!
}

"""Methods to use when ordering `VService`."""
enum VServicesOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  UID_ASC
  UID_DESC
  YEAR_VALUE_ASC
  YEAR_VALUE_DESC
}

"""Non-sensitive teacher data for general user access"""
type VTeacher {
  alias: String
  displayname: String!
  firstname: String
  lastname: String
  uid: String!

  """Reads and enables pagination through a set of `VService`."""
  vServicesByUid(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `VService`."""
    orderBy: [VServicesOrderBy!]
  ): [VService!]!
  visible: Boolean
}

"""
A condition to be used against `VTeacher` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input VTeacherCondition {
  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `displayname` field."""
  displayname: String

  """Checks for equality with the object’s `firstname` field."""
  firstname: String

  """Checks for equality with the object’s `lastname` field."""
  lastname: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `VTeacher`"""
input VTeacherInput {
  alias: String
  displayname: String!
  firstname: String
  lastname: String
  uid: String!
  visible: Boolean
}

"""Methods to use when ordering `VTeacher`."""
enum VTeachersOrderBy {
  ALIAS_ASC
  ALIAS_DESC
  DISPLAYNAME_ASC
  DISPLAYNAME_DESC
  FIRSTNAME_ASC
  FIRSTNAME_DESC
  LASTNAME_ASC
  LASTNAME_DESC
  NATURAL
  UID_ASC
  UID_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}

"""
Academic year definitions with current year designation and visibility settings
"""
type Year implements Node {
  """Reads and enables pagination through a set of `Course`."""
  coursesByYearValue(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CourseCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Course`."""
    orderBy: [CoursesOrderBy!]
  ): [Course!]!

  """Timestamp when the record was created"""
  createdAt: Datetime!

  """
  Current academic year flag. Constrained to have at most one current year
  """
  current: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Priority`."""
  prioritiesByYearValue(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PriorityCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Priority`."""
    orderBy: [PrioritiesOrderBy!]
  ): [Priority!]!

  """Reads and enables pagination through a set of `Request`."""
  requestsByYearValue(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RequestCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Request`."""
    orderBy: [RequestsOrderBy!]
  ): [Request!]!

  """Reads and enables pagination through a set of `Service`."""
  servicesByYearValue(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!]
  ): [Service!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `VService`."""
  vServicesByYearValue(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: VServiceCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `VService`."""
    orderBy: [VServicesOrderBy!]
  ): [VService!]!

  """Academic year identifier (e.g., 2024 for 2024-2025 academic year)"""
  value: Int!

  """Controls visibility of the year in the user interface and queries"""
  visible: Boolean!
}

"""
A condition to be used against `Year` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input YearCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `current` field."""
  current: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `value` field."""
  value: Int

  """Checks for equality with the object’s `visible` field."""
  visible: Boolean
}

"""An input for mutations affecting `Year`"""
input YearInput {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Current academic year flag. Constrained to have at most one current year
  """
  current: Boolean

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Academic year identifier (e.g., 2024 for 2024-2025 academic year)"""
  value: Int!

  """Controls visibility of the year in the user interface and queries"""
  visible: Boolean
}

"""Represents an update to a `Year`. Fields that are set will be updated."""
input YearPatch {
  """Timestamp when the record was created"""
  createdAt: Datetime

  """
  Current academic year flag. Constrained to have at most one current year
  """
  current: Boolean

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: Datetime

  """Academic year identifier (e.g., 2024 for 2024-2025 academic year)"""
  value: Int

  """Controls visibility of the year in the user interface and queries"""
  visible: Boolean
}

"""Methods to use when ordering `Year`."""
enum YearsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENT_ASC
  CURRENT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VALUE_ASC
  VALUE_DESC
  VISIBLE_ASC
  VISIBLE_DESC
}