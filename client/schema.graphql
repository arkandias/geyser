schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""Application settings (e.g., custom UI parameters)"""
type AppSetting {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Setting name (unique)"""
  key: String!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Setting value"""
  value: String!
}

"""
aggregated selection of "app_setting"
"""
type AppSettingAggregate {
  aggregate: AppSettingAggregateFields
  nodes: [AppSetting!]!
}

input AppSettingAggregateBoolExp {
  count: appSettingAggregateBoolExpCount
}

"""
aggregate fields of "app_setting"
"""
type AppSettingAggregateFields {
  avg: AppSettingAvgFields
  count(columns: [AppSettingSelectColumn!], distinct: Boolean): Int!
  max: AppSettingMaxFields
  min: AppSettingMinFields
  stddev: AppSettingStddevFields
  stddevPop: AppSettingStddevPopFields
  stddevSamp: AppSettingStddevSampFields
  sum: AppSettingSumFields
  varPop: AppSettingVarPopFields
  varSamp: AppSettingVarSampFields
  variance: AppSettingVarianceFields
}

"""
order by aggregate values of table "app_setting"
"""
input AppSettingAggregateOrderBy {
  avg: AppSettingAvgOrderBy
  count: OrderBy
  max: AppSettingMaxOrderBy
  min: AppSettingMinOrderBy
  stddev: AppSettingStddevOrderBy
  stddevPop: AppSettingStddevPopOrderBy
  stddevSamp: AppSettingStddevSampOrderBy
  sum: AppSettingSumOrderBy
  varPop: AppSettingVarPopOrderBy
  varSamp: AppSettingVarSampOrderBy
  variance: AppSettingVarianceOrderBy
}

"""
input type for inserting array relation for remote table "app_setting"
"""
input AppSettingArrRelInsertInput {
  data: [AppSettingInsertInput!]!

  """upsert condition"""
  onConflict: AppSettingOnConflict
}

"""aggregate avg on columns"""
type AppSettingAvgFields {
  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "app_setting"
"""
input AppSettingAvgOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "app_setting". All fields are combined with a logical 'AND'.
"""
input AppSettingBoolExp {
  _and: [AppSettingBoolExp!]
  _not: AppSettingBoolExp
  _or: [AppSettingBoolExp!]
  createdAt: TimestamptzComparisonExp
  key: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  updatedAt: TimestamptzComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "app_setting"
"""
enum AppSettingConstraint {
  """
  unique or primary key constraint on columns "key", "oid"
  """
  app_setting_pkey
}

"""
input type for incrementing numeric columns in table "app_setting"
"""
input AppSettingIncInput {
  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "app_setting"
"""
input AppSettingInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Setting name (unique)"""
  key: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Setting value"""
  value: String
}

"""aggregate max on columns"""
type AppSettingMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Setting name (unique)"""
  key: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Setting value"""
  value: String
}

"""
order by max() on columns of table "app_setting"
"""
input AppSettingMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Setting name (unique)"""
  key: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Setting value"""
  value: OrderBy
}

"""aggregate min on columns"""
type AppSettingMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Setting name (unique)"""
  key: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Setting value"""
  value: String
}

"""
order by min() on columns of table "app_setting"
"""
input AppSettingMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Setting name (unique)"""
  key: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Setting value"""
  value: OrderBy
}

"""
response of any mutation on the table "app_setting"
"""
type AppSettingMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [AppSetting!]!
}

"""
on_conflict condition type for table "app_setting"
"""
input AppSettingOnConflict {
  constraint: AppSettingConstraint!
  updateColumns: [AppSettingUpdateColumn!]! = []
  where: AppSettingBoolExp
}

"""Ordering options when selecting data from "app_setting"."""
input AppSettingOrderBy {
  createdAt: OrderBy
  key: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  updatedAt: OrderBy
  value: OrderBy
}

"""primary key columns input for table: app_setting"""
input AppSettingPkColumnsInput {
  """Setting name (unique)"""
  key: String!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "app_setting"
"""
enum AppSettingSelectColumn {
  """column name"""
  createdAt

  """column name"""
  key

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value
}

"""
input type for updating data in table "app_setting"
"""
input AppSettingSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Setting name (unique)"""
  key: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Setting value"""
  value: String
}

"""aggregate stddev on columns"""
type AppSettingStddevFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "app_setting"
"""
input AppSettingStddevOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type AppSettingStddevPopFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "app_setting"
"""
input AppSettingStddevPopOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type AppSettingStddevSampFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "app_setting"
"""
input AppSettingStddevSampOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "app_setting"
"""
input AppSettingStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: AppSettingStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input AppSettingStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Setting name (unique)"""
  key: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Setting value"""
  value: String
}

"""aggregate sum on columns"""
type AppSettingSumFields {
  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "app_setting"
"""
input AppSettingSumOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "app_setting"
"""
enum AppSettingUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  key

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value
}

input AppSettingUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: AppSettingIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: AppSettingSetInput

  """filter the rows which have to be updated"""
  where: AppSettingBoolExp!
}

"""aggregate varPop on columns"""
type AppSettingVarPopFields {
  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "app_setting"
"""
input AppSettingVarPopOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type AppSettingVarSampFields {
  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "app_setting"
"""
input AppSettingVarSampOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type AppSettingVarianceFields {
  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "app_setting"
"""
input AppSettingVarianceOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""Academic coordination assignments at program, track, or course level"""
type Coordination {
  """Additional information about this coordination"""
  comment: String

  """An object relationship"""
  course: Course

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  program: Program

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """An object relationship"""
  teacher: Teacher!

  """Teacher reference"""
  teacherId: Int!

  """An object relationship"""
  track: Track

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "coordination"
"""
type CoordinationAggregate {
  aggregate: CoordinationAggregateFields
  nodes: [Coordination!]!
}

input CoordinationAggregateBoolExp {
  count: coordinationAggregateBoolExpCount
}

"""
aggregate fields of "coordination"
"""
type CoordinationAggregateFields {
  avg: CoordinationAvgFields
  count(columns: [CoordinationSelectColumn!], distinct: Boolean): Int!
  max: CoordinationMaxFields
  min: CoordinationMinFields
  stddev: CoordinationStddevFields
  stddevPop: CoordinationStddevPopFields
  stddevSamp: CoordinationStddevSampFields
  sum: CoordinationSumFields
  varPop: CoordinationVarPopFields
  varSamp: CoordinationVarSampFields
  variance: CoordinationVarianceFields
}

"""
order by aggregate values of table "coordination"
"""
input CoordinationAggregateOrderBy {
  avg: CoordinationAvgOrderBy
  count: OrderBy
  max: CoordinationMaxOrderBy
  min: CoordinationMinOrderBy
  stddev: CoordinationStddevOrderBy
  stddevPop: CoordinationStddevPopOrderBy
  stddevSamp: CoordinationStddevSampOrderBy
  sum: CoordinationSumOrderBy
  varPop: CoordinationVarPopOrderBy
  varSamp: CoordinationVarSampOrderBy
  variance: CoordinationVarianceOrderBy
}

"""
input type for inserting array relation for remote table "coordination"
"""
input CoordinationArrRelInsertInput {
  data: [CoordinationInsertInput!]!

  """upsert condition"""
  onConflict: CoordinationOnConflict
}

"""aggregate avg on columns"""
type CoordinationAvgFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by avg() on columns of table "coordination"
"""
input CoordinationAvgOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""
Boolean expression to filter rows from the table "coordination". All fields are combined with a logical 'AND'.
"""
input CoordinationBoolExp {
  _and: [CoordinationBoolExp!]
  _not: CoordinationBoolExp
  _or: [CoordinationBoolExp!]
  comment: StringComparisonExp
  course: CourseBoolExp
  courseId: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  program: ProgramBoolExp
  programId: IntComparisonExp
  teacher: TeacherBoolExp
  teacherId: IntComparisonExp
  track: TrackBoolExp
  trackId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "coordination"
"""
enum CoordinationConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  coordination_id_key

  """
  unique or primary key constraint on columns "teacher_id", "track_id", "course_id", "program_id", "oid"
  """
  coordination_oid_teacher_id_course_id_track_id_program_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  coordination_pkey
}

"""
input type for incrementing numeric columns in table "coordination"
"""
input CoordinationIncInput {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int
}

"""
input type for inserting data into table "coordination"
"""
input CoordinationInsertInput {
  """Additional information about this coordination"""
  comment: String
  course: CourseObjRelInsertInput

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  program: ProgramObjRelInsertInput

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int
  teacher: TeacherObjRelInsertInput

  """Teacher reference"""
  teacherId: Int
  track: TrackObjRelInsertInput

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type CoordinationMaxFields {
  """Additional information about this coordination"""
  comment: String

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "coordination"
"""
input CoordinationMaxOrderBy {
  """Additional information about this coordination"""
  comment: OrderBy

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type CoordinationMinFields {
  """Additional information about this coordination"""
  comment: String

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "coordination"
"""
input CoordinationMinOrderBy {
  """Additional information about this coordination"""
  comment: OrderBy

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "coordination"
"""
type CoordinationMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Coordination!]!
}

"""
on_conflict condition type for table "coordination"
"""
input CoordinationOnConflict {
  constraint: CoordinationConstraint!
  updateColumns: [CoordinationUpdateColumn!]! = []
  where: CoordinationBoolExp
}

"""Ordering options when selecting data from "coordination"."""
input CoordinationOrderBy {
  comment: OrderBy
  course: CourseOrderBy
  courseId: OrderBy
  createdAt: OrderBy
  id: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  program: ProgramOrderBy
  programId: OrderBy
  teacher: TeacherOrderBy
  teacherId: OrderBy
  track: TrackOrderBy
  trackId: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: coordination"""
input CoordinationPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "coordination"
"""
enum CoordinationSelectColumn {
  """column name"""
  comment

  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  programId

  """column name"""
  teacherId

  """column name"""
  trackId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "coordination"
"""
input CoordinationSetInput {
  """Additional information about this coordination"""
  comment: String

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type CoordinationStddevFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by stddev() on columns of table "coordination"
"""
input CoordinationStddevOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""aggregate stddevPop on columns"""
type CoordinationStddevPopFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by stddevPop() on columns of table "coordination"
"""
input CoordinationStddevPopOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""aggregate stddevSamp on columns"""
type CoordinationStddevSampFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by stddevSamp() on columns of table "coordination"
"""
input CoordinationStddevSampOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""
Streaming cursor of the table "coordination"
"""
input CoordinationStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CoordinationStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CoordinationStreamCursorValueInput {
  """Additional information about this coordination"""
  comment: String

  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type CoordinationSumFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Int

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Int

  """Teacher reference"""
  teacherId: Int

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Int
}

"""
order by sum() on columns of table "coordination"
"""
input CoordinationSumOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""
update columns of table "coordination"
"""
enum CoordinationUpdateColumn {
  """column name"""
  comment

  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  oid

  """column name"""
  programId

  """column name"""
  teacherId

  """column name"""
  trackId

  """column name"""
  updatedAt
}

input CoordinationUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CoordinationIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CoordinationSetInput

  """filter the rows which have to be updated"""
  where: CoordinationBoolExp!
}

"""aggregate varPop on columns"""
type CoordinationVarPopFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by varPop() on columns of table "coordination"
"""
input CoordinationVarPopOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""aggregate varSamp on columns"""
type CoordinationVarSampFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by varSamp() on columns of table "coordination"
"""
input CoordinationVarSampOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""aggregate variance on columns"""
type CoordinationVarianceFields {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: Float

  """Teacher reference"""
  teacherId: Float

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: Float
}

"""
order by variance() on columns of table "coordination"
"""
input CoordinationVarianceOrderBy {
  """Course reference (mutually exclusive with program_id and track_id)"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference (mutually exclusive with track_id and course_id)"""
  programId: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Track reference (mutually exclusive with program_id and course_id)"""
  trackId: OrderBy
}

"""Course definitions and configurations"""
type Course {
  """An array relationship"""
  coordinations(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """An aggregate relationship"""
  coordinationsAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Computed study year (1-3) based on semester"""
  cycleYear: Int!

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int!

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Int

  """Base number of teaching hours per group"""
  hours: Float!

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Int

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Int

  """Unique identifier"""
  id: Int!

  """Full name"""
  name: String!

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  priorities(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """An aggregate relationship"""
  prioritiesAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """An object relationship"""
  program: Program!

  """Program reference"""
  programId: Int!

  """An array relationship"""
  requests(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """An aggregate relationship"""
  requestsAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """Academic semester"""
  semester: Int!

  """An object relationship"""
  track: Track

  """Optional track reference"""
  trackId: Int

  """An object relationship"""
  type: CourseType!

  """Course type reference"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Controls visibility to teachers"""
  visible: Boolean!

  """Academic year reference"""
  year: Int!

  """An object relationship"""
  yearByYear: Year!
}

"""
aggregated selection of "course"
"""
type CourseAggregate {
  aggregate: CourseAggregateFields
  nodes: [Course!]!
}

input CourseAggregateBoolExp {
  bool_and: courseAggregateBoolExpBool_and
  bool_or: courseAggregateBoolExpBool_or
  count: courseAggregateBoolExpCount
}

"""
aggregate fields of "course"
"""
type CourseAggregateFields {
  avg: CourseAvgFields
  count(columns: [CourseSelectColumn!], distinct: Boolean): Int!
  max: CourseMaxFields
  min: CourseMinFields
  stddev: CourseStddevFields
  stddevPop: CourseStddevPopFields
  stddevSamp: CourseStddevSampFields
  sum: CourseSumFields
  varPop: CourseVarPopFields
  varSamp: CourseVarSampFields
  variance: CourseVarianceFields
}

"""
order by aggregate values of table "course"
"""
input CourseAggregateOrderBy {
  avg: CourseAvgOrderBy
  count: OrderBy
  max: CourseMaxOrderBy
  min: CourseMinOrderBy
  stddev: CourseStddevOrderBy
  stddevPop: CourseStddevPopOrderBy
  stddevSamp: CourseStddevSampOrderBy
  sum: CourseSumOrderBy
  varPop: CourseVarPopOrderBy
  varSamp: CourseVarSampOrderBy
  variance: CourseVarianceOrderBy
}

"""
input type for inserting array relation for remote table "course"
"""
input CourseArrRelInsertInput {
  data: [CourseInsertInput!]!

  """upsert condition"""
  onConflict: CourseOnConflict
}

"""aggregate avg on columns"""
type CourseAvgFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by avg() on columns of table "course"
"""
input CourseAvgOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Boolean expression to filter rows from the table "course". All fields are combined with a logical 'AND'.
"""
input CourseBoolExp {
  _and: [CourseBoolExp!]
  _not: CourseBoolExp
  _or: [CourseBoolExp!]
  coordinations: CoordinationBoolExp
  coordinationsAggregate: CoordinationAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  cycleYear: IntComparisonExp
  description: StringComparisonExp
  ensIdImport: StringComparisonExp
  formationIdImport: StringComparisonExp
  groups: IntComparisonExp
  groupsAdjusted: IntComparisonExp
  groupsEffective: IntComparisonExp
  hours: FloatComparisonExp
  hoursAdjusted: FloatComparisonExp
  hoursEffective: IntComparisonExp
  hoursEffectiveTotal: IntComparisonExp
  id: IntComparisonExp
  name: StringComparisonExp
  nameDisplay: StringComparisonExp
  nameShort: StringComparisonExp
  nomImport: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  priorities: PriorityBoolExp
  prioritiesAggregate: PriorityAggregateBoolExp
  priorityRule: IntComparisonExp
  program: ProgramBoolExp
  programId: IntComparisonExp
  requests: RequestBoolExp
  requestsAggregate: RequestAggregateBoolExp
  semester: IntComparisonExp
  track: TrackBoolExp
  trackId: IntComparisonExp
  type: CourseTypeBoolExp
  typeId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
  visible: BooleanComparisonExp
  year: IntComparisonExp
  yearByYear: YearBoolExp
}

"""
unique or primary key constraints on table "course"
"""
enum CourseConstraint {
  """
  unique or primary key constraint on columns "ens_id_import"
  """
  course_ens_id_import_key

  """
  unique or primary key constraint on columns "id"
  """
  course_id_key

  """
  unique or primary key constraint on columns "id", "oid", "year"
  """
  course_oid_id_year_key

  """
  unique or primary key constraint on columns "track_id", "semester", "program_id", "name", "oid", "year", "type_id"
  """
  course_oid_year_program_id_track_id_name_semester_type_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  course_pkey
}

"""
input type for incrementing numeric columns in table "course"
"""
input CourseIncInput {
  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """Academic year reference"""
  year: Int
}

"""
input type for inserting data into table "course"
"""
input CourseInsertInput {
  coordinations: CoordinationArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """Full name"""
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  priorities: PriorityArrRelInsertInput

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int
  program: ProgramObjRelInsertInput

  """Program reference"""
  programId: Int
  requests: RequestArrRelInsertInput

  """Academic semester"""
  semester: Int
  track: TrackObjRelInsertInput

  """Optional track reference"""
  trackId: Int
  type: CourseTypeObjRelInsertInput

  """Course type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean

  """Academic year reference"""
  year: Int
  yearByYear: YearObjRelInsertInput
}

"""aggregate max on columns"""
type CourseMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Int

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Int

  """Unique identifier"""
  id: Int

  """Full name"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by max() on columns of table "course"
"""
input CourseMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Optional description"""
  description: OrderBy
  ensIdImport: OrderBy
  formationIdImport: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate min on columns"""
type CourseMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Int

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Int

  """Unique identifier"""
  id: Int

  """Full name"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by min() on columns of table "course"
"""
input CourseMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Optional description"""
  description: OrderBy
  ensIdImport: OrderBy
  formationIdImport: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
response of any mutation on the table "course"
"""
type CourseMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Course!]!
}

"""
input type for inserting object relation for remote table "course"
"""
input CourseObjRelInsertInput {
  data: CourseInsertInput!

  """upsert condition"""
  onConflict: CourseOnConflict
}

"""
on_conflict condition type for table "course"
"""
input CourseOnConflict {
  constraint: CourseConstraint!
  updateColumns: [CourseUpdateColumn!]! = []
  where: CourseBoolExp
}

"""Ordering options when selecting data from "course"."""
input CourseOrderBy {
  coordinationsAggregate: CoordinationAggregateOrderBy
  createdAt: OrderBy
  cycleYear: OrderBy
  description: OrderBy
  ensIdImport: OrderBy
  formationIdImport: OrderBy
  groups: OrderBy
  groupsAdjusted: OrderBy
  groupsEffective: OrderBy
  hours: OrderBy
  hoursAdjusted: OrderBy
  hoursEffective: OrderBy
  hoursEffectiveTotal: OrderBy
  id: OrderBy
  name: OrderBy
  nameDisplay: OrderBy
  nameShort: OrderBy
  nomImport: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  prioritiesAggregate: PriorityAggregateOrderBy
  priorityRule: OrderBy
  program: ProgramOrderBy
  programId: OrderBy
  requestsAggregate: RequestAggregateOrderBy
  semester: OrderBy
  track: TrackOrderBy
  trackId: OrderBy
  type: CourseTypeOrderBy
  typeId: OrderBy
  updatedAt: OrderBy
  visible: OrderBy
  year: OrderBy
  yearByYear: YearOrderBy
}

"""primary key columns input for table: course"""
input CoursePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "course"
"""
enum CourseSelectColumn {
  """column name"""
  createdAt

  """column name"""
  cycleYear

  """column name"""
  description

  """column name"""
  ensIdImport

  """column name"""
  formationIdImport

  """column name"""
  groups

  """column name"""
  groupsAdjusted

  """column name"""
  groupsEffective

  """column name"""
  hours

  """column name"""
  hoursAdjusted

  """column name"""
  hoursEffective

  """column name"""
  hoursEffectiveTotal

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nameDisplay

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  priorityRule

  """column name"""
  programId

  """column name"""
  semester

  """column name"""
  trackId

  """column name"""
  typeId

  """column name"""
  updatedAt

  """column name"""
  visible

  """column name"""
  year
}

"""
select "courseAggregateBoolExpBool_andArgumentsColumns" columns of table "course"
"""
enum CourseSelectColumnCourseAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  visible
}

"""
select "courseAggregateBoolExpBool_orArgumentsColumns" columns of table "course"
"""
enum CourseSelectColumnCourseAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  visible
}

"""
input type for updating data in table "course"
"""
input CourseSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """Full name"""
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean

  """Academic year reference"""
  year: Int
}

"""aggregate stddev on columns"""
type CourseStddevFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddev() on columns of table "course"
"""
input CourseStddevOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevPop on columns"""
type CourseStddevPopFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevPop() on columns of table "course"
"""
input CourseStddevPopOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevSamp on columns"""
type CourseStddevSampFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevSamp() on columns of table "course"
"""
input CourseStddevSampOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Streaming cursor of the table "course"
"""
input CourseStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CourseStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CourseStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Optional description"""
  description: String
  ensIdImport: String
  formationIdImport: String

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Int

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Int

  """Unique identifier"""
  id: Int

  """Full name"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean

  """Academic year reference"""
  year: Int
}

"""aggregate sum on columns"""
type CourseSumFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Int

  """Base number of groups"""
  groups: Int

  """Modified number of groups, if different from base"""
  groupsAdjusted: Int

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Int

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Int

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Int

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Int

  """Program reference"""
  programId: Int

  """Academic semester"""
  semester: Int

  """Optional track reference"""
  trackId: Int

  """Course type reference"""
  typeId: Int

  """Academic year reference"""
  year: Int
}

"""
order by sum() on columns of table "course"
"""
input CourseSumOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""Categories of courses"""
type CourseType {
  """Workload multiplier for service hours calculations"""
  coefficient: Float!

  """An array relationship"""
  courses(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """An aggregate relationship"""
  coursesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int!

  """Course type name (unique)"""
  label: String!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "course_type"
"""
type CourseTypeAggregate {
  aggregate: CourseTypeAggregateFields
  nodes: [CourseType!]!
}

input CourseTypeAggregateBoolExp {
  count: courseTypeAggregateBoolExpCount
}

"""
aggregate fields of "course_type"
"""
type CourseTypeAggregateFields {
  avg: CourseTypeAvgFields
  count(columns: [CourseTypeSelectColumn!], distinct: Boolean): Int!
  max: CourseTypeMaxFields
  min: CourseTypeMinFields
  stddev: CourseTypeStddevFields
  stddevPop: CourseTypeStddevPopFields
  stddevSamp: CourseTypeStddevSampFields
  sum: CourseTypeSumFields
  varPop: CourseTypeVarPopFields
  varSamp: CourseTypeVarSampFields
  variance: CourseTypeVarianceFields
}

"""
order by aggregate values of table "course_type"
"""
input CourseTypeAggregateOrderBy {
  avg: CourseTypeAvgOrderBy
  count: OrderBy
  max: CourseTypeMaxOrderBy
  min: CourseTypeMinOrderBy
  stddev: CourseTypeStddevOrderBy
  stddevPop: CourseTypeStddevPopOrderBy
  stddevSamp: CourseTypeStddevSampOrderBy
  sum: CourseTypeSumOrderBy
  varPop: CourseTypeVarPopOrderBy
  varSamp: CourseTypeVarSampOrderBy
  variance: CourseTypeVarianceOrderBy
}

"""
input type for inserting array relation for remote table "course_type"
"""
input CourseTypeArrRelInsertInput {
  data: [CourseTypeInsertInput!]!

  """upsert condition"""
  onConflict: CourseTypeOnConflict
}

"""aggregate avg on columns"""
type CourseTypeAvgFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "course_type"
"""
input CourseTypeAvgOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "course_type". All fields are combined with a logical 'AND'.
"""
input CourseTypeBoolExp {
  _and: [CourseTypeBoolExp!]
  _not: CourseTypeBoolExp
  _or: [CourseTypeBoolExp!]
  coefficient: FloatComparisonExp
  courses: CourseBoolExp
  coursesAggregate: CourseAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  description: StringComparisonExp
  id: IntComparisonExp
  label: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "course_type"
"""
enum CourseTypeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  course_type_id_key

  """
  unique or primary key constraint on columns "label", "oid"
  """
  course_type_oid_label_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  course_type_pkey
}

"""
input type for incrementing numeric columns in table "course_type"
"""
input CourseTypeIncInput {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "course_type"
"""
input CourseTypeInsertInput {
  """Workload multiplier for service hours calculations"""
  coefficient: Float
  courses: CourseArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Course type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type CourseTypeMaxFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Course type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "course_type"
"""
input CourseTypeMaxOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Course type name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type CourseTypeMinFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Course type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "course_type"
"""
input CourseTypeMinOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Course type name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "course_type"
"""
type CourseTypeMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [CourseType!]!
}

"""
input type for inserting object relation for remote table "course_type"
"""
input CourseTypeObjRelInsertInput {
  data: CourseTypeInsertInput!

  """upsert condition"""
  onConflict: CourseTypeOnConflict
}

"""
on_conflict condition type for table "course_type"
"""
input CourseTypeOnConflict {
  constraint: CourseTypeConstraint!
  updateColumns: [CourseTypeUpdateColumn!]! = []
  where: CourseTypeBoolExp
}

"""Ordering options when selecting data from "course_type"."""
input CourseTypeOrderBy {
  coefficient: OrderBy
  coursesAggregate: CourseAggregateOrderBy
  createdAt: OrderBy
  description: OrderBy
  id: OrderBy
  label: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: course_type"""
input CourseTypePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "course_type"
"""
enum CourseTypeSelectColumn {
  """column name"""
  coefficient

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

"""
input type for updating data in table "course_type"
"""
input CourseTypeSetInput {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Course type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type CourseTypeStddevFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "course_type"
"""
input CourseTypeStddevOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type CourseTypeStddevPopFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "course_type"
"""
input CourseTypeStddevPopOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type CourseTypeStddevSampFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "course_type"
"""
input CourseTypeStddevSampOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "course_type"
"""
input CourseTypeStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CourseTypeStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CourseTypeStreamCursorValueInput {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Course type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type CourseTypeSumFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "course_type"
"""
input CourseTypeSumOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "course_type"
"""
enum CourseTypeUpdateColumn {
  """column name"""
  coefficient

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

input CourseTypeUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CourseTypeIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CourseTypeSetInput

  """filter the rows which have to be updated"""
  where: CourseTypeBoolExp!
}

"""aggregate varPop on columns"""
type CourseTypeVarPopFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "course_type"
"""
input CourseTypeVarPopOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type CourseTypeVarSampFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "course_type"
"""
input CourseTypeVarSampOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type CourseTypeVarianceFields {
  """Workload multiplier for service hours calculations"""
  coefficient: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "course_type"
"""
input CourseTypeVarianceOrderBy {
  """Workload multiplier for service hours calculations"""
  coefficient: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "course"
"""
enum CourseUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  ensIdImport

  """column name"""
  formationIdImport

  """column name"""
  groups

  """column name"""
  groupsAdjusted

  """column name"""
  hours

  """column name"""
  hoursAdjusted

  """column name"""
  name

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  priorityRule

  """column name"""
  programId

  """column name"""
  semester

  """column name"""
  trackId

  """column name"""
  typeId

  """column name"""
  updatedAt

  """column name"""
  visible

  """column name"""
  year
}

input CourseUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CourseIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CourseSetInput

  """filter the rows which have to be updated"""
  where: CourseBoolExp!
}

"""aggregate varPop on columns"""
type CourseVarPopFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varPop() on columns of table "course"
"""
input CourseVarPopOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate varSamp on columns"""
type CourseVarSampFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varSamp() on columns of table "course"
"""
input CourseVarSampOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate variance on columns"""
type CourseVarianceFields {
  """Computed study year (1-3) based on semester"""
  cycleYear: Float

  """Base number of groups"""
  groups: Float

  """Modified number of groups, if different from base"""
  groupsAdjusted: Float

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: Float

  """Base number of teaching hours per group"""
  hours: Float

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: Float

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: Float

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: Float

  """Program reference"""
  programId: Float

  """Academic semester"""
  semester: Float

  """Optional track reference"""
  trackId: Float

  """Course type reference"""
  typeId: Float

  """Academic year reference"""
  year: Float
}

"""
order by variance() on columns of table "course"
"""
input CourseVarianceOrderBy {
  """Computed study year (1-3) based on semester"""
  cycleYear: OrderBy

  """Base number of groups"""
  groups: OrderBy

  """Modified number of groups, if different from base"""
  groupsAdjusted: OrderBy

  """Actual number of groups, defaulting to base if no adjustment"""
  groupsEffective: OrderBy

  """Base number of teaching hours per group"""
  hours: OrderBy

  """Modified number of teaching hours per group, if different from base"""
  hoursAdjusted: OrderBy

  """
  Actual number of teaching hours per group, defaulting to base if no adjustment
  """
  hoursEffective: OrderBy

  """Effective teaching hours per group times effective number of groups"""
  hoursEffectiveTotal: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Priority duration in years (1=none, 0=permanent, NULL=disabled)"""
  priorityRule: OrderBy

  """Program reference"""
  programId: OrderBy

  """Academic semester"""
  semester: OrderBy

  """Optional track reference"""
  trackId: OrderBy

  """Course type reference"""
  typeId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""Current active phase for each organization"""
type CurrentPhase {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  phase: Phase!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Active phase reference"""
  value: PhaseEnum!
}

"""
aggregated selection of "current_phase"
"""
type CurrentPhaseAggregate {
  aggregate: CurrentPhaseAggregateFields
  nodes: [CurrentPhase!]!
}

input CurrentPhaseAggregateBoolExp {
  count: currentPhaseAggregateBoolExpCount
}

"""
aggregate fields of "current_phase"
"""
type CurrentPhaseAggregateFields {
  avg: CurrentPhaseAvgFields
  count(columns: [CurrentPhaseSelectColumn!], distinct: Boolean): Int!
  max: CurrentPhaseMaxFields
  min: CurrentPhaseMinFields
  stddev: CurrentPhaseStddevFields
  stddevPop: CurrentPhaseStddevPopFields
  stddevSamp: CurrentPhaseStddevSampFields
  sum: CurrentPhaseSumFields
  varPop: CurrentPhaseVarPopFields
  varSamp: CurrentPhaseVarSampFields
  variance: CurrentPhaseVarianceFields
}

"""
order by aggregate values of table "current_phase"
"""
input CurrentPhaseAggregateOrderBy {
  avg: CurrentPhaseAvgOrderBy
  count: OrderBy
  max: CurrentPhaseMaxOrderBy
  min: CurrentPhaseMinOrderBy
  stddev: CurrentPhaseStddevOrderBy
  stddevPop: CurrentPhaseStddevPopOrderBy
  stddevSamp: CurrentPhaseStddevSampOrderBy
  sum: CurrentPhaseSumOrderBy
  varPop: CurrentPhaseVarPopOrderBy
  varSamp: CurrentPhaseVarSampOrderBy
  variance: CurrentPhaseVarianceOrderBy
}

"""
input type for inserting array relation for remote table "current_phase"
"""
input CurrentPhaseArrRelInsertInput {
  data: [CurrentPhaseInsertInput!]!

  """upsert condition"""
  onConflict: CurrentPhaseOnConflict
}

"""aggregate avg on columns"""
type CurrentPhaseAvgFields {
  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "current_phase"
"""
input CurrentPhaseAvgOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "current_phase". All fields are combined with a logical 'AND'.
"""
input CurrentPhaseBoolExp {
  _and: [CurrentPhaseBoolExp!]
  _not: CurrentPhaseBoolExp
  _or: [CurrentPhaseBoolExp!]
  createdAt: TimestamptzComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  phase: PhaseBoolExp
  updatedAt: TimestamptzComparisonExp
  value: PhaseEnumComparisonExp
}

"""
unique or primary key constraints on table "current_phase"
"""
enum CurrentPhaseConstraint {
  """
  unique or primary key constraint on columns "oid"
  """
  current_phase_pkey
}

"""
input type for incrementing numeric columns in table "current_phase"
"""
input CurrentPhaseIncInput {
  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "current_phase"
"""
input CurrentPhaseInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  phase: PhaseObjRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Active phase reference"""
  value: PhaseEnum
}

"""aggregate max on columns"""
type CurrentPhaseMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "current_phase"
"""
input CurrentPhaseMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type CurrentPhaseMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "current_phase"
"""
input CurrentPhaseMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "current_phase"
"""
type CurrentPhaseMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [CurrentPhase!]!
}

"""
on_conflict condition type for table "current_phase"
"""
input CurrentPhaseOnConflict {
  constraint: CurrentPhaseConstraint!
  updateColumns: [CurrentPhaseUpdateColumn!]! = []
  where: CurrentPhaseBoolExp
}

"""Ordering options when selecting data from "current_phase"."""
input CurrentPhaseOrderBy {
  createdAt: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  phase: PhaseOrderBy
  updatedAt: OrderBy
  value: OrderBy
}

"""primary key columns input for table: current_phase"""
input CurrentPhasePkColumnsInput {
  """Organization reference"""
  oid: Int!
}

"""
select columns of table "current_phase"
"""
enum CurrentPhaseSelectColumn {
  """column name"""
  createdAt

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value
}

"""
input type for updating data in table "current_phase"
"""
input CurrentPhaseSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Active phase reference"""
  value: PhaseEnum
}

"""aggregate stddev on columns"""
type CurrentPhaseStddevFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "current_phase"
"""
input CurrentPhaseStddevOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type CurrentPhaseStddevPopFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "current_phase"
"""
input CurrentPhaseStddevPopOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type CurrentPhaseStddevSampFields {
  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "current_phase"
"""
input CurrentPhaseStddevSampOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "current_phase"
"""
input CurrentPhaseStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: CurrentPhaseStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input CurrentPhaseStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Active phase reference"""
  value: PhaseEnum
}

"""aggregate sum on columns"""
type CurrentPhaseSumFields {
  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "current_phase"
"""
input CurrentPhaseSumOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "current_phase"
"""
enum CurrentPhaseUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value
}

input CurrentPhaseUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: CurrentPhaseIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: CurrentPhaseSetInput

  """filter the rows which have to be updated"""
  where: CurrentPhaseBoolExp!
}

"""aggregate varPop on columns"""
type CurrentPhaseVarPopFields {
  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "current_phase"
"""
input CurrentPhaseVarPopOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type CurrentPhaseVarSampFields {
  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "current_phase"
"""
input CurrentPhaseVarSampOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type CurrentPhaseVarianceFields {
  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "current_phase"
"""
input CurrentPhaseVarianceOrderBy {
  """Organization reference"""
  oid: OrderBy
}

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""Academic degrees offered by the institution"""
type Degree {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String!

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  programs(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): [Program!]!

  """An aggregate relationship"""
  programsAggregate(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): ProgramAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Controls visibility to teachers"""
  visible: Boolean!
}

"""
aggregated selection of "degree"
"""
type DegreeAggregate {
  aggregate: DegreeAggregateFields
  nodes: [Degree!]!
}

input DegreeAggregateBoolExp {
  bool_and: degreeAggregateBoolExpBool_and
  bool_or: degreeAggregateBoolExpBool_or
  count: degreeAggregateBoolExpCount
}

"""
aggregate fields of "degree"
"""
type DegreeAggregateFields {
  avg: DegreeAvgFields
  count(columns: [DegreeSelectColumn!], distinct: Boolean): Int!
  max: DegreeMaxFields
  min: DegreeMinFields
  stddev: DegreeStddevFields
  stddevPop: DegreeStddevPopFields
  stddevSamp: DegreeStddevSampFields
  sum: DegreeSumFields
  varPop: DegreeVarPopFields
  varSamp: DegreeVarSampFields
  variance: DegreeVarianceFields
}

"""
order by aggregate values of table "degree"
"""
input DegreeAggregateOrderBy {
  avg: DegreeAvgOrderBy
  count: OrderBy
  max: DegreeMaxOrderBy
  min: DegreeMinOrderBy
  stddev: DegreeStddevOrderBy
  stddevPop: DegreeStddevPopOrderBy
  stddevSamp: DegreeStddevSampOrderBy
  sum: DegreeSumOrderBy
  varPop: DegreeVarPopOrderBy
  varSamp: DegreeVarSampOrderBy
  variance: DegreeVarianceOrderBy
}

"""
input type for inserting array relation for remote table "degree"
"""
input DegreeArrRelInsertInput {
  data: [DegreeInsertInput!]!

  """upsert condition"""
  onConflict: DegreeOnConflict
}

"""aggregate avg on columns"""
type DegreeAvgFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "degree"
"""
input DegreeAvgOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "degree". All fields are combined with a logical 'AND'.
"""
input DegreeBoolExp {
  _and: [DegreeBoolExp!]
  _not: DegreeBoolExp
  _or: [DegreeBoolExp!]
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  name: StringComparisonExp
  nameDisplay: StringComparisonExp
  nameShort: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  programs: ProgramBoolExp
  programsAggregate: ProgramAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "degree"
"""
enum DegreeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  degree_id_key

  """
  unique or primary key constraint on columns "name", "oid"
  """
  degree_oid_name_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  degree_pkey
}

"""
input type for incrementing numeric columns in table "degree"
"""
input DegreeIncInput {
  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "degree"
"""
input DegreeInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  programs: ProgramArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate max on columns"""
type DegreeMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "degree"
"""
input DegreeMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name, unique (e.g., Bachelor of Science)"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name (e.g., BSc)"""
  nameShort: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type DegreeMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "degree"
"""
input DegreeMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name, unique (e.g., Bachelor of Science)"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name (e.g., BSc)"""
  nameShort: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "degree"
"""
type DegreeMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Degree!]!
}

"""
input type for inserting object relation for remote table "degree"
"""
input DegreeObjRelInsertInput {
  data: DegreeInsertInput!

  """upsert condition"""
  onConflict: DegreeOnConflict
}

"""
on_conflict condition type for table "degree"
"""
input DegreeOnConflict {
  constraint: DegreeConstraint!
  updateColumns: [DegreeUpdateColumn!]! = []
  where: DegreeBoolExp
}

"""Ordering options when selecting data from "degree"."""
input DegreeOrderBy {
  createdAt: OrderBy
  id: OrderBy
  name: OrderBy
  nameDisplay: OrderBy
  nameShort: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  programsAggregate: ProgramAggregateOrderBy
  updatedAt: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: degree"""
input DegreePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "degree"
"""
enum DegreeSelectColumn {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nameDisplay

  """column name"""
  nameShort

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  visible
}

"""
select "degreeAggregateBoolExpBool_andArgumentsColumns" columns of table "degree"
"""
enum DegreeSelectColumnDegreeAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  visible
}

"""
select "degreeAggregateBoolExpBool_orArgumentsColumns" columns of table "degree"
"""
enum DegreeSelectColumnDegreeAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  visible
}

"""
input type for updating data in table "degree"
"""
input DegreeSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate stddev on columns"""
type DegreeStddevFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "degree"
"""
input DegreeStddevOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type DegreeStddevPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "degree"
"""
input DegreeStddevPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type DegreeStddevSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "degree"
"""
input DegreeStddevSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "degree"
"""
input DegreeStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: DegreeStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input DegreeStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Full name, unique (e.g., Bachelor of Science)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name (e.g., BSc)"""
  nameShort: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate sum on columns"""
type DegreeSumFields {
  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "degree"
"""
input DegreeSumOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "degree"
"""
enum DegreeUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  name

  """column name"""
  nameShort

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  visible
}

input DegreeUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: DegreeIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: DegreeSetInput

  """filter the rows which have to be updated"""
  where: DegreeBoolExp!
}

"""aggregate varPop on columns"""
type DegreeVarPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "degree"
"""
input DegreeVarPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type DegreeVarSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "degree"
"""
input DegreeVarSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type DegreeVarianceFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "degree"
"""
input DegreeVarianceOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""Locales implemented in the web client"""
type Locale {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String!
}

"""
aggregated selection of "locale"
"""
type LocaleAggregate {
  aggregate: LocaleAggregateFields
  nodes: [Locale!]!
}

"""
aggregate fields of "locale"
"""
type LocaleAggregateFields {
  count(columns: [LocaleSelectColumn!], distinct: Boolean): Int!
  max: LocaleMaxFields
  min: LocaleMinFields
}

"""
Boolean expression to filter rows from the table "locale". All fields are combined with a logical 'AND'.
"""
input LocaleBoolExp {
  _and: [LocaleBoolExp!]
  _not: LocaleBoolExp
  _or: [LocaleBoolExp!]
  description: StringComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "locale"
"""
enum LocaleConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  locale_pkey
}

enum LocaleEnum {
  """English"""
  EN

  """French"""
  FR
}

"""
Boolean expression to compare columns of type "LocaleEnum". All fields are combined with logical 'AND'.
"""
input LocaleEnumComparisonExp {
  _eq: LocaleEnum
  _in: [LocaleEnum!]
  _isNull: Boolean
  _neq: LocaleEnum
  _nin: [LocaleEnum!]
}

"""
input type for inserting data into table "locale"
"""
input LocaleInsertInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate max on columns"""
type LocaleMaxFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate min on columns"""
type LocaleMinFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
response of any mutation on the table "locale"
"""
type LocaleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Locale!]!
}

"""
on_conflict condition type for table "locale"
"""
input LocaleOnConflict {
  constraint: LocaleConstraint!
  updateColumns: [LocaleUpdateColumn!]! = []
  where: LocaleBoolExp
}

"""Ordering options when selecting data from "locale"."""
input LocaleOrderBy {
  description: OrderBy
  value: OrderBy
}

"""primary key columns input for table: locale"""
input LocalePkColumnsInput {
  """Unique identifier"""
  value: String!
}

"""
select columns of table "locale"
"""
enum LocaleSelectColumn {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "locale"
"""
input LocaleSetInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
Streaming cursor of the table "locale"
"""
input LocaleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: LocaleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input LocaleStreamCursorValueInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
update columns of table "locale"
"""
enum LocaleUpdateColumn {
  """column name"""
  description

  """column name"""
  value
}

input LocaleUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: LocaleSetInput

  """filter the rows which have to be updated"""
  where: LocaleBoolExp!
}

"""Messages to the assignment committee"""
type Message {
  """Message content"""
  content: String!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  service: Service!

  """Service reference"""
  serviceId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "message"
"""
type MessageAggregate {
  aggregate: MessageAggregateFields
  nodes: [Message!]!
}

input MessageAggregateBoolExp {
  count: messageAggregateBoolExpCount
}

"""
aggregate fields of "message"
"""
type MessageAggregateFields {
  avg: MessageAvgFields
  count(columns: [MessageSelectColumn!], distinct: Boolean): Int!
  max: MessageMaxFields
  min: MessageMinFields
  stddev: MessageStddevFields
  stddevPop: MessageStddevPopFields
  stddevSamp: MessageStddevSampFields
  sum: MessageSumFields
  varPop: MessageVarPopFields
  varSamp: MessageVarSampFields
  variance: MessageVarianceFields
}

"""
order by aggregate values of table "message"
"""
input MessageAggregateOrderBy {
  avg: MessageAvgOrderBy
  count: OrderBy
  max: MessageMaxOrderBy
  min: MessageMinOrderBy
  stddev: MessageStddevOrderBy
  stddevPop: MessageStddevPopOrderBy
  stddevSamp: MessageStddevSampOrderBy
  sum: MessageSumOrderBy
  varPop: MessageVarPopOrderBy
  varSamp: MessageVarSampOrderBy
  variance: MessageVarianceOrderBy
}

"""
input type for inserting array relation for remote table "message"
"""
input MessageArrRelInsertInput {
  data: [MessageInsertInput!]!

  """upsert condition"""
  onConflict: MessageOnConflict
}

"""aggregate avg on columns"""
type MessageAvgFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by avg() on columns of table "message"
"""
input MessageAvgOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""
Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'.
"""
input MessageBoolExp {
  _and: [MessageBoolExp!]
  _not: MessageBoolExp
  _or: [MessageBoolExp!]
  content: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  service: ServiceBoolExp
  serviceId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "message"
"""
enum MessageConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  message_id_key

  """
  unique or primary key constraint on columns "service_id", "oid"
  """
  message_oid_service_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  message_pkey
}

"""
input type for incrementing numeric columns in table "message"
"""
input MessageIncInput {
  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int
}

"""
input type for inserting data into table "message"
"""
input MessageInsertInput {
  """Message content"""
  content: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  service: ServiceObjRelInsertInput

  """Service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type MessageMaxFields {
  """Message content"""
  content: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "message"
"""
input MessageMaxOrderBy {
  """Message content"""
  content: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type MessageMinFields {
  """Message content"""
  content: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "message"
"""
input MessageMinOrderBy {
  """Message content"""
  content: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "message"
"""
type MessageMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Message!]!
}

"""
on_conflict condition type for table "message"
"""
input MessageOnConflict {
  constraint: MessageConstraint!
  updateColumns: [MessageUpdateColumn!]! = []
  where: MessageBoolExp
}

"""Ordering options when selecting data from "message"."""
input MessageOrderBy {
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  service: ServiceOrderBy
  serviceId: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: message"""
input MessagePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "message"
"""
enum MessageSelectColumn {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "message"
"""
input MessageSetInput {
  """Message content"""
  content: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type MessageStddevFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by stddev() on columns of table "message"
"""
input MessageStddevOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""aggregate stddevPop on columns"""
type MessageStddevPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by stddevPop() on columns of table "message"
"""
input MessageStddevPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""aggregate stddevSamp on columns"""
type MessageStddevSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by stddevSamp() on columns of table "message"
"""
input MessageStddevSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""
Streaming cursor of the table "message"
"""
input MessageStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: MessageStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input MessageStreamCursorValueInput {
  """Message content"""
  content: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type MessageSumFields {
  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int
}

"""
order by sum() on columns of table "message"
"""
input MessageSumOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""
update columns of table "message"
"""
enum MessageUpdateColumn {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  updatedAt
}

input MessageUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: MessageIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: MessageSetInput

  """filter the rows which have to be updated"""
  where: MessageBoolExp!
}

"""aggregate varPop on columns"""
type MessageVarPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by varPop() on columns of table "message"
"""
input MessageVarPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""aggregate varSamp on columns"""
type MessageVarSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by varSamp() on columns of table "message"
"""
input MessageVarSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""aggregate variance on columns"""
type MessageVarianceFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float
}

"""
order by variance() on columns of table "message"
"""
input MessageVarianceOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""Organization information"""
type Organization {
  active: Boolean!

  """An array relationship"""
  appSettings(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): [AppSetting!]!

  """An aggregate relationship"""
  appSettingsAggregate(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): AppSettingAggregate!

  """An array relationship"""
  coordinations(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """An aggregate relationship"""
  coordinationsAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """An array relationship"""
  courseTypes(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): [CourseType!]!

  """An aggregate relationship"""
  courseTypesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): CourseTypeAggregate!

  """An array relationship"""
  courses(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """An aggregate relationship"""
  coursesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """An array relationship"""
  currentPhases(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): [CurrentPhase!]!

  """An aggregate relationship"""
  currentPhasesAggregate(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): CurrentPhaseAggregate!

  """An array relationship"""
  degrees(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): [Degree!]!

  """An aggregate relationship"""
  degreesAggregate(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): DegreeAggregate!
  email: String!

  """Unique identifier"""
  id: Int!

  """Human-readable identifier (unique)"""
  key: String!

  """Label for display purposes"""
  label: String!
  locale: LocaleEnum!

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): [Message!]!

  """An aggregate relationship"""
  messagesAggregate(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): MessageAggregate!

  """An array relationship"""
  positions(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): [Position!]!

  """An aggregate relationship"""
  positionsAggregate(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): PositionAggregate!

  """An array relationship"""
  priorities(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """An aggregate relationship"""
  prioritiesAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """An array relationship"""
  programs(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): [Program!]!

  """An aggregate relationship"""
  programsAggregate(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): ProgramAggregate!

  """An array relationship"""
  requests(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """An aggregate relationship"""
  requestsAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """An array relationship"""
  serviceModificationTypes(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): [ServiceModificationType!]!

  """An aggregate relationship"""
  serviceModificationTypesAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): ServiceModificationTypeAggregate!

  """An array relationship"""
  serviceModifications(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """An aggregate relationship"""
  serviceModificationsAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): ServiceModificationAggregate!

  """An array relationship"""
  services(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """An aggregate relationship"""
  servicesAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): ServiceAggregate!

  """Sublabel for display purposes"""
  sublabel: String

  """An array relationship"""
  teacherRoles(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): [TeacherRole!]!

  """An aggregate relationship"""
  teacherRolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): TeacherRoleAggregate!

  """An array relationship"""
  teachers(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): [Teacher!]!

  """An aggregate relationship"""
  teachersAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): TeacherAggregate!

  """An array relationship"""
  tracks(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): [Track!]!

  """An aggregate relationship"""
  tracksAggregate(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): TrackAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """An array relationship"""
  years(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): [Year!]!

  """An aggregate relationship"""
  yearsAggregate(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): YearAggregate!
}

"""
aggregated selection of "organization"
"""
type OrganizationAggregate {
  aggregate: OrganizationAggregateFields
  nodes: [Organization!]!
}

"""
aggregate fields of "organization"
"""
type OrganizationAggregateFields {
  avg: OrganizationAvgFields
  count(columns: [OrganizationSelectColumn!], distinct: Boolean): Int!
  max: OrganizationMaxFields
  min: OrganizationMinFields
  stddev: OrganizationStddevFields
  stddevPop: OrganizationStddevPopFields
  stddevSamp: OrganizationStddevSampFields
  sum: OrganizationSumFields
  varPop: OrganizationVarPopFields
  varSamp: OrganizationVarSampFields
  variance: OrganizationVarianceFields
}

"""aggregate avg on columns"""
type OrganizationAvgFields {
  """Unique identifier"""
  id: Float
}

"""
Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'.
"""
input OrganizationBoolExp {
  _and: [OrganizationBoolExp!]
  _not: OrganizationBoolExp
  _or: [OrganizationBoolExp!]
  active: BooleanComparisonExp
  appSettings: AppSettingBoolExp
  appSettingsAggregate: AppSettingAggregateBoolExp
  coordinations: CoordinationBoolExp
  coordinationsAggregate: CoordinationAggregateBoolExp
  courseTypes: CourseTypeBoolExp
  courseTypesAggregate: CourseTypeAggregateBoolExp
  courses: CourseBoolExp
  coursesAggregate: CourseAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  currentPhases: CurrentPhaseBoolExp
  currentPhasesAggregate: CurrentPhaseAggregateBoolExp
  degrees: DegreeBoolExp
  degreesAggregate: DegreeAggregateBoolExp
  email: StringComparisonExp
  id: IntComparisonExp
  key: StringComparisonExp
  label: StringComparisonExp
  locale: LocaleEnumComparisonExp
  messages: MessageBoolExp
  messagesAggregate: MessageAggregateBoolExp
  positions: PositionBoolExp
  positionsAggregate: PositionAggregateBoolExp
  priorities: PriorityBoolExp
  prioritiesAggregate: PriorityAggregateBoolExp
  programs: ProgramBoolExp
  programsAggregate: ProgramAggregateBoolExp
  requests: RequestBoolExp
  requestsAggregate: RequestAggregateBoolExp
  serviceModificationTypes: ServiceModificationTypeBoolExp
  serviceModificationTypesAggregate: ServiceModificationTypeAggregateBoolExp
  serviceModifications: ServiceModificationBoolExp
  serviceModificationsAggregate: ServiceModificationAggregateBoolExp
  services: ServiceBoolExp
  servicesAggregate: ServiceAggregateBoolExp
  sublabel: StringComparisonExp
  teacherRoles: TeacherRoleBoolExp
  teacherRolesAggregate: TeacherRoleAggregateBoolExp
  teachers: TeacherBoolExp
  teachersAggregate: TeacherAggregateBoolExp
  tracks: TrackBoolExp
  tracksAggregate: TrackAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
  years: YearBoolExp
  yearsAggregate: YearAggregateBoolExp
}

"""
unique or primary key constraints on table "organization"
"""
enum OrganizationConstraint {
  """
  unique or primary key constraint on columns "key"
  """
  organization_key_key

  """
  unique or primary key constraint on columns "id"
  """
  organization_pkey
}

"""
input type for inserting data into table "organization"
"""
input OrganizationInsertInput {
  active: Boolean
  appSettings: AppSettingArrRelInsertInput
  coordinations: CoordinationArrRelInsertInput
  courseTypes: CourseTypeArrRelInsertInput
  courses: CourseArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz
  currentPhases: CurrentPhaseArrRelInsertInput
  degrees: DegreeArrRelInsertInput
  email: String

  """Human-readable identifier (unique)"""
  key: String

  """Label for display purposes"""
  label: String
  locale: LocaleEnum
  messages: MessageArrRelInsertInput
  positions: PositionArrRelInsertInput
  priorities: PriorityArrRelInsertInput
  programs: ProgramArrRelInsertInput
  requests: RequestArrRelInsertInput
  serviceModificationTypes: ServiceModificationTypeArrRelInsertInput
  serviceModifications: ServiceModificationArrRelInsertInput
  services: ServiceArrRelInsertInput

  """Sublabel for display purposes"""
  sublabel: String
  teacherRoles: TeacherRoleArrRelInsertInput
  teachers: TeacherArrRelInsertInput
  tracks: TrackArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
  years: YearArrRelInsertInput
}

"""aggregate max on columns"""
type OrganizationMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz
  email: String

  """Unique identifier"""
  id: Int

  """Human-readable identifier (unique)"""
  key: String

  """Label for display purposes"""
  label: String

  """Sublabel for display purposes"""
  sublabel: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type OrganizationMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz
  email: String

  """Unique identifier"""
  id: Int

  """Human-readable identifier (unique)"""
  key: String

  """Label for display purposes"""
  label: String

  """Sublabel for display purposes"""
  sublabel: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
response of any mutation on the table "organization"
"""
type OrganizationMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Organization!]!
}

"""
input type for inserting object relation for remote table "organization"
"""
input OrganizationObjRelInsertInput {
  data: OrganizationInsertInput!

  """upsert condition"""
  onConflict: OrganizationOnConflict
}

"""
on_conflict condition type for table "organization"
"""
input OrganizationOnConflict {
  constraint: OrganizationConstraint!
  updateColumns: [OrganizationUpdateColumn!]! = []
  where: OrganizationBoolExp
}

"""Ordering options when selecting data from "organization"."""
input OrganizationOrderBy {
  active: OrderBy
  appSettingsAggregate: AppSettingAggregateOrderBy
  coordinationsAggregate: CoordinationAggregateOrderBy
  courseTypesAggregate: CourseTypeAggregateOrderBy
  coursesAggregate: CourseAggregateOrderBy
  createdAt: OrderBy
  currentPhasesAggregate: CurrentPhaseAggregateOrderBy
  degreesAggregate: DegreeAggregateOrderBy
  email: OrderBy
  id: OrderBy
  key: OrderBy
  label: OrderBy
  locale: OrderBy
  messagesAggregate: MessageAggregateOrderBy
  positionsAggregate: PositionAggregateOrderBy
  prioritiesAggregate: PriorityAggregateOrderBy
  programsAggregate: ProgramAggregateOrderBy
  requestsAggregate: RequestAggregateOrderBy
  serviceModificationTypesAggregate: ServiceModificationTypeAggregateOrderBy
  serviceModificationsAggregate: ServiceModificationAggregateOrderBy
  servicesAggregate: ServiceAggregateOrderBy
  sublabel: OrderBy
  teacherRolesAggregate: TeacherRoleAggregateOrderBy
  teachersAggregate: TeacherAggregateOrderBy
  tracksAggregate: TrackAggregateOrderBy
  updatedAt: OrderBy
  yearsAggregate: YearAggregateOrderBy
}

"""primary key columns input for table: organization"""
input OrganizationPkColumnsInput {
  """Unique identifier"""
  id: Int!
}

"""
select columns of table "organization"
"""
enum OrganizationSelectColumn {
  """column name"""
  active

  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  id

  """column name"""
  key

  """column name"""
  label

  """column name"""
  locale

  """column name"""
  sublabel

  """column name"""
  updatedAt
}

"""
input type for updating data in table "organization"
"""
input OrganizationSetInput {
  active: Boolean

  """Timestamp when the record was created"""
  createdAt: timestamptz
  email: String

  """Human-readable identifier (unique)"""
  key: String

  """Label for display purposes"""
  label: String
  locale: LocaleEnum

  """Sublabel for display purposes"""
  sublabel: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type OrganizationStddevFields {
  """Unique identifier"""
  id: Float
}

"""aggregate stddevPop on columns"""
type OrganizationStddevPopFields {
  """Unique identifier"""
  id: Float
}

"""aggregate stddevSamp on columns"""
type OrganizationStddevSampFields {
  """Unique identifier"""
  id: Float
}

"""
Streaming cursor of the table "organization"
"""
input OrganizationStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: OrganizationStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input OrganizationStreamCursorValueInput {
  active: Boolean

  """Timestamp when the record was created"""
  createdAt: timestamptz
  email: String

  """Unique identifier"""
  id: Int

  """Human-readable identifier (unique)"""
  key: String

  """Label for display purposes"""
  label: String
  locale: LocaleEnum

  """Sublabel for display purposes"""
  sublabel: String

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type OrganizationSumFields {
  """Unique identifier"""
  id: Int
}

"""
update columns of table "organization"
"""
enum OrganizationUpdateColumn {
  """column name"""
  active

  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  key

  """column name"""
  label

  """column name"""
  locale

  """column name"""
  sublabel

  """column name"""
  updatedAt
}

input OrganizationUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: OrganizationSetInput

  """filter the rows which have to be updated"""
  where: OrganizationBoolExp!
}

"""aggregate varPop on columns"""
type OrganizationVarPopFields {
  """Unique identifier"""
  id: Float
}

"""aggregate varSamp on columns"""
type OrganizationVarSampFields {
  """Unique identifier"""
  id: Float
}

"""aggregate variance on columns"""
type OrganizationVarianceFields {
  """Unique identifier"""
  id: Float
}

"""
Workflow phases that control system access and capabilities within an organization
"""
type Phase {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String!
}

"""
aggregated selection of "phase"
"""
type PhaseAggregate {
  aggregate: PhaseAggregateFields
  nodes: [Phase!]!
}

"""
aggregate fields of "phase"
"""
type PhaseAggregateFields {
  count(columns: [PhaseSelectColumn!], distinct: Boolean): Int!
  max: PhaseMaxFields
  min: PhaseMinFields
}

"""
Boolean expression to filter rows from the table "phase". All fields are combined with a logical 'AND'.
"""
input PhaseBoolExp {
  _and: [PhaseBoolExp!]
  _not: PhaseBoolExp
  _or: [PhaseBoolExp!]
  description: StringComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "phase"
"""
enum PhaseConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  phase_pkey
}

enum PhaseEnum {
  """
  The course assignment committee reviews requests and makes final teaching assignments. Meanwhile, teachers can view but not modify their requests.
  """
  ASSIGNMENTS

  """
  Teachers submit their teaching preferences by making primary and secondary course requests. They can also update their required teaching hours and leave a message to the assignment committee.
  """
  REQUESTS

  """Teachers can view their final course assignments."""
  RESULTS

  """
  System is temporarily closed, typically between academic years or during maintenance periods.
  """
  SHUTDOWN
}

"""
Boolean expression to compare columns of type "PhaseEnum". All fields are combined with logical 'AND'.
"""
input PhaseEnumComparisonExp {
  _eq: PhaseEnum
  _in: [PhaseEnum!]
  _isNull: Boolean
  _neq: PhaseEnum
  _nin: [PhaseEnum!]
}

"""
input type for inserting data into table "phase"
"""
input PhaseInsertInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate max on columns"""
type PhaseMaxFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate min on columns"""
type PhaseMinFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
response of any mutation on the table "phase"
"""
type PhaseMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Phase!]!
}

"""
input type for inserting object relation for remote table "phase"
"""
input PhaseObjRelInsertInput {
  data: PhaseInsertInput!

  """upsert condition"""
  onConflict: PhaseOnConflict
}

"""
on_conflict condition type for table "phase"
"""
input PhaseOnConflict {
  constraint: PhaseConstraint!
  updateColumns: [PhaseUpdateColumn!]! = []
  where: PhaseBoolExp
}

"""Ordering options when selecting data from "phase"."""
input PhaseOrderBy {
  description: OrderBy
  value: OrderBy
}

"""primary key columns input for table: phase"""
input PhasePkColumnsInput {
  """Unique identifier"""
  value: String!
}

"""
select columns of table "phase"
"""
enum PhaseSelectColumn {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "phase"
"""
input PhaseSetInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
Streaming cursor of the table "phase"
"""
input PhaseStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PhaseStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PhaseStreamCursorValueInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
update columns of table "phase"
"""
enum PhaseUpdateColumn {
  """column name"""
  description

  """column name"""
  value
}

input PhaseUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: PhaseSetInput

  """filter the rows which have to be updated"""
  where: PhaseBoolExp!
}

"""Teaching positions with associated service hour requirements"""
type Position {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int!

  """Position name (unique)"""
  label: String!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  teachers(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): [Teacher!]!

  """An aggregate relationship"""
  teachersAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): TeacherAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "position"
"""
type PositionAggregate {
  aggregate: PositionAggregateFields
  nodes: [Position!]!
}

input PositionAggregateBoolExp {
  count: positionAggregateBoolExpCount
}

"""
aggregate fields of "position"
"""
type PositionAggregateFields {
  avg: PositionAvgFields
  count(columns: [PositionSelectColumn!], distinct: Boolean): Int!
  max: PositionMaxFields
  min: PositionMinFields
  stddev: PositionStddevFields
  stddevPop: PositionStddevPopFields
  stddevSamp: PositionStddevSampFields
  sum: PositionSumFields
  varPop: PositionVarPopFields
  varSamp: PositionVarSampFields
  variance: PositionVarianceFields
}

"""
order by aggregate values of table "position"
"""
input PositionAggregateOrderBy {
  avg: PositionAvgOrderBy
  count: OrderBy
  max: PositionMaxOrderBy
  min: PositionMinOrderBy
  stddev: PositionStddevOrderBy
  stddevPop: PositionStddevPopOrderBy
  stddevSamp: PositionStddevSampOrderBy
  sum: PositionSumOrderBy
  varPop: PositionVarPopOrderBy
  varSamp: PositionVarSampOrderBy
  variance: PositionVarianceOrderBy
}

"""
input type for inserting array relation for remote table "position"
"""
input PositionArrRelInsertInput {
  data: [PositionInsertInput!]!

  """upsert condition"""
  onConflict: PositionOnConflict
}

"""aggregate avg on columns"""
type PositionAvgFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "position"
"""
input PositionAvgOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "position". All fields are combined with a logical 'AND'.
"""
input PositionBoolExp {
  _and: [PositionBoolExp!]
  _not: PositionBoolExp
  _or: [PositionBoolExp!]
  baseServiceHours: FloatComparisonExp
  createdAt: TimestamptzComparisonExp
  description: StringComparisonExp
  id: IntComparisonExp
  label: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  teachers: TeacherBoolExp
  teachersAggregate: TeacherAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "position"
"""
enum PositionConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  position_id_key

  """
  unique or primary key constraint on columns "label", "oid"
  """
  position_oid_label_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  position_pkey
}

"""
input type for incrementing numeric columns in table "position"
"""
input PositionIncInput {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "position"
"""
input PositionInsertInput {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Position name (unique)"""
  label: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  teachers: TeacherArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type PositionMaxFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Position name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "position"
"""
input PositionMaxOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Position name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type PositionMinFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Position name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "position"
"""
input PositionMinOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Position name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "position"
"""
type PositionMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Position!]!
}

"""
input type for inserting object relation for remote table "position"
"""
input PositionObjRelInsertInput {
  data: PositionInsertInput!

  """upsert condition"""
  onConflict: PositionOnConflict
}

"""
on_conflict condition type for table "position"
"""
input PositionOnConflict {
  constraint: PositionConstraint!
  updateColumns: [PositionUpdateColumn!]! = []
  where: PositionBoolExp
}

"""Ordering options when selecting data from "position"."""
input PositionOrderBy {
  baseServiceHours: OrderBy
  createdAt: OrderBy
  description: OrderBy
  id: OrderBy
  label: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  teachersAggregate: TeacherAggregateOrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: position"""
input PositionPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "position"
"""
enum PositionSelectColumn {
  """column name"""
  baseServiceHours

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

"""
input type for updating data in table "position"
"""
input PositionSetInput {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Position name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type PositionStddevFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "position"
"""
input PositionStddevOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type PositionStddevPopFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "position"
"""
input PositionStddevPopOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type PositionStddevSampFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "position"
"""
input PositionStddevSampOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "position"
"""
input PositionStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PositionStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PositionStreamCursorValueInput {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Position name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type PositionSumFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "position"
"""
input PositionSumOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "position"
"""
enum PositionUpdateColumn {
  """column name"""
  baseServiceHours

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

input PositionUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: PositionIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: PositionSetInput

  """filter the rows which have to be updated"""
  where: PositionBoolExp!
}

"""aggregate varPop on columns"""
type PositionVarPopFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "position"
"""
input PositionVarPopOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type PositionVarSampFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "position"
"""
input PositionVarSampOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type PositionVarianceFields {
  """Default annual teaching hours"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "position"
"""
input PositionVarianceOrderBy {
  """Default annual teaching hours"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""Teacher course assignments"""
type Priority {
  """Indicates if seniority was computed automatically"""
  computed: Boolean!

  """An object relationship"""
  course: Course!

  """Course reference"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """An object relationship"""
  service: Service!

  """Teacher's service reference"""
  serviceId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Academic year reference"""
  year: Int!

  """An object relationship"""
  yearByYear: Year!
}

"""
aggregated selection of "priority"
"""
type PriorityAggregate {
  aggregate: PriorityAggregateFields
  nodes: [Priority!]!
}

input PriorityAggregateBoolExp {
  bool_and: priorityAggregateBoolExpBool_and
  bool_or: priorityAggregateBoolExpBool_or
  count: priorityAggregateBoolExpCount
}

"""
aggregate fields of "priority"
"""
type PriorityAggregateFields {
  avg: PriorityAvgFields
  count(columns: [PrioritySelectColumn!], distinct: Boolean): Int!
  max: PriorityMaxFields
  min: PriorityMinFields
  stddev: PriorityStddevFields
  stddevPop: PriorityStddevPopFields
  stddevSamp: PriorityStddevSampFields
  sum: PrioritySumFields
  varPop: PriorityVarPopFields
  varSamp: PriorityVarSampFields
  variance: PriorityVarianceFields
}

"""
order by aggregate values of table "priority"
"""
input PriorityAggregateOrderBy {
  avg: PriorityAvgOrderBy
  count: OrderBy
  max: PriorityMaxOrderBy
  min: PriorityMinOrderBy
  stddev: PriorityStddevOrderBy
  stddevPop: PriorityStddevPopOrderBy
  stddevSamp: PriorityStddevSampOrderBy
  sum: PrioritySumOrderBy
  varPop: PriorityVarPopOrderBy
  varSamp: PriorityVarSampOrderBy
  variance: PriorityVarianceOrderBy
}

"""
input type for inserting array relation for remote table "priority"
"""
input PriorityArrRelInsertInput {
  data: [PriorityInsertInput!]!

  """upsert condition"""
  onConflict: PriorityOnConflict
}

"""aggregate avg on columns"""
type PriorityAvgFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by avg() on columns of table "priority"
"""
input PriorityAvgOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Boolean expression to filter rows from the table "priority". All fields are combined with a logical 'AND'.
"""
input PriorityBoolExp {
  _and: [PriorityBoolExp!]
  _not: PriorityBoolExp
  _or: [PriorityBoolExp!]
  computed: BooleanComparisonExp
  course: CourseBoolExp
  courseId: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  isPriority: BooleanComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  seniority: IntComparisonExp
  service: ServiceBoolExp
  serviceId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
  year: IntComparisonExp
  yearByYear: YearBoolExp
}

"""
unique or primary key constraints on table "priority"
"""
enum PriorityConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  priority_id_key

  """
  unique or primary key constraint on columns "course_id", "service_id", "oid"
  """
  priority_oid_service_id_course_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  priority_pkey
}

"""
input type for incrementing numeric columns in table "priority"
"""
input PriorityIncInput {
  """Course reference"""
  courseId: Int

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """Academic year reference"""
  year: Int
}

"""
input type for inserting data into table "priority"
"""
input PriorityInsertInput {
  """Indicates if seniority was computed automatically"""
  computed: Boolean
  course: CourseObjRelInsertInput

  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput

  """Number of consecutive years teaching this course before current year"""
  seniority: Int
  service: ServiceObjRelInsertInput

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
  yearByYear: YearObjRelInsertInput
}

"""aggregate max on columns"""
type PriorityMaxFields {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by max() on columns of table "priority"
"""
input PriorityMaxOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate min on columns"""
type PriorityMinFields {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by min() on columns of table "priority"
"""
input PriorityMinOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
response of any mutation on the table "priority"
"""
type PriorityMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Priority!]!
}

"""
on_conflict condition type for table "priority"
"""
input PriorityOnConflict {
  constraint: PriorityConstraint!
  updateColumns: [PriorityUpdateColumn!]! = []
  where: PriorityBoolExp
}

"""Ordering options when selecting data from "priority"."""
input PriorityOrderBy {
  computed: OrderBy
  course: CourseOrderBy
  courseId: OrderBy
  createdAt: OrderBy
  id: OrderBy
  isPriority: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  seniority: OrderBy
  service: ServiceOrderBy
  serviceId: OrderBy
  updatedAt: OrderBy
  year: OrderBy
  yearByYear: YearOrderBy
}

"""primary key columns input for table: priority"""
input PriorityPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "priority"
"""
enum PrioritySelectColumn {
  """column name"""
  computed

  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  isPriority

  """column name"""
  oid

  """column name"""
  seniority

  """column name"""
  serviceId

  """column name"""
  updatedAt

  """column name"""
  year
}

"""
select "priorityAggregateBoolExpBool_andArgumentsColumns" columns of table "priority"
"""
enum PrioritySelectColumnPriorityAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  computed

  """column name"""
  isPriority
}

"""
select "priorityAggregateBoolExpBool_orArgumentsColumns" columns of table "priority"
"""
enum PrioritySelectColumnPriorityAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  computed

  """column name"""
  isPriority
}

"""
input type for updating data in table "priority"
"""
input PrioritySetInput {
  """Indicates if seniority was computed automatically"""
  computed: Boolean

  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate stddev on columns"""
type PriorityStddevFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddev() on columns of table "priority"
"""
input PriorityStddevOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevPop on columns"""
type PriorityStddevPopFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevPop() on columns of table "priority"
"""
input PriorityStddevPopOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevSamp on columns"""
type PriorityStddevSampFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevSamp() on columns of table "priority"
"""
input PriorityStddevSampOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Streaming cursor of the table "priority"
"""
input PriorityStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: PriorityStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input PriorityStreamCursorValueInput {
  """Indicates if seniority was computed automatically"""
  computed: Boolean

  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Current priority status based on seniority and course rules"""
  isPriority: Boolean

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate sum on columns"""
type PrioritySumFields {
  """Course reference"""
  courseId: Int

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Number of consecutive years teaching this course before current year"""
  seniority: Int

  """Teacher's service reference"""
  serviceId: Int

  """Academic year reference"""
  year: Int
}

"""
order by sum() on columns of table "priority"
"""
input PrioritySumOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
update columns of table "priority"
"""
enum PriorityUpdateColumn {
  """column name"""
  computed

  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  isPriority

  """column name"""
  oid

  """column name"""
  seniority

  """column name"""
  serviceId

  """column name"""
  updatedAt

  """column name"""
  year
}

input PriorityUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: PriorityIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: PrioritySetInput

  """filter the rows which have to be updated"""
  where: PriorityBoolExp!
}

"""aggregate varPop on columns"""
type PriorityVarPopFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varPop() on columns of table "priority"
"""
input PriorityVarPopOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate varSamp on columns"""
type PriorityVarSampFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varSamp() on columns of table "priority"
"""
input PriorityVarSampOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate variance on columns"""
type PriorityVarianceFields {
  """Course reference"""
  courseId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Number of consecutive years teaching this course before current year"""
  seniority: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by variance() on columns of table "priority"
"""
input PriorityVarianceOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Number of consecutive years teaching this course before current year"""
  seniority: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""Academic programs within each degree"""
type Program {
  """An array relationship"""
  coordinations(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """An aggregate relationship"""
  coordinationsAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """An array relationship"""
  courses(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """An aggregate relationship"""
  coursesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """An object relationship"""
  degree: Degree!

  """Degree reference"""
  degreeId: Int!

  """Unique identifier"""
  id: Int!

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String!

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  tracks(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): [Track!]!

  """An aggregate relationship"""
  tracksAggregate(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): TrackAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Controls visibility to teachers"""
  visible: Boolean!
}

"""
aggregated selection of "program"
"""
type ProgramAggregate {
  aggregate: ProgramAggregateFields
  nodes: [Program!]!
}

input ProgramAggregateBoolExp {
  bool_and: programAggregateBoolExpBool_and
  bool_or: programAggregateBoolExpBool_or
  count: programAggregateBoolExpCount
}

"""
aggregate fields of "program"
"""
type ProgramAggregateFields {
  avg: ProgramAvgFields
  count(columns: [ProgramSelectColumn!], distinct: Boolean): Int!
  max: ProgramMaxFields
  min: ProgramMinFields
  stddev: ProgramStddevFields
  stddevPop: ProgramStddevPopFields
  stddevSamp: ProgramStddevSampFields
  sum: ProgramSumFields
  varPop: ProgramVarPopFields
  varSamp: ProgramVarSampFields
  variance: ProgramVarianceFields
}

"""
order by aggregate values of table "program"
"""
input ProgramAggregateOrderBy {
  avg: ProgramAvgOrderBy
  count: OrderBy
  max: ProgramMaxOrderBy
  min: ProgramMinOrderBy
  stddev: ProgramStddevOrderBy
  stddevPop: ProgramStddevPopOrderBy
  stddevSamp: ProgramStddevSampOrderBy
  sum: ProgramSumOrderBy
  varPop: ProgramVarPopOrderBy
  varSamp: ProgramVarSampOrderBy
  variance: ProgramVarianceOrderBy
}

"""
input type for inserting array relation for remote table "program"
"""
input ProgramArrRelInsertInput {
  data: [ProgramInsertInput!]!

  """upsert condition"""
  onConflict: ProgramOnConflict
}

"""aggregate avg on columns"""
type ProgramAvgFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "program"
"""
input ProgramAvgOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "program". All fields are combined with a logical 'AND'.
"""
input ProgramBoolExp {
  _and: [ProgramBoolExp!]
  _not: ProgramBoolExp
  _or: [ProgramBoolExp!]
  coordinations: CoordinationBoolExp
  coordinationsAggregate: CoordinationAggregateBoolExp
  courses: CourseBoolExp
  coursesAggregate: CourseAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  degree: DegreeBoolExp
  degreeId: IntComparisonExp
  id: IntComparisonExp
  name: StringComparisonExp
  nameDisplay: StringComparisonExp
  nameShort: StringComparisonExp
  nomImport: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  tracks: TrackBoolExp
  tracksAggregate: TrackAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "program"
"""
enum ProgramConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  program_id_key

  """
  unique or primary key constraint on columns "degree_id", "name", "oid"
  """
  program_oid_degree_id_name_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  program_pkey
}

"""
input type for incrementing numeric columns in table "program"
"""
input ProgramIncInput {
  """Degree reference"""
  degreeId: Int

  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "program"
"""
input ProgramInsertInput {
  coordinations: CoordinationArrRelInsertInput
  courses: CourseArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz
  degree: DegreeObjRelInsertInput

  """Degree reference"""
  degreeId: Int

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  tracks: TrackArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate max on columns"""
type ProgramMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Degree reference"""
  degreeId: Int

  """Unique identifier"""
  id: Int

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "program"
"""
input ProgramMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name, unique within degree (e.g., Mathematics)"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type ProgramMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Degree reference"""
  degreeId: Int

  """Unique identifier"""
  id: Int

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "program"
"""
input ProgramMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Full name, unique within degree (e.g., Mathematics)"""
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "program"
"""
type ProgramMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Program!]!
}

"""
input type for inserting object relation for remote table "program"
"""
input ProgramObjRelInsertInput {
  data: ProgramInsertInput!

  """upsert condition"""
  onConflict: ProgramOnConflict
}

"""
on_conflict condition type for table "program"
"""
input ProgramOnConflict {
  constraint: ProgramConstraint!
  updateColumns: [ProgramUpdateColumn!]! = []
  where: ProgramBoolExp
}

"""Ordering options when selecting data from "program"."""
input ProgramOrderBy {
  coordinationsAggregate: CoordinationAggregateOrderBy
  coursesAggregate: CourseAggregateOrderBy
  createdAt: OrderBy
  degree: DegreeOrderBy
  degreeId: OrderBy
  id: OrderBy
  name: OrderBy
  nameDisplay: OrderBy
  nameShort: OrderBy
  nomImport: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  tracksAggregate: TrackAggregateOrderBy
  updatedAt: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: program"""
input ProgramPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "program"
"""
enum ProgramSelectColumn {
  """column name"""
  createdAt

  """column name"""
  degreeId

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nameDisplay

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  visible
}

"""
select "programAggregateBoolExpBool_andArgumentsColumns" columns of table "program"
"""
enum ProgramSelectColumnProgramAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  visible
}

"""
select "programAggregateBoolExpBool_orArgumentsColumns" columns of table "program"
"""
enum ProgramSelectColumnProgramAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  visible
}

"""
input type for updating data in table "program"
"""
input ProgramSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Degree reference"""
  degreeId: Int

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate stddev on columns"""
type ProgramStddevFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "program"
"""
input ProgramStddevOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type ProgramStddevPopFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "program"
"""
input ProgramStddevPopOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type ProgramStddevSampFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "program"
"""
input ProgramStddevSampOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "program"
"""
input ProgramStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ProgramStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ProgramStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Degree reference"""
  degreeId: Int

  """Unique identifier"""
  id: Int

  """Full name, unique within degree (e.g., Mathematics)"""
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate sum on columns"""
type ProgramSumFields {
  """Degree reference"""
  degreeId: Int

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "program"
"""
input ProgramSumOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "program"
"""
enum ProgramUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  degreeId

  """column name"""
  name

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  visible
}

input ProgramUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ProgramIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ProgramSetInput

  """filter the rows which have to be updated"""
  where: ProgramBoolExp!
}

"""aggregate varPop on columns"""
type ProgramVarPopFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "program"
"""
input ProgramVarPopOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type ProgramVarSampFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "program"
"""
input ProgramVarSampOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type ProgramVarianceFields {
  """Degree reference"""
  degreeId: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "program"
"""
input ProgramVarianceOrderBy {
  """Degree reference"""
  degreeId: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""Teacher requests and assignments for courses"""
type Request {
  """An object relationship"""
  course: Course!

  """Course reference"""
  courseId: Int!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Number of requested or assigned teaching hours"""
  hours: Float!

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Int!

  """Determines a request's priority status based on the priority table"""
  isPriority: Boolean

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  requestType: RequestType!

  """An object relationship"""
  service: Service!

  """Teacher's service reference"""
  serviceId: Int!

  """Request type reference"""
  type: RequestTypeEnum!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Academic year reference"""
  year: Int!

  """An object relationship"""
  yearByYear: Year!
}

"""
aggregated selection of "request"
"""
type RequestAggregate {
  aggregate: RequestAggregateFields
  nodes: [Request!]!
}

input RequestAggregateBoolExp {
  count: requestAggregateBoolExpCount
}

"""
aggregate fields of "request"
"""
type RequestAggregateFields {
  avg: RequestAvgFields
  count(columns: [RequestSelectColumn!], distinct: Boolean): Int!
  max: RequestMaxFields
  min: RequestMinFields
  stddev: RequestStddevFields
  stddevPop: RequestStddevPopFields
  stddevSamp: RequestStddevSampFields
  sum: RequestSumFields
  varPop: RequestVarPopFields
  varSamp: RequestVarSampFields
  variance: RequestVarianceFields
}

"""
order by aggregate values of table "request"
"""
input RequestAggregateOrderBy {
  avg: RequestAvgOrderBy
  count: OrderBy
  max: RequestMaxOrderBy
  min: RequestMinOrderBy
  stddev: RequestStddevOrderBy
  stddevPop: RequestStddevPopOrderBy
  stddevSamp: RequestStddevSampOrderBy
  sum: RequestSumOrderBy
  varPop: RequestVarPopOrderBy
  varSamp: RequestVarSampOrderBy
  variance: RequestVarianceOrderBy
}

"""
input type for inserting array relation for remote table "request"
"""
input RequestArrRelInsertInput {
  data: [RequestInsertInput!]!

  """upsert condition"""
  onConflict: RequestOnConflict
}

"""aggregate avg on columns"""
type RequestAvgFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by avg() on columns of table "request"
"""
input RequestAvgOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Boolean expression to filter rows from the table "request". All fields are combined with a logical 'AND'.
"""
input RequestBoolExp {
  _and: [RequestBoolExp!]
  _not: RequestBoolExp
  _or: [RequestBoolExp!]
  course: CourseBoolExp
  courseId: IntComparisonExp
  createdAt: TimestamptzComparisonExp
  hours: FloatComparisonExp
  hoursWeighted: FloatComparisonExp
  id: IntComparisonExp
  isPriority: BooleanComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  requestType: RequestTypeBoolExp
  service: ServiceBoolExp
  serviceId: IntComparisonExp
  type: RequestTypeEnumComparisonExp
  updatedAt: TimestamptzComparisonExp
  year: IntComparisonExp
  yearByYear: YearBoolExp
}

"""
unique or primary key constraints on table "request"
"""
enum RequestConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  request_id_key

  """
  unique or primary key constraint on columns "type", "course_id", "service_id", "oid"
  """
  request_oid_service_id_course_id_type_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  request_pkey
}

"""
input type for incrementing numeric columns in table "request"
"""
input RequestIncInput {
  """Course reference"""
  courseId: Int

  """Number of requested or assigned teaching hours"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """Academic year reference"""
  year: Int
}

"""
input type for inserting data into table "request"
"""
input RequestInsertInput {
  course: CourseObjRelInsertInput

  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Number of requested or assigned teaching hours"""
  hours: Float

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  requestType: RequestTypeObjRelInsertInput
  service: ServiceObjRelInsertInput

  """Teacher's service reference"""
  serviceId: Int

  """Request type reference"""
  type: RequestTypeEnum

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
  yearByYear: YearObjRelInsertInput
}

"""aggregate max on columns"""
type RequestMaxFields {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by max() on columns of table "request"
"""
input RequestMaxOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate min on columns"""
type RequestMinFields {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by min() on columns of table "request"
"""
input RequestMinOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
response of any mutation on the table "request"
"""
type RequestMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Request!]!
}

"""
on_conflict condition type for table "request"
"""
input RequestOnConflict {
  constraint: RequestConstraint!
  updateColumns: [RequestUpdateColumn!]! = []
  where: RequestBoolExp
}

"""Ordering options when selecting data from "request"."""
input RequestOrderBy {
  course: CourseOrderBy
  courseId: OrderBy
  createdAt: OrderBy
  hours: OrderBy
  hoursWeighted: OrderBy
  id: OrderBy
  isPriority: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  requestType: RequestTypeOrderBy
  service: ServiceOrderBy
  serviceId: OrderBy
  type: OrderBy
  updatedAt: OrderBy
  year: OrderBy
  yearByYear: YearOrderBy
}

"""primary key columns input for table: request"""
input RequestPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "request"
"""
enum RequestSelectColumn {
  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  type

  """column name"""
  updatedAt

  """column name"""
  year
}

"""
input type for updating data in table "request"
"""
input RequestSetInput {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Number of requested or assigned teaching hours"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """Request type reference"""
  type: RequestTypeEnum

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate stddev on columns"""
type RequestStddevFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddev() on columns of table "request"
"""
input RequestStddevOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevPop on columns"""
type RequestStddevPopFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevPop() on columns of table "request"
"""
input RequestStddevPopOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevSamp on columns"""
type RequestStddevSampFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevSamp() on columns of table "request"
"""
input RequestStddevSampOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Streaming cursor of the table "request"
"""
input RequestStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: RequestStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input RequestStreamCursorValueInput {
  """Course reference"""
  courseId: Int

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Number of requested or assigned teaching hours"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """Request type reference"""
  type: RequestTypeEnum

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate sum on columns"""
type RequestSumFields {
  """Course reference"""
  courseId: Int

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher's service reference"""
  serviceId: Int

  """Academic year reference"""
  year: Int
}

"""
order by sum() on columns of table "request"
"""
input RequestSumOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""Course request types that categorize teacher-course relationships"""
type RequestType {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String!
}

"""
aggregated selection of "request_type"
"""
type RequestTypeAggregate {
  aggregate: RequestTypeAggregateFields
  nodes: [RequestType!]!
}

"""
aggregate fields of "request_type"
"""
type RequestTypeAggregateFields {
  count(columns: [RequestTypeSelectColumn!], distinct: Boolean): Int!
  max: RequestTypeMaxFields
  min: RequestTypeMinFields
}

"""
Boolean expression to filter rows from the table "request_type". All fields are combined with a logical 'AND'.
"""
input RequestTypeBoolExp {
  _and: [RequestTypeBoolExp!]
  _not: RequestTypeBoolExp
  _or: [RequestTypeBoolExp!]
  description: StringComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "request_type"
"""
enum RequestTypeConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  request_type_pkey
}

enum RequestTypeEnum {
  """
  Final course assignment made by the committee during the assignments phase
  """
  ASSIGNMENT

  """Teacher's preferred course choice submitted during the requests phase"""
  PRIMARY

  """Teacher's backup course choice submitted during the requests phase"""
  SECONDARY
}

"""
Boolean expression to compare columns of type "RequestTypeEnum". All fields are combined with logical 'AND'.
"""
input RequestTypeEnumComparisonExp {
  _eq: RequestTypeEnum
  _in: [RequestTypeEnum!]
  _isNull: Boolean
  _neq: RequestTypeEnum
  _nin: [RequestTypeEnum!]
}

"""
input type for inserting data into table "request_type"
"""
input RequestTypeInsertInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate max on columns"""
type RequestTypeMaxFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate min on columns"""
type RequestTypeMinFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
response of any mutation on the table "request_type"
"""
type RequestTypeMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [RequestType!]!
}

"""
input type for inserting object relation for remote table "request_type"
"""
input RequestTypeObjRelInsertInput {
  data: RequestTypeInsertInput!

  """upsert condition"""
  onConflict: RequestTypeOnConflict
}

"""
on_conflict condition type for table "request_type"
"""
input RequestTypeOnConflict {
  constraint: RequestTypeConstraint!
  updateColumns: [RequestTypeUpdateColumn!]! = []
  where: RequestTypeBoolExp
}

"""Ordering options when selecting data from "request_type"."""
input RequestTypeOrderBy {
  description: OrderBy
  value: OrderBy
}

"""primary key columns input for table: request_type"""
input RequestTypePkColumnsInput {
  """Unique identifier"""
  value: String!
}

"""
select columns of table "request_type"
"""
enum RequestTypeSelectColumn {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "request_type"
"""
input RequestTypeSetInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
Streaming cursor of the table "request_type"
"""
input RequestTypeStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: RequestTypeStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input RequestTypeStreamCursorValueInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
update columns of table "request_type"
"""
enum RequestTypeUpdateColumn {
  """column name"""
  description

  """column name"""
  value
}

input RequestTypeUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RequestTypeSetInput

  """filter the rows which have to be updated"""
  where: RequestTypeBoolExp!
}

"""
update columns of table "request"
"""
enum RequestUpdateColumn {
  """column name"""
  courseId

  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  type

  """column name"""
  updatedAt

  """column name"""
  year
}

input RequestUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: RequestIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: RequestSetInput

  """filter the rows which have to be updated"""
  where: RequestBoolExp!
}

"""aggregate varPop on columns"""
type RequestVarPopFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varPop() on columns of table "request"
"""
input RequestVarPopOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate varSamp on columns"""
type RequestVarSampFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varSamp() on columns of table "request"
"""
input RequestVarSampOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate variance on columns"""
type RequestVarianceFields {
  """Course reference"""
  courseId: Float

  """Number of requested or assigned teaching hours"""
  hours: Float

  """
  Calculates a request's weighted hours by multiplying the request's hours with the course type coefficient
  """
  hoursWeighted: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's service reference"""
  serviceId: Float

  """Academic year reference"""
  year: Float
}

"""
order by variance() on columns of table "request"
"""
input RequestVarianceOrderBy {
  """Course reference"""
  courseId: OrderBy

  """Number of requested or assigned teaching hours"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's service reference"""
  serviceId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
User roles that determine system access and capabilities within an organization
"""
type Role {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String!
}

"""
aggregated selection of "role"
"""
type RoleAggregate {
  aggregate: RoleAggregateFields
  nodes: [Role!]!
}

"""
aggregate fields of "role"
"""
type RoleAggregateFields {
  count(columns: [RoleSelectColumn!], distinct: Boolean): Int!
  max: RoleMaxFields
  min: RoleMinFields
}

"""
Boolean expression to filter rows from the table "role". All fields are combined with a logical 'AND'.
"""
input RoleBoolExp {
  _and: [RoleBoolExp!]
  _not: RoleBoolExp
  _or: [RoleBoolExp!]
  description: StringComparisonExp
  value: StringComparisonExp
}

"""
unique or primary key constraints on table "role"
"""
enum RoleConstraint {
  """
  unique or primary key constraint on columns "value"
  """
  role_pkey
}

enum RoleEnum {
  """Committee member with extra capabilities during assignment phase"""
  COMMISSIONER

  """
  Administrator with full capabilities including configuration and user management
  """
  ORGANIZER

  """Standard user with basic capabilities"""
  TEACHER
}

"""
Boolean expression to compare columns of type "RoleEnum". All fields are combined with logical 'AND'.
"""
input RoleEnumComparisonExp {
  _eq: RoleEnum
  _in: [RoleEnum!]
  _isNull: Boolean
  _neq: RoleEnum
  _nin: [RoleEnum!]
}

"""
input type for inserting data into table "role"
"""
input RoleInsertInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate max on columns"""
type RoleMaxFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""aggregate min on columns"""
type RoleMinFields {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
response of any mutation on the table "role"
"""
type RoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Role!]!
}

"""
input type for inserting object relation for remote table "role"
"""
input RoleObjRelInsertInput {
  data: RoleInsertInput!

  """upsert condition"""
  onConflict: RoleOnConflict
}

"""
on_conflict condition type for table "role"
"""
input RoleOnConflict {
  constraint: RoleConstraint!
  updateColumns: [RoleUpdateColumn!]! = []
  where: RoleBoolExp
}

"""Ordering options when selecting data from "role"."""
input RoleOrderBy {
  description: OrderBy
  value: OrderBy
}

"""primary key columns input for table: role"""
input RolePkColumnsInput {
  """Unique identifier"""
  value: String!
}

"""
select columns of table "role"
"""
enum RoleSelectColumn {
  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "role"
"""
input RoleSetInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
Streaming cursor of the table "role"
"""
input RoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: RoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input RoleStreamCursorValueInput {
  """Short description"""
  description: String

  """Unique identifier"""
  value: String
}

"""
update columns of table "role"
"""
enum RoleUpdateColumn {
  """column name"""
  description

  """column name"""
  value
}

input RoleUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: RoleSetInput

  """filter the rows which have to be updated"""
  where: RoleBoolExp!
}

"""Annual teaching service records"""
type Service {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Required teaching hours before modifications"""
  hours: Float!

  """Unique identifier"""
  id: Int!

  """An array relationship"""
  messages(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): [Message!]!

  """An aggregate relationship"""
  messagesAggregate(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): MessageAggregate!

  """An array relationship"""
  modifications(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """An aggregate relationship"""
  modificationsAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): ServiceModificationAggregate!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  priorities(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """An aggregate relationship"""
  prioritiesAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """An array relationship"""
  requests(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """An aggregate relationship"""
  requestsAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """An object relationship"""
  teacher: Teacher!

  """Teacher reference"""
  teacherId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Academic year reference"""
  year: Int!

  """An object relationship"""
  yearByYear: Year!
}

"""
aggregated selection of "service"
"""
type ServiceAggregate {
  aggregate: ServiceAggregateFields
  nodes: [Service!]!
}

input ServiceAggregateBoolExp {
  count: serviceAggregateBoolExpCount
}

"""
aggregate fields of "service"
"""
type ServiceAggregateFields {
  avg: ServiceAvgFields
  count(columns: [ServiceSelectColumn!], distinct: Boolean): Int!
  max: ServiceMaxFields
  min: ServiceMinFields
  stddev: ServiceStddevFields
  stddevPop: ServiceStddevPopFields
  stddevSamp: ServiceStddevSampFields
  sum: ServiceSumFields
  varPop: ServiceVarPopFields
  varSamp: ServiceVarSampFields
  variance: ServiceVarianceFields
}

"""
order by aggregate values of table "service"
"""
input ServiceAggregateOrderBy {
  avg: ServiceAvgOrderBy
  count: OrderBy
  max: ServiceMaxOrderBy
  min: ServiceMinOrderBy
  stddev: ServiceStddevOrderBy
  stddevPop: ServiceStddevPopOrderBy
  stddevSamp: ServiceStddevSampOrderBy
  sum: ServiceSumOrderBy
  varPop: ServiceVarPopOrderBy
  varSamp: ServiceVarSampOrderBy
  variance: ServiceVarianceOrderBy
}

"""
input type for inserting array relation for remote table "service"
"""
input ServiceArrRelInsertInput {
  data: [ServiceInsertInput!]!

  """upsert condition"""
  onConflict: ServiceOnConflict
}

"""aggregate avg on columns"""
type ServiceAvgFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by avg() on columns of table "service"
"""
input ServiceAvgOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Boolean expression to filter rows from the table "service". All fields are combined with a logical 'AND'.
"""
input ServiceBoolExp {
  _and: [ServiceBoolExp!]
  _not: ServiceBoolExp
  _or: [ServiceBoolExp!]
  createdAt: TimestamptzComparisonExp
  hours: FloatComparisonExp
  id: IntComparisonExp
  messages: MessageBoolExp
  messagesAggregate: MessageAggregateBoolExp
  modifications: ServiceModificationBoolExp
  modificationsAggregate: ServiceModificationAggregateBoolExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  priorities: PriorityBoolExp
  prioritiesAggregate: PriorityAggregateBoolExp
  requests: RequestBoolExp
  requestsAggregate: RequestAggregateBoolExp
  teacher: TeacherBoolExp
  teacherId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
  year: IntComparisonExp
  yearByYear: YearBoolExp
}

"""
unique or primary key constraints on table "service"
"""
enum ServiceConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  service_id_key

  """
  unique or primary key constraint on columns "id", "oid", "year"
  """
  service_oid_id_year_key

  """
  unique or primary key constraint on columns "teacher_id", "oid", "year"
  """
  service_oid_year_teacher_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  service_pkey
}

"""
input type for incrementing numeric columns in table "service"
"""
input ServiceIncInput {
  """Required teaching hours before modifications"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """Academic year reference"""
  year: Int
}

"""
input type for inserting data into table "service"
"""
input ServiceInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Required teaching hours before modifications"""
  hours: Float
  messages: MessageArrRelInsertInput
  modifications: ServiceModificationArrRelInsertInput

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  priorities: PriorityArrRelInsertInput
  requests: RequestArrRelInsertInput
  teacher: TeacherObjRelInsertInput

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
  yearByYear: YearObjRelInsertInput
}

"""aggregate max on columns"""
type ServiceMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by max() on columns of table "service"
"""
input ServiceMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate min on columns"""
type ServiceMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""
order by min() on columns of table "service"
"""
input ServiceMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""Individual modifications to base teaching service hours"""
type ServiceModification {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Hour deduction amount"""
  hours: Float!

  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  service: Service!

  """Service reference"""
  serviceId: Int!

  """An object relationship"""
  type: ServiceModificationType!

  """Modification type reference"""
  typeId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "service_modification"
"""
type ServiceModificationAggregate {
  aggregate: ServiceModificationAggregateFields
  nodes: [ServiceModification!]!
}

input ServiceModificationAggregateBoolExp {
  count: serviceModificationAggregateBoolExpCount
}

"""
aggregate fields of "service_modification"
"""
type ServiceModificationAggregateFields {
  avg: ServiceModificationAvgFields
  count(columns: [ServiceModificationSelectColumn!], distinct: Boolean): Int!
  max: ServiceModificationMaxFields
  min: ServiceModificationMinFields
  stddev: ServiceModificationStddevFields
  stddevPop: ServiceModificationStddevPopFields
  stddevSamp: ServiceModificationStddevSampFields
  sum: ServiceModificationSumFields
  varPop: ServiceModificationVarPopFields
  varSamp: ServiceModificationVarSampFields
  variance: ServiceModificationVarianceFields
}

"""
order by aggregate values of table "service_modification"
"""
input ServiceModificationAggregateOrderBy {
  avg: ServiceModificationAvgOrderBy
  count: OrderBy
  max: ServiceModificationMaxOrderBy
  min: ServiceModificationMinOrderBy
  stddev: ServiceModificationStddevOrderBy
  stddevPop: ServiceModificationStddevPopOrderBy
  stddevSamp: ServiceModificationStddevSampOrderBy
  sum: ServiceModificationSumOrderBy
  varPop: ServiceModificationVarPopOrderBy
  varSamp: ServiceModificationVarSampOrderBy
  variance: ServiceModificationVarianceOrderBy
}

"""
input type for inserting array relation for remote table "service_modification"
"""
input ServiceModificationArrRelInsertInput {
  data: [ServiceModificationInsertInput!]!

  """upsert condition"""
  onConflict: ServiceModificationOnConflict
}

"""aggregate avg on columns"""
type ServiceModificationAvgFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by avg() on columns of table "service_modification"
"""
input ServiceModificationAvgOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""
Boolean expression to filter rows from the table "service_modification". All fields are combined with a logical 'AND'.
"""
input ServiceModificationBoolExp {
  _and: [ServiceModificationBoolExp!]
  _not: ServiceModificationBoolExp
  _or: [ServiceModificationBoolExp!]
  createdAt: TimestamptzComparisonExp
  hours: FloatComparisonExp
  id: IntComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  service: ServiceBoolExp
  serviceId: IntComparisonExp
  type: ServiceModificationTypeBoolExp
  typeId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "service_modification"
"""
enum ServiceModificationConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  service_modification_id_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  service_modification_pkey
}

"""
input type for incrementing numeric columns in table "service_modification"
"""
input ServiceModificationIncInput {
  """Hour deduction amount"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int
}

"""
input type for inserting data into table "service_modification"
"""
input ServiceModificationInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Hour deduction amount"""
  hours: Float

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  service: ServiceObjRelInsertInput

  """Service reference"""
  serviceId: Int
  type: ServiceModificationTypeObjRelInsertInput

  """Modification type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type ServiceModificationMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "service_modification"
"""
input ServiceModificationMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type ServiceModificationMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "service_modification"
"""
input ServiceModificationMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "service_modification"
"""
type ServiceModificationMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ServiceModification!]!
}

"""
on_conflict condition type for table "service_modification"
"""
input ServiceModificationOnConflict {
  constraint: ServiceModificationConstraint!
  updateColumns: [ServiceModificationUpdateColumn!]! = []
  where: ServiceModificationBoolExp
}

"""Ordering options when selecting data from "service_modification"."""
input ServiceModificationOrderBy {
  createdAt: OrderBy
  hours: OrderBy
  id: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  service: ServiceOrderBy
  serviceId: OrderBy
  type: ServiceModificationTypeOrderBy
  typeId: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: service_modification"""
input ServiceModificationPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "service_modification"
"""
enum ServiceModificationSelectColumn {
  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  typeId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "service_modification"
"""
input ServiceModificationSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Hour deduction amount"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type ServiceModificationStddevFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by stddev() on columns of table "service_modification"
"""
input ServiceModificationStddevOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""aggregate stddevPop on columns"""
type ServiceModificationStddevPopFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by stddevPop() on columns of table "service_modification"
"""
input ServiceModificationStddevPopOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""aggregate stddevSamp on columns"""
type ServiceModificationStddevSampFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by stddevSamp() on columns of table "service_modification"
"""
input ServiceModificationStddevSampOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""
Streaming cursor of the table "service_modification"
"""
input ServiceModificationStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ServiceModificationStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ServiceModificationStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type ServiceModificationSumFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Service reference"""
  serviceId: Int

  """Modification type reference"""
  typeId: Int
}

"""
order by sum() on columns of table "service_modification"
"""
input ServiceModificationSumOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""Categories of service modifications"""
type ServiceModificationType {
  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int!

  """Modification type name (unique)"""
  label: String!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An aggregate relationship"""
  serviceModificationsAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): ServiceModificationAggregate!

  """An array relationship"""
  service_modifications(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "service_modification_type"
"""
type ServiceModificationTypeAggregate {
  aggregate: ServiceModificationTypeAggregateFields
  nodes: [ServiceModificationType!]!
}

input ServiceModificationTypeAggregateBoolExp {
  count: serviceModificationTypeAggregateBoolExpCount
}

"""
aggregate fields of "service_modification_type"
"""
type ServiceModificationTypeAggregateFields {
  avg: ServiceModificationTypeAvgFields
  count(columns: [ServiceModificationTypeSelectColumn!], distinct: Boolean): Int!
  max: ServiceModificationTypeMaxFields
  min: ServiceModificationTypeMinFields
  stddev: ServiceModificationTypeStddevFields
  stddevPop: ServiceModificationTypeStddevPopFields
  stddevSamp: ServiceModificationTypeStddevSampFields
  sum: ServiceModificationTypeSumFields
  varPop: ServiceModificationTypeVarPopFields
  varSamp: ServiceModificationTypeVarSampFields
  variance: ServiceModificationTypeVarianceFields
}

"""
order by aggregate values of table "service_modification_type"
"""
input ServiceModificationTypeAggregateOrderBy {
  avg: ServiceModificationTypeAvgOrderBy
  count: OrderBy
  max: ServiceModificationTypeMaxOrderBy
  min: ServiceModificationTypeMinOrderBy
  stddev: ServiceModificationTypeStddevOrderBy
  stddevPop: ServiceModificationTypeStddevPopOrderBy
  stddevSamp: ServiceModificationTypeStddevSampOrderBy
  sum: ServiceModificationTypeSumOrderBy
  varPop: ServiceModificationTypeVarPopOrderBy
  varSamp: ServiceModificationTypeVarSampOrderBy
  variance: ServiceModificationTypeVarianceOrderBy
}

"""
input type for inserting array relation for remote table "service_modification_type"
"""
input ServiceModificationTypeArrRelInsertInput {
  data: [ServiceModificationTypeInsertInput!]!

  """upsert condition"""
  onConflict: ServiceModificationTypeOnConflict
}

"""aggregate avg on columns"""
type ServiceModificationTypeAvgFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by avg() on columns of table "service_modification_type"
"""
input ServiceModificationTypeAvgOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Boolean expression to filter rows from the table "service_modification_type". All fields are combined with a logical 'AND'.
"""
input ServiceModificationTypeBoolExp {
  _and: [ServiceModificationTypeBoolExp!]
  _not: ServiceModificationTypeBoolExp
  _or: [ServiceModificationTypeBoolExp!]
  createdAt: TimestamptzComparisonExp
  description: StringComparisonExp
  id: IntComparisonExp
  label: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  service_modifications: ServiceModificationBoolExp
  service_modificationsAggregate: ServiceModificationAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "service_modification_type"
"""
enum ServiceModificationTypeConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  service_modification_type_id_key

  """
  unique or primary key constraint on columns "label", "oid"
  """
  service_modification_type_oid_label_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  service_modification_type_pkey
}

"""
input type for incrementing numeric columns in table "service_modification_type"
"""
input ServiceModificationTypeIncInput {
  """Organization reference"""
  oid: Int
}

"""
input type for inserting data into table "service_modification_type"
"""
input ServiceModificationTypeInsertInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Modification type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  service_modifications: ServiceModificationArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type ServiceModificationTypeMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Modification type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "service_modification_type"
"""
input ServiceModificationTypeMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Modification type name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type ServiceModificationTypeMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Modification type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "service_modification_type"
"""
input ServiceModificationTypeMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Optional description"""
  description: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Modification type name (unique)"""
  label: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "service_modification_type"
"""
type ServiceModificationTypeMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [ServiceModificationType!]!
}

"""
input type for inserting object relation for remote table "service_modification_type"
"""
input ServiceModificationTypeObjRelInsertInput {
  data: ServiceModificationTypeInsertInput!

  """upsert condition"""
  onConflict: ServiceModificationTypeOnConflict
}

"""
on_conflict condition type for table "service_modification_type"
"""
input ServiceModificationTypeOnConflict {
  constraint: ServiceModificationTypeConstraint!
  updateColumns: [ServiceModificationTypeUpdateColumn!]! = []
  where: ServiceModificationTypeBoolExp
}

"""Ordering options when selecting data from "service_modification_type"."""
input ServiceModificationTypeOrderBy {
  createdAt: OrderBy
  description: OrderBy
  id: OrderBy
  label: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  service_modificationsAggregate: ServiceModificationAggregateOrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: service_modification_type"""
input ServiceModificationTypePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "service_modification_type"
"""
enum ServiceModificationTypeSelectColumn {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

"""
input type for updating data in table "service_modification_type"
"""
input ServiceModificationTypeSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Modification type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type ServiceModificationTypeStddevFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddev() on columns of table "service_modification_type"
"""
input ServiceModificationTypeStddevOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevPop on columns"""
type ServiceModificationTypeStddevPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevPop() on columns of table "service_modification_type"
"""
input ServiceModificationTypeStddevPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate stddevSamp on columns"""
type ServiceModificationTypeStddevSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by stddevSamp() on columns of table "service_modification_type"
"""
input ServiceModificationTypeStddevSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
Streaming cursor of the table "service_modification_type"
"""
input ServiceModificationTypeStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ServiceModificationTypeStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ServiceModificationTypeStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Optional description"""
  description: String

  """Unique identifier"""
  id: Int

  """Modification type name (unique)"""
  label: String

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type ServiceModificationTypeSumFields {
  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int
}

"""
order by sum() on columns of table "service_modification_type"
"""
input ServiceModificationTypeSumOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "service_modification_type"
"""
enum ServiceModificationTypeUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  label

  """column name"""
  oid

  """column name"""
  updatedAt
}

input ServiceModificationTypeUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ServiceModificationTypeIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ServiceModificationTypeSetInput

  """filter the rows which have to be updated"""
  where: ServiceModificationTypeBoolExp!
}

"""aggregate varPop on columns"""
type ServiceModificationTypeVarPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varPop() on columns of table "service_modification_type"
"""
input ServiceModificationTypeVarPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate varSamp on columns"""
type ServiceModificationTypeVarSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by varSamp() on columns of table "service_modification_type"
"""
input ServiceModificationTypeVarSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""aggregate variance on columns"""
type ServiceModificationTypeVarianceFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float
}

"""
order by variance() on columns of table "service_modification_type"
"""
input ServiceModificationTypeVarianceOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy
}

"""
update columns of table "service_modification"
"""
enum ServiceModificationUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  oid

  """column name"""
  serviceId

  """column name"""
  typeId

  """column name"""
  updatedAt
}

input ServiceModificationUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ServiceModificationIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ServiceModificationSetInput

  """filter the rows which have to be updated"""
  where: ServiceModificationBoolExp!
}

"""aggregate varPop on columns"""
type ServiceModificationVarPopFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by varPop() on columns of table "service_modification"
"""
input ServiceModificationVarPopOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""aggregate varSamp on columns"""
type ServiceModificationVarSampFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by varSamp() on columns of table "service_modification"
"""
input ServiceModificationVarSampOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""aggregate variance on columns"""
type ServiceModificationVarianceFields {
  """Hour deduction amount"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Service reference"""
  serviceId: Float

  """Modification type reference"""
  typeId: Float
}

"""
order by variance() on columns of table "service_modification"
"""
input ServiceModificationVarianceOrderBy {
  """Hour deduction amount"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Service reference"""
  serviceId: OrderBy

  """Modification type reference"""
  typeId: OrderBy
}

"""
response of any mutation on the table "service"
"""
type ServiceMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Service!]!
}

"""
input type for inserting object relation for remote table "service"
"""
input ServiceObjRelInsertInput {
  data: ServiceInsertInput!

  """upsert condition"""
  onConflict: ServiceOnConflict
}

"""
on_conflict condition type for table "service"
"""
input ServiceOnConflict {
  constraint: ServiceConstraint!
  updateColumns: [ServiceUpdateColumn!]! = []
  where: ServiceBoolExp
}

"""Ordering options when selecting data from "service"."""
input ServiceOrderBy {
  createdAt: OrderBy
  hours: OrderBy
  id: OrderBy
  messagesAggregate: MessageAggregateOrderBy
  modificationsAggregate: ServiceModificationAggregateOrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  prioritiesAggregate: PriorityAggregateOrderBy
  requestsAggregate: RequestAggregateOrderBy
  teacher: TeacherOrderBy
  teacherId: OrderBy
  updatedAt: OrderBy
  year: OrderBy
  yearByYear: YearOrderBy
}

"""primary key columns input for table: service"""
input ServicePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "service"
"""
enum ServiceSelectColumn {
  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  teacherId

  """column name"""
  updatedAt

  """column name"""
  year
}

"""
input type for updating data in table "service"
"""
input ServiceSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Required teaching hours before modifications"""
  hours: Float

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate stddev on columns"""
type ServiceStddevFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddev() on columns of table "service"
"""
input ServiceStddevOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevPop on columns"""
type ServiceStddevPopFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevPop() on columns of table "service"
"""
input ServiceStddevPopOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate stddevSamp on columns"""
type ServiceStddevSampFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by stddevSamp() on columns of table "service"
"""
input ServiceStddevSampOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Streaming cursor of the table "service"
"""
input ServiceStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: ServiceStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input ServiceStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year reference"""
  year: Int
}

"""aggregate sum on columns"""
type ServiceSumFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """Academic year reference"""
  year: Int
}

"""
order by sum() on columns of table "service"
"""
input ServiceSumOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
update columns of table "service"
"""
enum ServiceUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  hours

  """column name"""
  oid

  """column name"""
  teacherId

  """column name"""
  updatedAt

  """column name"""
  year
}

input ServiceUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: ServiceIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: ServiceSetInput

  """filter the rows which have to be updated"""
  where: ServiceBoolExp!
}

"""aggregate varPop on columns"""
type ServiceVarPopFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varPop() on columns of table "service"
"""
input ServiceVarPopOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate varSamp on columns"""
type ServiceVarSampFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by varSamp() on columns of table "service"
"""
input ServiceVarSampOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""aggregate variance on columns"""
type ServiceVarianceFields {
  """Required teaching hours before modifications"""
  hours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float

  """Academic year reference"""
  year: Float
}

"""
order by variance() on columns of table "service"
"""
input ServiceVarianceOrderBy {
  """Required teaching hours before modifications"""
  hours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """Academic year reference"""
  year: OrderBy
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""Teachers information and status"""
type Teacher {
  """Controls teacher login access"""
  access: Boolean!

  """Controls automatic service creation for upcoming years"""
  active: Boolean!

  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float

  """An array relationship"""
  coordinations(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """An aggregate relationship"""
  coordinationsAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Computed display name"""
  displayname: String

  """Teacher's email address (unique)"""
  email: String!

  """Teacher's first name"""
  firstname: String!

  """Unique identifier"""
  id: Int!

  """Teacher's last name"""
  lastname: String!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  position: Position

  """Teacher's position reference"""
  positionId: Int

  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): [TeacherRole!]!

  """An aggregate relationship"""
  rolesAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): TeacherRoleAggregate!

  """An array relationship"""
  services(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """An aggregate relationship"""
  servicesAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): ServiceAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Controls visibility to other teachers"""
  visible: Boolean!
}

"""
aggregated selection of "teacher"
"""
type TeacherAggregate {
  aggregate: TeacherAggregateFields
  nodes: [Teacher!]!
}

input TeacherAggregateBoolExp {
  bool_and: teacherAggregateBoolExpBool_and
  bool_or: teacherAggregateBoolExpBool_or
  count: teacherAggregateBoolExpCount
}

"""
aggregate fields of "teacher"
"""
type TeacherAggregateFields {
  avg: TeacherAvgFields
  count(columns: [TeacherSelectColumn!], distinct: Boolean): Int!
  max: TeacherMaxFields
  min: TeacherMinFields
  stddev: TeacherStddevFields
  stddevPop: TeacherStddevPopFields
  stddevSamp: TeacherStddevSampFields
  sum: TeacherSumFields
  varPop: TeacherVarPopFields
  varSamp: TeacherVarSampFields
  variance: TeacherVarianceFields
}

"""
order by aggregate values of table "teacher"
"""
input TeacherAggregateOrderBy {
  avg: TeacherAvgOrderBy
  count: OrderBy
  max: TeacherMaxOrderBy
  min: TeacherMinOrderBy
  stddev: TeacherStddevOrderBy
  stddevPop: TeacherStddevPopOrderBy
  stddevSamp: TeacherStddevSampOrderBy
  sum: TeacherSumOrderBy
  varPop: TeacherVarPopOrderBy
  varSamp: TeacherVarSampOrderBy
  variance: TeacherVarianceOrderBy
}

"""
input type for inserting array relation for remote table "teacher"
"""
input TeacherArrRelInsertInput {
  data: [TeacherInsertInput!]!

  """upsert condition"""
  onConflict: TeacherOnConflict
}

"""aggregate avg on columns"""
type TeacherAvgFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by avg() on columns of table "teacher"
"""
input TeacherAvgOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""
Boolean expression to filter rows from the table "teacher". All fields are combined with a logical 'AND'.
"""
input TeacherBoolExp {
  _and: [TeacherBoolExp!]
  _not: TeacherBoolExp
  _or: [TeacherBoolExp!]
  access: BooleanComparisonExp
  active: BooleanComparisonExp
  alias: StringComparisonExp
  baseServiceHours: FloatComparisonExp
  coordinations: CoordinationBoolExp
  coordinationsAggregate: CoordinationAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  displayname: StringComparisonExp
  email: StringComparisonExp
  firstname: StringComparisonExp
  id: IntComparisonExp
  lastname: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  position: PositionBoolExp
  positionId: IntComparisonExp
  roles: TeacherRoleBoolExp
  rolesAggregate: TeacherRoleAggregateBoolExp
  services: ServiceBoolExp
  servicesAggregate: ServiceAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "teacher"
"""
enum TeacherConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  teacher_id_key

  """
  unique or primary key constraint on columns "email", "oid"
  """
  teacher_oid_email_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  teacher_pkey
}

"""
input type for incrementing numeric columns in table "teacher"
"""
input TeacherIncInput {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int
}

"""
input type for inserting data into table "teacher"
"""
input TeacherInsertInput {
  """Controls teacher login access"""
  access: Boolean

  """Controls automatic service creation for upcoming years"""
  active: Boolean

  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float
  coordinations: CoordinationArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Teacher's email address (unique)"""
  email: String

  """Teacher's first name"""
  firstname: String

  """Teacher's last name"""
  lastname: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  position: PositionObjRelInsertInput

  """Teacher's position reference"""
  positionId: Int
  roles: TeacherRoleArrRelInsertInput
  services: ServiceArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to other teachers"""
  visible: Boolean
}

"""aggregate max on columns"""
type TeacherMaxFields {
  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed display name"""
  displayname: String

  """Teacher's email address (unique)"""
  email: String

  """Teacher's first name"""
  firstname: String

  """Unique identifier"""
  id: Int

  """Teacher's last name"""
  lastname: String

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "teacher"
"""
input TeacherMaxOrderBy {
  """Optional alias"""
  alias: OrderBy

  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Computed display name"""
  displayname: OrderBy

  """Teacher's email address (unique)"""
  email: OrderBy

  """Teacher's first name"""
  firstname: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Teacher's last name"""
  lastname: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type TeacherMinFields {
  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed display name"""
  displayname: String

  """Teacher's email address (unique)"""
  email: String

  """Teacher's first name"""
  firstname: String

  """Unique identifier"""
  id: Int

  """Teacher's last name"""
  lastname: String

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "teacher"
"""
input TeacherMinOrderBy {
  """Optional alias"""
  alias: OrderBy

  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Computed display name"""
  displayname: OrderBy

  """Teacher's email address (unique)"""
  email: OrderBy

  """Teacher's first name"""
  firstname: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Teacher's last name"""
  lastname: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "teacher"
"""
type TeacherMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Teacher!]!
}

"""
input type for inserting object relation for remote table "teacher"
"""
input TeacherObjRelInsertInput {
  data: TeacherInsertInput!

  """upsert condition"""
  onConflict: TeacherOnConflict
}

"""
on_conflict condition type for table "teacher"
"""
input TeacherOnConflict {
  constraint: TeacherConstraint!
  updateColumns: [TeacherUpdateColumn!]! = []
  where: TeacherBoolExp
}

"""Ordering options when selecting data from "teacher"."""
input TeacherOrderBy {
  access: OrderBy
  active: OrderBy
  alias: OrderBy
  baseServiceHours: OrderBy
  coordinationsAggregate: CoordinationAggregateOrderBy
  createdAt: OrderBy
  displayname: OrderBy
  email: OrderBy
  firstname: OrderBy
  id: OrderBy
  lastname: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  position: PositionOrderBy
  positionId: OrderBy
  rolesAggregate: TeacherRoleAggregateOrderBy
  servicesAggregate: ServiceAggregateOrderBy
  updatedAt: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: teacher"""
input TeacherPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""Teacher role assignments"""
type TeacherRole {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """Role reference"""
  role: RoleEnum!

  """An object relationship"""
  roleByRole: Role!

  """An object relationship"""
  teacher: Teacher!

  """Teacher reference"""
  teacherId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!
}

"""
aggregated selection of "teacher_role"
"""
type TeacherRoleAggregate {
  aggregate: TeacherRoleAggregateFields
  nodes: [TeacherRole!]!
}

input TeacherRoleAggregateBoolExp {
  count: teacherRoleAggregateBoolExpCount
}

"""
aggregate fields of "teacher_role"
"""
type TeacherRoleAggregateFields {
  avg: TeacherRoleAvgFields
  count(columns: [TeacherRoleSelectColumn!], distinct: Boolean): Int!
  max: TeacherRoleMaxFields
  min: TeacherRoleMinFields
  stddev: TeacherRoleStddevFields
  stddevPop: TeacherRoleStddevPopFields
  stddevSamp: TeacherRoleStddevSampFields
  sum: TeacherRoleSumFields
  varPop: TeacherRoleVarPopFields
  varSamp: TeacherRoleVarSampFields
  variance: TeacherRoleVarianceFields
}

"""
order by aggregate values of table "teacher_role"
"""
input TeacherRoleAggregateOrderBy {
  avg: TeacherRoleAvgOrderBy
  count: OrderBy
  max: TeacherRoleMaxOrderBy
  min: TeacherRoleMinOrderBy
  stddev: TeacherRoleStddevOrderBy
  stddevPop: TeacherRoleStddevPopOrderBy
  stddevSamp: TeacherRoleStddevSampOrderBy
  sum: TeacherRoleSumOrderBy
  varPop: TeacherRoleVarPopOrderBy
  varSamp: TeacherRoleVarSampOrderBy
  variance: TeacherRoleVarianceOrderBy
}

"""
input type for inserting array relation for remote table "teacher_role"
"""
input TeacherRoleArrRelInsertInput {
  data: [TeacherRoleInsertInput!]!

  """upsert condition"""
  onConflict: TeacherRoleOnConflict
}

"""aggregate avg on columns"""
type TeacherRoleAvgFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by avg() on columns of table "teacher_role"
"""
input TeacherRoleAvgOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""
Boolean expression to filter rows from the table "teacher_role". All fields are combined with a logical 'AND'.
"""
input TeacherRoleBoolExp {
  _and: [TeacherRoleBoolExp!]
  _not: TeacherRoleBoolExp
  _or: [TeacherRoleBoolExp!]
  comment: StringComparisonExp
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  role: RoleEnumComparisonExp
  roleByRole: RoleBoolExp
  teacher: TeacherBoolExp
  teacherId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "teacher_role"
"""
enum TeacherRoleConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  teacher_role_id_key

  """
  unique or primary key constraint on columns "teacher_id", "role", "oid"
  """
  teacher_role_oid_teacher_id_role_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  teacher_role_pkey
}

"""
input type for incrementing numeric columns in table "teacher_role"
"""
input TeacherRoleIncInput {
  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int
}

"""
input type for inserting data into table "teacher_role"
"""
input TeacherRoleInsertInput {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput

  """Role reference"""
  role: RoleEnum
  roleByRole: RoleObjRelInsertInput
  teacher: TeacherObjRelInsertInput

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type TeacherRoleMaxFields {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "teacher_role"
"""
input TeacherRoleMaxOrderBy {
  """Additional information about this assignment"""
  comment: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type TeacherRoleMinFields {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "teacher_role"
"""
input TeacherRoleMinOrderBy {
  """Additional information about this assignment"""
  comment: OrderBy

  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "teacher_role"
"""
type TeacherRoleMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [TeacherRole!]!
}

"""
on_conflict condition type for table "teacher_role"
"""
input TeacherRoleOnConflict {
  constraint: TeacherRoleConstraint!
  updateColumns: [TeacherRoleUpdateColumn!]! = []
  where: TeacherRoleBoolExp
}

"""Ordering options when selecting data from "teacher_role"."""
input TeacherRoleOrderBy {
  comment: OrderBy
  createdAt: OrderBy
  id: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  role: OrderBy
  roleByRole: RoleOrderBy
  teacher: TeacherOrderBy
  teacherId: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: teacher_role"""
input TeacherRolePkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "teacher_role"
"""
enum TeacherRoleSelectColumn {
  """column name"""
  comment

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  oid

  """column name"""
  role

  """column name"""
  teacherId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "teacher_role"
"""
input TeacherRoleSetInput {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """Role reference"""
  role: RoleEnum

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type TeacherRoleStddevFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by stddev() on columns of table "teacher_role"
"""
input TeacherRoleStddevOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeacherRoleStddevPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by stddevPop() on columns of table "teacher_role"
"""
input TeacherRoleStddevPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeacherRoleStddevSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by stddevSamp() on columns of table "teacher_role"
"""
input TeacherRoleStddevSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""
Streaming cursor of the table "teacher_role"
"""
input TeacherRoleStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeacherRoleStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeacherRoleStreamCursorValueInput {
  """Additional information about this assignment"""
  comment: String

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Role reference"""
  role: RoleEnum

  """Teacher reference"""
  teacherId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type TeacherRoleSumFields {
  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher reference"""
  teacherId: Int
}

"""
order by sum() on columns of table "teacher_role"
"""
input TeacherRoleSumOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""
update columns of table "teacher_role"
"""
enum TeacherRoleUpdateColumn {
  """column name"""
  comment

  """column name"""
  createdAt

  """column name"""
  oid

  """column name"""
  role

  """column name"""
  teacherId

  """column name"""
  updatedAt
}

input TeacherRoleUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeacherRoleIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeacherRoleSetInput

  """filter the rows which have to be updated"""
  where: TeacherRoleBoolExp!
}

"""aggregate varPop on columns"""
type TeacherRoleVarPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by varPop() on columns of table "teacher_role"
"""
input TeacherRoleVarPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""aggregate varSamp on columns"""
type TeacherRoleVarSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by varSamp() on columns of table "teacher_role"
"""
input TeacherRoleVarSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""aggregate variance on columns"""
type TeacherRoleVarianceFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher reference"""
  teacherId: Float
}

"""
order by variance() on columns of table "teacher_role"
"""
input TeacherRoleVarianceOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher reference"""
  teacherId: OrderBy
}

"""
select columns of table "teacher"
"""
enum TeacherSelectColumn {
  """column name"""
  access

  """column name"""
  active

  """column name"""
  alias

  """column name"""
  baseServiceHours

  """column name"""
  createdAt

  """column name"""
  displayname

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  oid

  """column name"""
  positionId

  """column name"""
  updatedAt

  """column name"""
  visible
}

"""
select "teacherAggregateBoolExpBool_andArgumentsColumns" columns of table "teacher"
"""
enum TeacherSelectColumnTeacherAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  access

  """column name"""
  active

  """column name"""
  visible
}

"""
select "teacherAggregateBoolExpBool_orArgumentsColumns" columns of table "teacher"
"""
enum TeacherSelectColumnTeacherAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  access

  """column name"""
  active

  """column name"""
  visible
}

"""
input type for updating data in table "teacher"
"""
input TeacherSetInput {
  """Controls teacher login access"""
  access: Boolean

  """Controls automatic service creation for upcoming years"""
  active: Boolean

  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Teacher's email address (unique)"""
  email: String

  """Teacher's first name"""
  firstname: String

  """Teacher's last name"""
  lastname: String

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to other teachers"""
  visible: Boolean
}

"""aggregate stddev on columns"""
type TeacherStddevFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by stddev() on columns of table "teacher"
"""
input TeacherStddevOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""aggregate stddevPop on columns"""
type TeacherStddevPopFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by stddevPop() on columns of table "teacher"
"""
input TeacherStddevPopOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TeacherStddevSampFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by stddevSamp() on columns of table "teacher"
"""
input TeacherStddevSampOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""
Streaming cursor of the table "teacher"
"""
input TeacherStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TeacherStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TeacherStreamCursorValueInput {
  """Controls teacher login access"""
  access: Boolean

  """Controls automatic service creation for upcoming years"""
  active: Boolean

  """Optional alias"""
  alias: String

  """Individual teaching hour override"""
  baseServiceHours: Float

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Computed display name"""
  displayname: String

  """Teacher's email address (unique)"""
  email: String

  """Teacher's first name"""
  firstname: String

  """Unique identifier"""
  id: Int

  """Teacher's last name"""
  lastname: String

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to other teachers"""
  visible: Boolean
}

"""aggregate sum on columns"""
type TeacherSumFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Teacher's position reference"""
  positionId: Int
}

"""
order by sum() on columns of table "teacher"
"""
input TeacherSumOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""
update columns of table "teacher"
"""
enum TeacherUpdateColumn {
  """column name"""
  access

  """column name"""
  active

  """column name"""
  alias

  """column name"""
  baseServiceHours

  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  lastname

  """column name"""
  oid

  """column name"""
  positionId

  """column name"""
  updatedAt

  """column name"""
  visible
}

input TeacherUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TeacherIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TeacherSetInput

  """filter the rows which have to be updated"""
  where: TeacherBoolExp!
}

"""aggregate varPop on columns"""
type TeacherVarPopFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by varPop() on columns of table "teacher"
"""
input TeacherVarPopOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""aggregate varSamp on columns"""
type TeacherVarSampFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by varSamp() on columns of table "teacher"
"""
input TeacherVarSampOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""aggregate variance on columns"""
type TeacherVarianceFields {
  """Individual teaching hour override"""
  baseServiceHours: Float

  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Teacher's position reference"""
  positionId: Float
}

"""
order by variance() on columns of table "teacher"
"""
input TeacherVarianceOrderBy {
  """Individual teaching hour override"""
  baseServiceHours: OrderBy

  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Teacher's position reference"""
  positionId: OrderBy
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""Specialization tracks within academic programs"""
type Track {
  """An array relationship"""
  coordinations(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """An aggregate relationship"""
  coordinationsAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """An array relationship"""
  courses(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """An aggregate relationship"""
  coursesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Unique identifier"""
  id: Int!

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String!

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An object relationship"""
  program: Program!

  """Program reference"""
  programId: Int!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Controls visibility to teachers"""
  visible: Boolean!
}

"""
aggregated selection of "track"
"""
type TrackAggregate {
  aggregate: TrackAggregateFields
  nodes: [Track!]!
}

input TrackAggregateBoolExp {
  bool_and: trackAggregateBoolExpBool_and
  bool_or: trackAggregateBoolExpBool_or
  count: trackAggregateBoolExpCount
}

"""
aggregate fields of "track"
"""
type TrackAggregateFields {
  avg: TrackAvgFields
  count(columns: [TrackSelectColumn!], distinct: Boolean): Int!
  max: TrackMaxFields
  min: TrackMinFields
  stddev: TrackStddevFields
  stddevPop: TrackStddevPopFields
  stddevSamp: TrackStddevSampFields
  sum: TrackSumFields
  varPop: TrackVarPopFields
  varSamp: TrackVarSampFields
  variance: TrackVarianceFields
}

"""
order by aggregate values of table "track"
"""
input TrackAggregateOrderBy {
  avg: TrackAvgOrderBy
  count: OrderBy
  max: TrackMaxOrderBy
  min: TrackMinOrderBy
  stddev: TrackStddevOrderBy
  stddevPop: TrackStddevPopOrderBy
  stddevSamp: TrackStddevSampOrderBy
  sum: TrackSumOrderBy
  varPop: TrackVarPopOrderBy
  varSamp: TrackVarSampOrderBy
  variance: TrackVarianceOrderBy
}

"""
input type for inserting array relation for remote table "track"
"""
input TrackArrRelInsertInput {
  data: [TrackInsertInput!]!

  """upsert condition"""
  onConflict: TrackOnConflict
}

"""aggregate avg on columns"""
type TrackAvgFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by avg() on columns of table "track"
"""
input TrackAvgOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""
Boolean expression to filter rows from the table "track". All fields are combined with a logical 'AND'.
"""
input TrackBoolExp {
  _and: [TrackBoolExp!]
  _not: TrackBoolExp
  _or: [TrackBoolExp!]
  coordinations: CoordinationBoolExp
  coordinationsAggregate: CoordinationAggregateBoolExp
  courses: CourseBoolExp
  coursesAggregate: CourseAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  id: IntComparisonExp
  name: StringComparisonExp
  nameDisplay: StringComparisonExp
  nameShort: StringComparisonExp
  nomImport: StringComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  program: ProgramBoolExp
  programId: IntComparisonExp
  updatedAt: TimestamptzComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "track"
"""
enum TrackConstraint {
  """
  unique or primary key constraint on columns "id"
  """
  track_id_key

  """
  unique or primary key constraint on columns "id", "program_id", "oid"
  """
  track_oid_program_id_id_key

  """
  unique or primary key constraint on columns "program_id", "name", "oid"
  """
  track_oid_program_id_name_key

  """
  unique or primary key constraint on columns "id", "oid"
  """
  track_pkey
}

"""
input type for incrementing numeric columns in table "track"
"""
input TrackIncInput {
  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int
}

"""
input type for inserting data into table "track"
"""
input TrackInsertInput {
  coordinations: CoordinationArrRelInsertInput
  courses: CourseArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  program: ProgramObjRelInsertInput

  """Program reference"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate max on columns"""
type TrackMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by max() on columns of table "track"
"""
input TrackMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""aggregate min on columns"""
type TrackMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz
}

"""
order by min() on columns of table "track"
"""
input TrackMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Unique identifier"""
  id: OrderBy

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: OrderBy

  """Computed display name"""
  nameDisplay: OrderBy

  """Abbreviated name"""
  nameShort: OrderBy
  nomImport: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy
}

"""
response of any mutation on the table "track"
"""
type TrackMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Track!]!
}

"""
input type for inserting object relation for remote table "track"
"""
input TrackObjRelInsertInput {
  data: TrackInsertInput!

  """upsert condition"""
  onConflict: TrackOnConflict
}

"""
on_conflict condition type for table "track"
"""
input TrackOnConflict {
  constraint: TrackConstraint!
  updateColumns: [TrackUpdateColumn!]! = []
  where: TrackBoolExp
}

"""Ordering options when selecting data from "track"."""
input TrackOrderBy {
  coordinationsAggregate: CoordinationAggregateOrderBy
  coursesAggregate: CourseAggregateOrderBy
  createdAt: OrderBy
  id: OrderBy
  name: OrderBy
  nameDisplay: OrderBy
  nameShort: OrderBy
  nomImport: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  program: ProgramOrderBy
  programId: OrderBy
  updatedAt: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: track"""
input TrackPkColumnsInput {
  """Unique identifier"""
  id: Int!

  """Organization reference"""
  oid: Int!
}

"""
select columns of table "track"
"""
enum TrackSelectColumn {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  name

  """column name"""
  nameDisplay

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  programId

  """column name"""
  updatedAt

  """column name"""
  visible
}

"""
select "trackAggregateBoolExpBool_andArgumentsColumns" columns of table "track"
"""
enum TrackSelectColumnTrackAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  visible
}

"""
select "trackAggregateBoolExpBool_orArgumentsColumns" columns of table "track"
"""
enum TrackSelectColumnTrackAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  visible
}

"""
input type for updating data in table "track"
"""
input TrackSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate stddev on columns"""
type TrackStddevFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by stddev() on columns of table "track"
"""
input TrackStddevOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""aggregate stddevPop on columns"""
type TrackStddevPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by stddevPop() on columns of table "track"
"""
input TrackStddevPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""aggregate stddevSamp on columns"""
type TrackStddevSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by stddevSamp() on columns of table "track"
"""
input TrackStddevSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""
Streaming cursor of the table "track"
"""
input TrackStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: TrackStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input TrackStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Unique identifier"""
  id: Int

  """
  Full name, unique within its program (e.g., Pure Mathematics, Applied Mathematics, Statistics, etc.)
  """
  name: String

  """Computed display name"""
  nameDisplay: String

  """Abbreviated name"""
  nameShort: String
  nomImport: String

  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate sum on columns"""
type TrackSumFields {
  """Unique identifier"""
  id: Int

  """Organization reference"""
  oid: Int

  """Program reference"""
  programId: Int
}

"""
order by sum() on columns of table "track"
"""
input TrackSumOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""
update columns of table "track"
"""
enum TrackUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  name

  """column name"""
  nameShort

  """column name"""
  nomImport

  """column name"""
  oid

  """column name"""
  programId

  """column name"""
  updatedAt

  """column name"""
  visible
}

input TrackUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TrackIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: TrackSetInput

  """filter the rows which have to be updated"""
  where: TrackBoolExp!
}

"""aggregate varPop on columns"""
type TrackVarPopFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by varPop() on columns of table "track"
"""
input TrackVarPopOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""aggregate varSamp on columns"""
type TrackVarSampFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by varSamp() on columns of table "track"
"""
input TrackVarSampOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""aggregate variance on columns"""
type TrackVarianceFields {
  """Unique identifier"""
  id: Float

  """Organization reference"""
  oid: Float

  """Program reference"""
  programId: Float
}

"""
order by variance() on columns of table "track"
"""
input TrackVarianceOrderBy {
  """Unique identifier"""
  id: OrderBy

  """Organization reference"""
  oid: OrderBy

  """Program reference"""
  programId: OrderBy
}

"""Academic years with current year designation and visibility control"""
type Year {
  """An array relationship"""
  courses(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """An aggregate relationship"""
  coursesAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """Timestamp when the record was created"""
  createdAt: timestamptz!

  """Current year flag"""
  current: Boolean!

  """Organization reference"""
  oid: Int!

  """An object relationship"""
  organization: Organization!

  """An array relationship"""
  priorities(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """An aggregate relationship"""
  prioritiesAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """An array relationship"""
  requests(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """An aggregate relationship"""
  requestsAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """An array relationship"""
  services(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """An aggregate relationship"""
  servicesAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): ServiceAggregate!

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz!

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int!

  """Controls visibility to teachers"""
  visible: Boolean!
}

"""
aggregated selection of "year"
"""
type YearAggregate {
  aggregate: YearAggregateFields
  nodes: [Year!]!
}

input YearAggregateBoolExp {
  bool_and: yearAggregateBoolExpBool_and
  bool_or: yearAggregateBoolExpBool_or
  count: yearAggregateBoolExpCount
}

"""
aggregate fields of "year"
"""
type YearAggregateFields {
  avg: YearAvgFields
  count(columns: [YearSelectColumn!], distinct: Boolean): Int!
  max: YearMaxFields
  min: YearMinFields
  stddev: YearStddevFields
  stddevPop: YearStddevPopFields
  stddevSamp: YearStddevSampFields
  sum: YearSumFields
  varPop: YearVarPopFields
  varSamp: YearVarSampFields
  variance: YearVarianceFields
}

"""
order by aggregate values of table "year"
"""
input YearAggregateOrderBy {
  avg: YearAvgOrderBy
  count: OrderBy
  max: YearMaxOrderBy
  min: YearMinOrderBy
  stddev: YearStddevOrderBy
  stddevPop: YearStddevPopOrderBy
  stddevSamp: YearStddevSampOrderBy
  sum: YearSumOrderBy
  varPop: YearVarPopOrderBy
  varSamp: YearVarSampOrderBy
  variance: YearVarianceOrderBy
}

"""
input type for inserting array relation for remote table "year"
"""
input YearArrRelInsertInput {
  data: [YearInsertInput!]!

  """upsert condition"""
  onConflict: YearOnConflict
}

"""aggregate avg on columns"""
type YearAvgFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by avg() on columns of table "year"
"""
input YearAvgOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""
Boolean expression to filter rows from the table "year". All fields are combined with a logical 'AND'.
"""
input YearBoolExp {
  _and: [YearBoolExp!]
  _not: YearBoolExp
  _or: [YearBoolExp!]
  courses: CourseBoolExp
  coursesAggregate: CourseAggregateBoolExp
  createdAt: TimestamptzComparisonExp
  current: BooleanComparisonExp
  oid: IntComparisonExp
  organization: OrganizationBoolExp
  priorities: PriorityBoolExp
  prioritiesAggregate: PriorityAggregateBoolExp
  requests: RequestBoolExp
  requestsAggregate: RequestAggregateBoolExp
  services: ServiceBoolExp
  servicesAggregate: ServiceAggregateBoolExp
  updatedAt: TimestamptzComparisonExp
  value: IntComparisonExp
  visible: BooleanComparisonExp
}

"""
unique or primary key constraints on table "year"
"""
enum YearConstraint {
  """
  unique or primary key constraint on columns "current", "oid"
  """
  unique_current_year

  """
  unique or primary key constraint on columns "value", "oid"
  """
  year_pkey
}

"""
input type for incrementing numeric columns in table "year"
"""
input YearIncInput {
  """Organization reference"""
  oid: Int

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int
}

"""
input type for inserting data into table "year"
"""
input YearInsertInput {
  courses: CourseArrRelInsertInput

  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Current year flag"""
  current: Boolean

  """Organization reference"""
  oid: Int
  organization: OrganizationObjRelInsertInput
  priorities: PriorityArrRelInsertInput
  requests: RequestArrRelInsertInput
  services: ServiceArrRelInsertInput

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate max on columns"""
type YearMaxFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int
}

"""
order by max() on columns of table "year"
"""
input YearMaxOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""aggregate min on columns"""
type YearMinFields {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int
}

"""
order by min() on columns of table "year"
"""
input YearMinOrderBy {
  """Timestamp when the record was created"""
  createdAt: OrderBy

  """Organization reference"""
  oid: OrderBy

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""
response of any mutation on the table "year"
"""
type YearMutationResponse {
  """number of rows affected by the mutation"""
  affectedRows: Int!

  """data from the rows affected by the mutation"""
  returning: [Year!]!
}

"""
input type for inserting object relation for remote table "year"
"""
input YearObjRelInsertInput {
  data: YearInsertInput!

  """upsert condition"""
  onConflict: YearOnConflict
}

"""
on_conflict condition type for table "year"
"""
input YearOnConflict {
  constraint: YearConstraint!
  updateColumns: [YearUpdateColumn!]! = []
  where: YearBoolExp
}

"""Ordering options when selecting data from "year"."""
input YearOrderBy {
  coursesAggregate: CourseAggregateOrderBy
  createdAt: OrderBy
  current: OrderBy
  oid: OrderBy
  organization: OrganizationOrderBy
  prioritiesAggregate: PriorityAggregateOrderBy
  requestsAggregate: RequestAggregateOrderBy
  servicesAggregate: ServiceAggregateOrderBy
  updatedAt: OrderBy
  value: OrderBy
  visible: OrderBy
}

"""primary key columns input for table: year"""
input YearPkColumnsInput {
  """Organization reference"""
  oid: Int!

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int!
}

"""
select columns of table "year"
"""
enum YearSelectColumn {
  """column name"""
  createdAt

  """column name"""
  current

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value

  """column name"""
  visible
}

"""
select "yearAggregateBoolExpBool_andArgumentsColumns" columns of table "year"
"""
enum YearSelectColumnYearAggregateBoolExpBool_andArgumentsColumns {
  """column name"""
  current

  """column name"""
  visible
}

"""
select "yearAggregateBoolExpBool_orArgumentsColumns" columns of table "year"
"""
enum YearSelectColumnYearAggregateBoolExpBool_orArgumentsColumns {
  """column name"""
  current

  """column name"""
  visible
}

"""
input type for updating data in table "year"
"""
input YearSetInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Current year flag"""
  current: Boolean

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate stddev on columns"""
type YearStddevFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by stddev() on columns of table "year"
"""
input YearStddevOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""aggregate stddevPop on columns"""
type YearStddevPopFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by stddevPop() on columns of table "year"
"""
input YearStddevPopOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""aggregate stddevSamp on columns"""
type YearStddevSampFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by stddevSamp() on columns of table "year"
"""
input YearStddevSampOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""
Streaming cursor of the table "year"
"""
input YearStreamCursorInput {
  """Stream column input with initial value"""
  initialValue: YearStreamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input YearStreamCursorValueInput {
  """Timestamp when the record was created"""
  createdAt: timestamptz

  """Current year flag"""
  current: Boolean

  """Organization reference"""
  oid: Int

  """
  Timestamp when the record was last updated, automatically managed by trigger
  """
  updatedAt: timestamptz

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int

  """Controls visibility to teachers"""
  visible: Boolean
}

"""aggregate sum on columns"""
type YearSumFields {
  """Organization reference"""
  oid: Int

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Int
}

"""
order by sum() on columns of table "year"
"""
input YearSumOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""
update columns of table "year"
"""
enum YearUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  current

  """column name"""
  oid

  """column name"""
  updatedAt

  """column name"""
  value

  """column name"""
  visible
}

input YearUpdates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: YearIncInput

  """sets the columns of the filtered rows to the given values"""
  _set: YearSetInput

  """filter the rows which have to be updated"""
  where: YearBoolExp!
}

"""aggregate varPop on columns"""
type YearVarPopFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by varPop() on columns of table "year"
"""
input YearVarPopOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""aggregate varSamp on columns"""
type YearVarSampFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by varSamp() on columns of table "year"
"""
input YearVarSampOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

"""aggregate variance on columns"""
type YearVarianceFields {
  """Organization reference"""
  oid: Float

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: Float
}

"""
order by variance() on columns of table "year"
"""
input YearVarianceOrderBy {
  """Organization reference"""
  oid: OrderBy

  """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
  value: OrderBy
}

input appSettingAggregateBoolExpCount {
  arguments: [AppSettingSelectColumn!]
  distinct: Boolean
  filter: AppSettingBoolExp
  predicate: IntComparisonExp!
}

input computeServicePrioritiesArgs {
  service_row: service_scalar
}

input computeYearPrioritiesArgs {
  p_year: Int
}

input coordinationAggregateBoolExpCount {
  arguments: [CoordinationSelectColumn!]
  distinct: Boolean
  filter: CoordinationBoolExp
  predicate: IntComparisonExp!
}

input copyYearCoursesArgs {
  p_year: Int
}

input copyYearServicesArgs {
  p_year: Int
}

input courseAggregateBoolExpBool_and {
  arguments: CourseSelectColumnCourseAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: CourseBoolExp
  predicate: BooleanComparisonExp!
}

input courseAggregateBoolExpBool_or {
  arguments: CourseSelectColumnCourseAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: CourseBoolExp
  predicate: BooleanComparisonExp!
}

input courseAggregateBoolExpCount {
  arguments: [CourseSelectColumn!]
  distinct: Boolean
  filter: CourseBoolExp
  predicate: IntComparisonExp!
}

input courseTypeAggregateBoolExpCount {
  arguments: [CourseTypeSelectColumn!]
  distinct: Boolean
  filter: CourseTypeBoolExp
  predicate: IntComparisonExp!
}

input createTeacherServiceArgs {
  p_teacher_id: Int
  p_year: Int
}

input createYearServicesArgs {
  p_year: Int
}

input currentPhaseAggregateBoolExpCount {
  arguments: [CurrentPhaseSelectColumn!]
  distinct: Boolean
  filter: CurrentPhaseBoolExp
  predicate: IntComparisonExp!
}

input degreeAggregateBoolExpBool_and {
  arguments: DegreeSelectColumnDegreeAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: DegreeBoolExp
  predicate: BooleanComparisonExp!
}

input degreeAggregateBoolExpBool_or {
  arguments: DegreeSelectColumnDegreeAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: DegreeBoolExp
  predicate: BooleanComparisonExp!
}

input degreeAggregateBoolExpCount {
  arguments: [DegreeSelectColumn!]
  distinct: Boolean
  filter: DegreeBoolExp
  predicate: IntComparisonExp!
}

input messageAggregateBoolExpCount {
  arguments: [MessageSelectColumn!]
  distinct: Boolean
  filter: MessageBoolExp
  predicate: IntComparisonExp!
}

"""mutation root"""
type mutation_root {
  """
  execute VOLATILE function "compute_service_priorities" which returns "priority"
  """
  computeServicePriorities(
    """
    input parameters for function "computeServicePriorities"
    """
    args: computeServicePrioritiesArgs!

    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """
  execute VOLATILE function "compute_year_priorities" which returns "priority"
  """
  computeYearPriorities(
    """
    input parameters for function "computeYearPriorities"
    """
    args: computeYearPrioritiesArgs!

    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """
  execute VOLATILE function "copy_year_courses" which returns "course"
  """
  copyYearCourses(
    """
    input parameters for function "copyYearCourses"
    """
    args: copyYearCoursesArgs!

    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """
  execute VOLATILE function "copy_year_services" which returns "service"
  """
  copyYearServices(
    """
    input parameters for function "copyYearServices"
    """
    args: copyYearServicesArgs!

    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  execute VOLATILE function "create_teacher_service" which returns "service"
  """
  createTeacherService(
    """
    input parameters for function "createTeacherService"
    """
    args: createTeacherServiceArgs!

    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  execute VOLATILE function "create_year_services" which returns "service"
  """
  createYearServices(
    """
    input parameters for function "createYearServices"
    """
    args: createYearServicesArgs!

    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  delete data from the table: "app_setting"
  """
  deleteAppSetting(
    """filter the rows which have to be deleted"""
    where: AppSettingBoolExp!
  ): AppSettingMutationResponse

  """
  delete single row from the table: "app_setting"
  """
  deleteAppSettingByPk(
    """Setting name (unique)"""
    key: String!

    """Organization reference"""
    oid: Int!
  ): AppSetting

  """
  delete data from the table: "coordination"
  """
  deleteCoordination(
    """filter the rows which have to be deleted"""
    where: CoordinationBoolExp!
  ): CoordinationMutationResponse

  """
  delete single row from the table: "coordination"
  """
  deleteCoordinationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Coordination

  """
  delete data from the table: "course"
  """
  deleteCourse(
    """filter the rows which have to be deleted"""
    where: CourseBoolExp!
  ): CourseMutationResponse

  """
  delete single row from the table: "course"
  """
  deleteCourseByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Course

  """
  delete data from the table: "course_type"
  """
  deleteCourseType(
    """filter the rows which have to be deleted"""
    where: CourseTypeBoolExp!
  ): CourseTypeMutationResponse

  """
  delete single row from the table: "course_type"
  """
  deleteCourseTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): CourseType

  """
  delete data from the table: "current_phase"
  """
  deleteCurrentPhase(
    """filter the rows which have to be deleted"""
    where: CurrentPhaseBoolExp!
  ): CurrentPhaseMutationResponse

  """
  delete single row from the table: "current_phase"
  """
  deleteCurrentPhaseByPk(
    """Organization reference"""
    oid: Int!
  ): CurrentPhase

  """
  delete data from the table: "degree"
  """
  deleteDegree(
    """filter the rows which have to be deleted"""
    where: DegreeBoolExp!
  ): DegreeMutationResponse

  """
  delete single row from the table: "degree"
  """
  deleteDegreeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Degree

  """
  delete data from the table: "locale"
  """
  deleteLocale(
    """filter the rows which have to be deleted"""
    where: LocaleBoolExp!
  ): LocaleMutationResponse

  """
  delete single row from the table: "locale"
  """
  deleteLocaleByPk(
    """Unique identifier"""
    value: String!
  ): Locale

  """
  delete data from the table: "message"
  """
  deleteMessage(
    """filter the rows which have to be deleted"""
    where: MessageBoolExp!
  ): MessageMutationResponse

  """
  delete single row from the table: "message"
  """
  deleteMessageByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Message

  """
  delete data from the table: "organization"
  """
  deleteOrganization(
    """filter the rows which have to be deleted"""
    where: OrganizationBoolExp!
  ): OrganizationMutationResponse

  """
  delete single row from the table: "organization"
  """
  deleteOrganizationByPk(
    """Unique identifier"""
    id: Int!
  ): Organization

  """
  delete data from the table: "phase"
  """
  deletePhase(
    """filter the rows which have to be deleted"""
    where: PhaseBoolExp!
  ): PhaseMutationResponse

  """
  delete single row from the table: "phase"
  """
  deletePhaseByPk(
    """Unique identifier"""
    value: String!
  ): Phase

  """
  delete data from the table: "position"
  """
  deletePosition(
    """filter the rows which have to be deleted"""
    where: PositionBoolExp!
  ): PositionMutationResponse

  """
  delete single row from the table: "position"
  """
  deletePositionByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Position

  """
  delete data from the table: "priority"
  """
  deletePriority(
    """filter the rows which have to be deleted"""
    where: PriorityBoolExp!
  ): PriorityMutationResponse

  """
  delete single row from the table: "priority"
  """
  deletePriorityByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Priority

  """
  delete data from the table: "program"
  """
  deleteProgram(
    """filter the rows which have to be deleted"""
    where: ProgramBoolExp!
  ): ProgramMutationResponse

  """
  delete single row from the table: "program"
  """
  deleteProgramByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Program

  """
  delete data from the table: "request"
  """
  deleteRequest(
    """filter the rows which have to be deleted"""
    where: RequestBoolExp!
  ): RequestMutationResponse

  """
  delete single row from the table: "request"
  """
  deleteRequestByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Request

  """
  delete data from the table: "request_type"
  """
  deleteRequestType(
    """filter the rows which have to be deleted"""
    where: RequestTypeBoolExp!
  ): RequestTypeMutationResponse

  """
  delete single row from the table: "request_type"
  """
  deleteRequestTypeByPk(
    """Unique identifier"""
    value: String!
  ): RequestType

  """
  delete data from the table: "role"
  """
  deleteRole(
    """filter the rows which have to be deleted"""
    where: RoleBoolExp!
  ): RoleMutationResponse

  """
  delete single row from the table: "role"
  """
  deleteRoleByPk(
    """Unique identifier"""
    value: String!
  ): Role

  """
  delete data from the table: "service"
  """
  deleteService(
    """filter the rows which have to be deleted"""
    where: ServiceBoolExp!
  ): ServiceMutationResponse

  """
  delete single row from the table: "service"
  """
  deleteServiceByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Service

  """
  delete data from the table: "service_modification"
  """
  deleteServiceModification(
    """filter the rows which have to be deleted"""
    where: ServiceModificationBoolExp!
  ): ServiceModificationMutationResponse

  """
  delete single row from the table: "service_modification"
  """
  deleteServiceModificationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModification

  """
  delete data from the table: "service_modification_type"
  """
  deleteServiceModificationType(
    """filter the rows which have to be deleted"""
    where: ServiceModificationTypeBoolExp!
  ): ServiceModificationTypeMutationResponse

  """
  delete single row from the table: "service_modification_type"
  """
  deleteServiceModificationTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModificationType

  """
  delete data from the table: "teacher"
  """
  deleteTeacher(
    """filter the rows which have to be deleted"""
    where: TeacherBoolExp!
  ): TeacherMutationResponse

  """
  delete single row from the table: "teacher"
  """
  deleteTeacherByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Teacher

  """
  delete data from the table: "teacher_role"
  """
  deleteTeacherRole(
    """filter the rows which have to be deleted"""
    where: TeacherRoleBoolExp!
  ): TeacherRoleMutationResponse

  """
  delete single row from the table: "teacher_role"
  """
  deleteTeacherRoleByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): TeacherRole

  """
  delete data from the table: "track"
  """
  deleteTrack(
    """filter the rows which have to be deleted"""
    where: TrackBoolExp!
  ): TrackMutationResponse

  """
  delete single row from the table: "track"
  """
  deleteTrackByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Track

  """
  delete data from the table: "year"
  """
  deleteYear(
    """filter the rows which have to be deleted"""
    where: YearBoolExp!
  ): YearMutationResponse

  """
  delete single row from the table: "year"
  """
  deleteYearByPk(
    """Organization reference"""
    oid: Int!

    """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
    value: Int!
  ): Year

  """
  execute VOLATILE function "dummy_function" which returns "app_setting"
  """
  dummyFunction(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): [AppSetting!]!

  """
  insert data into the table: "app_setting"
  """
  insertAppSetting(
    """the rows to be inserted"""
    objects: [AppSettingInsertInput!]!

    """upsert condition"""
    onConflict: AppSettingOnConflict
  ): AppSettingMutationResponse

  """
  insert a single row into the table: "app_setting"
  """
  insertAppSettingOne(
    """the row to be inserted"""
    object: AppSettingInsertInput!

    """upsert condition"""
    onConflict: AppSettingOnConflict
  ): AppSetting

  """
  insert data into the table: "coordination"
  """
  insertCoordination(
    """the rows to be inserted"""
    objects: [CoordinationInsertInput!]!

    """upsert condition"""
    onConflict: CoordinationOnConflict
  ): CoordinationMutationResponse

  """
  insert a single row into the table: "coordination"
  """
  insertCoordinationOne(
    """the row to be inserted"""
    object: CoordinationInsertInput!

    """upsert condition"""
    onConflict: CoordinationOnConflict
  ): Coordination

  """
  insert data into the table: "course"
  """
  insertCourse(
    """the rows to be inserted"""
    objects: [CourseInsertInput!]!

    """upsert condition"""
    onConflict: CourseOnConflict
  ): CourseMutationResponse

  """
  insert a single row into the table: "course"
  """
  insertCourseOne(
    """the row to be inserted"""
    object: CourseInsertInput!

    """upsert condition"""
    onConflict: CourseOnConflict
  ): Course

  """
  insert data into the table: "course_type"
  """
  insertCourseType(
    """the rows to be inserted"""
    objects: [CourseTypeInsertInput!]!

    """upsert condition"""
    onConflict: CourseTypeOnConflict
  ): CourseTypeMutationResponse

  """
  insert a single row into the table: "course_type"
  """
  insertCourseTypeOne(
    """the row to be inserted"""
    object: CourseTypeInsertInput!

    """upsert condition"""
    onConflict: CourseTypeOnConflict
  ): CourseType

  """
  insert data into the table: "current_phase"
  """
  insertCurrentPhase(
    """the rows to be inserted"""
    objects: [CurrentPhaseInsertInput!]!

    """upsert condition"""
    onConflict: CurrentPhaseOnConflict
  ): CurrentPhaseMutationResponse

  """
  insert a single row into the table: "current_phase"
  """
  insertCurrentPhaseOne(
    """the row to be inserted"""
    object: CurrentPhaseInsertInput!

    """upsert condition"""
    onConflict: CurrentPhaseOnConflict
  ): CurrentPhase

  """
  insert data into the table: "degree"
  """
  insertDegree(
    """the rows to be inserted"""
    objects: [DegreeInsertInput!]!

    """upsert condition"""
    onConflict: DegreeOnConflict
  ): DegreeMutationResponse

  """
  insert a single row into the table: "degree"
  """
  insertDegreeOne(
    """the row to be inserted"""
    object: DegreeInsertInput!

    """upsert condition"""
    onConflict: DegreeOnConflict
  ): Degree

  """
  insert data into the table: "locale"
  """
  insertLocale(
    """the rows to be inserted"""
    objects: [LocaleInsertInput!]!

    """upsert condition"""
    onConflict: LocaleOnConflict
  ): LocaleMutationResponse

  """
  insert a single row into the table: "locale"
  """
  insertLocaleOne(
    """the row to be inserted"""
    object: LocaleInsertInput!

    """upsert condition"""
    onConflict: LocaleOnConflict
  ): Locale

  """
  insert data into the table: "message"
  """
  insertMessage(
    """the rows to be inserted"""
    objects: [MessageInsertInput!]!

    """upsert condition"""
    onConflict: MessageOnConflict
  ): MessageMutationResponse

  """
  insert a single row into the table: "message"
  """
  insertMessageOne(
    """the row to be inserted"""
    object: MessageInsertInput!

    """upsert condition"""
    onConflict: MessageOnConflict
  ): Message

  """
  insert data into the table: "organization"
  """
  insertOrganization(
    """the rows to be inserted"""
    objects: [OrganizationInsertInput!]!

    """upsert condition"""
    onConflict: OrganizationOnConflict
  ): OrganizationMutationResponse

  """
  insert a single row into the table: "organization"
  """
  insertOrganizationOne(
    """the row to be inserted"""
    object: OrganizationInsertInput!

    """upsert condition"""
    onConflict: OrganizationOnConflict
  ): Organization

  """
  insert data into the table: "phase"
  """
  insertPhase(
    """the rows to be inserted"""
    objects: [PhaseInsertInput!]!

    """upsert condition"""
    onConflict: PhaseOnConflict
  ): PhaseMutationResponse

  """
  insert a single row into the table: "phase"
  """
  insertPhaseOne(
    """the row to be inserted"""
    object: PhaseInsertInput!

    """upsert condition"""
    onConflict: PhaseOnConflict
  ): Phase

  """
  insert data into the table: "position"
  """
  insertPosition(
    """the rows to be inserted"""
    objects: [PositionInsertInput!]!

    """upsert condition"""
    onConflict: PositionOnConflict
  ): PositionMutationResponse

  """
  insert a single row into the table: "position"
  """
  insertPositionOne(
    """the row to be inserted"""
    object: PositionInsertInput!

    """upsert condition"""
    onConflict: PositionOnConflict
  ): Position

  """
  insert data into the table: "priority"
  """
  insertPriority(
    """the rows to be inserted"""
    objects: [PriorityInsertInput!]!

    """upsert condition"""
    onConflict: PriorityOnConflict
  ): PriorityMutationResponse

  """
  insert a single row into the table: "priority"
  """
  insertPriorityOne(
    """the row to be inserted"""
    object: PriorityInsertInput!

    """upsert condition"""
    onConflict: PriorityOnConflict
  ): Priority

  """
  insert data into the table: "program"
  """
  insertProgram(
    """the rows to be inserted"""
    objects: [ProgramInsertInput!]!

    """upsert condition"""
    onConflict: ProgramOnConflict
  ): ProgramMutationResponse

  """
  insert a single row into the table: "program"
  """
  insertProgramOne(
    """the row to be inserted"""
    object: ProgramInsertInput!

    """upsert condition"""
    onConflict: ProgramOnConflict
  ): Program

  """
  insert data into the table: "request"
  """
  insertRequest(
    """the rows to be inserted"""
    objects: [RequestInsertInput!]!

    """upsert condition"""
    onConflict: RequestOnConflict
  ): RequestMutationResponse

  """
  insert a single row into the table: "request"
  """
  insertRequestOne(
    """the row to be inserted"""
    object: RequestInsertInput!

    """upsert condition"""
    onConflict: RequestOnConflict
  ): Request

  """
  insert data into the table: "request_type"
  """
  insertRequestType(
    """the rows to be inserted"""
    objects: [RequestTypeInsertInput!]!

    """upsert condition"""
    onConflict: RequestTypeOnConflict
  ): RequestTypeMutationResponse

  """
  insert a single row into the table: "request_type"
  """
  insertRequestTypeOne(
    """the row to be inserted"""
    object: RequestTypeInsertInput!

    """upsert condition"""
    onConflict: RequestTypeOnConflict
  ): RequestType

  """
  insert data into the table: "role"
  """
  insertRole(
    """the rows to be inserted"""
    objects: [RoleInsertInput!]!

    """upsert condition"""
    onConflict: RoleOnConflict
  ): RoleMutationResponse

  """
  insert a single row into the table: "role"
  """
  insertRoleOne(
    """the row to be inserted"""
    object: RoleInsertInput!

    """upsert condition"""
    onConflict: RoleOnConflict
  ): Role

  """
  insert data into the table: "service"
  """
  insertService(
    """the rows to be inserted"""
    objects: [ServiceInsertInput!]!

    """upsert condition"""
    onConflict: ServiceOnConflict
  ): ServiceMutationResponse

  """
  insert data into the table: "service_modification"
  """
  insertServiceModification(
    """the rows to be inserted"""
    objects: [ServiceModificationInsertInput!]!

    """upsert condition"""
    onConflict: ServiceModificationOnConflict
  ): ServiceModificationMutationResponse

  """
  insert a single row into the table: "service_modification"
  """
  insertServiceModificationOne(
    """the row to be inserted"""
    object: ServiceModificationInsertInput!

    """upsert condition"""
    onConflict: ServiceModificationOnConflict
  ): ServiceModification

  """
  insert data into the table: "service_modification_type"
  """
  insertServiceModificationType(
    """the rows to be inserted"""
    objects: [ServiceModificationTypeInsertInput!]!

    """upsert condition"""
    onConflict: ServiceModificationTypeOnConflict
  ): ServiceModificationTypeMutationResponse

  """
  insert a single row into the table: "service_modification_type"
  """
  insertServiceModificationTypeOne(
    """the row to be inserted"""
    object: ServiceModificationTypeInsertInput!

    """upsert condition"""
    onConflict: ServiceModificationTypeOnConflict
  ): ServiceModificationType

  """
  insert a single row into the table: "service"
  """
  insertServiceOne(
    """the row to be inserted"""
    object: ServiceInsertInput!

    """upsert condition"""
    onConflict: ServiceOnConflict
  ): Service

  """
  insert data into the table: "teacher"
  """
  insertTeacher(
    """the rows to be inserted"""
    objects: [TeacherInsertInput!]!

    """upsert condition"""
    onConflict: TeacherOnConflict
  ): TeacherMutationResponse

  """
  insert a single row into the table: "teacher"
  """
  insertTeacherOne(
    """the row to be inserted"""
    object: TeacherInsertInput!

    """upsert condition"""
    onConflict: TeacherOnConflict
  ): Teacher

  """
  insert data into the table: "teacher_role"
  """
  insertTeacherRole(
    """the rows to be inserted"""
    objects: [TeacherRoleInsertInput!]!

    """upsert condition"""
    onConflict: TeacherRoleOnConflict
  ): TeacherRoleMutationResponse

  """
  insert a single row into the table: "teacher_role"
  """
  insertTeacherRoleOne(
    """the row to be inserted"""
    object: TeacherRoleInsertInput!

    """upsert condition"""
    onConflict: TeacherRoleOnConflict
  ): TeacherRole

  """
  insert data into the table: "track"
  """
  insertTrack(
    """the rows to be inserted"""
    objects: [TrackInsertInput!]!

    """upsert condition"""
    onConflict: TrackOnConflict
  ): TrackMutationResponse

  """
  insert a single row into the table: "track"
  """
  insertTrackOne(
    """the row to be inserted"""
    object: TrackInsertInput!

    """upsert condition"""
    onConflict: TrackOnConflict
  ): Track

  """
  insert data into the table: "year"
  """
  insertYear(
    """the rows to be inserted"""
    objects: [YearInsertInput!]!

    """upsert condition"""
    onConflict: YearOnConflict
  ): YearMutationResponse

  """
  insert a single row into the table: "year"
  """
  insertYearOne(
    """the row to be inserted"""
    object: YearInsertInput!

    """upsert condition"""
    onConflict: YearOnConflict
  ): Year

  """
  update data of the table: "app_setting"
  """
  updateAppSetting(
    """increments the numeric columns with given value of the filtered values"""
    _inc: AppSettingIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: AppSettingSetInput

    """filter the rows which have to be updated"""
    where: AppSettingBoolExp!
  ): AppSettingMutationResponse

  """
  update single row of the table: "app_setting"
  """
  updateAppSettingByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: AppSettingIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: AppSettingSetInput
    pkColumns: AppSettingPkColumnsInput!
  ): AppSetting

  """
  update multiples rows of table: "app_setting"
  """
  updateAppSettingMany(
    """updates to execute, in order"""
    updates: [AppSettingUpdates!]!
  ): [AppSettingMutationResponse]

  """
  update data of the table: "coordination"
  """
  updateCoordination(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CoordinationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CoordinationSetInput

    """filter the rows which have to be updated"""
    where: CoordinationBoolExp!
  ): CoordinationMutationResponse

  """
  update single row of the table: "coordination"
  """
  updateCoordinationByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CoordinationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CoordinationSetInput
    pkColumns: CoordinationPkColumnsInput!
  ): Coordination

  """
  update multiples rows of table: "coordination"
  """
  updateCoordinationMany(
    """updates to execute, in order"""
    updates: [CoordinationUpdates!]!
  ): [CoordinationMutationResponse]

  """
  update data of the table: "course"
  """
  updateCourse(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CourseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CourseSetInput

    """filter the rows which have to be updated"""
    where: CourseBoolExp!
  ): CourseMutationResponse

  """
  update single row of the table: "course"
  """
  updateCourseByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CourseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CourseSetInput
    pkColumns: CoursePkColumnsInput!
  ): Course

  """
  update multiples rows of table: "course"
  """
  updateCourseMany(
    """updates to execute, in order"""
    updates: [CourseUpdates!]!
  ): [CourseMutationResponse]

  """
  update data of the table: "course_type"
  """
  updateCourseType(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CourseTypeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CourseTypeSetInput

    """filter the rows which have to be updated"""
    where: CourseTypeBoolExp!
  ): CourseTypeMutationResponse

  """
  update single row of the table: "course_type"
  """
  updateCourseTypeByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CourseTypeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CourseTypeSetInput
    pkColumns: CourseTypePkColumnsInput!
  ): CourseType

  """
  update multiples rows of table: "course_type"
  """
  updateCourseTypeMany(
    """updates to execute, in order"""
    updates: [CourseTypeUpdates!]!
  ): [CourseTypeMutationResponse]

  """
  update data of the table: "current_phase"
  """
  updateCurrentPhase(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CurrentPhaseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CurrentPhaseSetInput

    """filter the rows which have to be updated"""
    where: CurrentPhaseBoolExp!
  ): CurrentPhaseMutationResponse

  """
  update single row of the table: "current_phase"
  """
  updateCurrentPhaseByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: CurrentPhaseIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: CurrentPhaseSetInput
    pkColumns: CurrentPhasePkColumnsInput!
  ): CurrentPhase

  """
  update multiples rows of table: "current_phase"
  """
  updateCurrentPhaseMany(
    """updates to execute, in order"""
    updates: [CurrentPhaseUpdates!]!
  ): [CurrentPhaseMutationResponse]

  """
  update data of the table: "degree"
  """
  updateDegree(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DegreeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DegreeSetInput

    """filter the rows which have to be updated"""
    where: DegreeBoolExp!
  ): DegreeMutationResponse

  """
  update single row of the table: "degree"
  """
  updateDegreeByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: DegreeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: DegreeSetInput
    pkColumns: DegreePkColumnsInput!
  ): Degree

  """
  update multiples rows of table: "degree"
  """
  updateDegreeMany(
    """updates to execute, in order"""
    updates: [DegreeUpdates!]!
  ): [DegreeMutationResponse]

  """
  update data of the table: "locale"
  """
  updateLocale(
    """sets the columns of the filtered rows to the given values"""
    _set: LocaleSetInput

    """filter the rows which have to be updated"""
    where: LocaleBoolExp!
  ): LocaleMutationResponse

  """
  update single row of the table: "locale"
  """
  updateLocaleByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: LocaleSetInput
    pkColumns: LocalePkColumnsInput!
  ): Locale

  """
  update multiples rows of table: "locale"
  """
  updateLocaleMany(
    """updates to execute, in order"""
    updates: [LocaleUpdates!]!
  ): [LocaleMutationResponse]

  """
  update data of the table: "message"
  """
  updateMessage(
    """increments the numeric columns with given value of the filtered values"""
    _inc: MessageIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: MessageSetInput

    """filter the rows which have to be updated"""
    where: MessageBoolExp!
  ): MessageMutationResponse

  """
  update single row of the table: "message"
  """
  updateMessageByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: MessageIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: MessageSetInput
    pkColumns: MessagePkColumnsInput!
  ): Message

  """
  update multiples rows of table: "message"
  """
  updateMessageMany(
    """updates to execute, in order"""
    updates: [MessageUpdates!]!
  ): [MessageMutationResponse]

  """
  update data of the table: "organization"
  """
  updateOrganization(
    """sets the columns of the filtered rows to the given values"""
    _set: OrganizationSetInput

    """filter the rows which have to be updated"""
    where: OrganizationBoolExp!
  ): OrganizationMutationResponse

  """
  update single row of the table: "organization"
  """
  updateOrganizationByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: OrganizationSetInput
    pkColumns: OrganizationPkColumnsInput!
  ): Organization

  """
  update multiples rows of table: "organization"
  """
  updateOrganizationMany(
    """updates to execute, in order"""
    updates: [OrganizationUpdates!]!
  ): [OrganizationMutationResponse]

  """
  update data of the table: "phase"
  """
  updatePhase(
    """sets the columns of the filtered rows to the given values"""
    _set: PhaseSetInput

    """filter the rows which have to be updated"""
    where: PhaseBoolExp!
  ): PhaseMutationResponse

  """
  update single row of the table: "phase"
  """
  updatePhaseByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: PhaseSetInput
    pkColumns: PhasePkColumnsInput!
  ): Phase

  """
  update multiples rows of table: "phase"
  """
  updatePhaseMany(
    """updates to execute, in order"""
    updates: [PhaseUpdates!]!
  ): [PhaseMutationResponse]

  """
  update data of the table: "position"
  """
  updatePosition(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PositionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PositionSetInput

    """filter the rows which have to be updated"""
    where: PositionBoolExp!
  ): PositionMutationResponse

  """
  update single row of the table: "position"
  """
  updatePositionByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PositionIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PositionSetInput
    pkColumns: PositionPkColumnsInput!
  ): Position

  """
  update multiples rows of table: "position"
  """
  updatePositionMany(
    """updates to execute, in order"""
    updates: [PositionUpdates!]!
  ): [PositionMutationResponse]

  """
  update data of the table: "priority"
  """
  updatePriority(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PriorityIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PrioritySetInput

    """filter the rows which have to be updated"""
    where: PriorityBoolExp!
  ): PriorityMutationResponse

  """
  update single row of the table: "priority"
  """
  updatePriorityByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PriorityIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: PrioritySetInput
    pkColumns: PriorityPkColumnsInput!
  ): Priority

  """
  update multiples rows of table: "priority"
  """
  updatePriorityMany(
    """updates to execute, in order"""
    updates: [PriorityUpdates!]!
  ): [PriorityMutationResponse]

  """
  update data of the table: "program"
  """
  updateProgram(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProgramIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProgramSetInput

    """filter the rows which have to be updated"""
    where: ProgramBoolExp!
  ): ProgramMutationResponse

  """
  update single row of the table: "program"
  """
  updateProgramByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ProgramIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ProgramSetInput
    pkColumns: ProgramPkColumnsInput!
  ): Program

  """
  update multiples rows of table: "program"
  """
  updateProgramMany(
    """updates to execute, in order"""
    updates: [ProgramUpdates!]!
  ): [ProgramMutationResponse]

  """
  update data of the table: "request"
  """
  updateRequest(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RequestIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RequestSetInput

    """filter the rows which have to be updated"""
    where: RequestBoolExp!
  ): RequestMutationResponse

  """
  update single row of the table: "request"
  """
  updateRequestByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: RequestIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: RequestSetInput
    pkColumns: RequestPkColumnsInput!
  ): Request

  """
  update multiples rows of table: "request"
  """
  updateRequestMany(
    """updates to execute, in order"""
    updates: [RequestUpdates!]!
  ): [RequestMutationResponse]

  """
  update data of the table: "request_type"
  """
  updateRequestType(
    """sets the columns of the filtered rows to the given values"""
    _set: RequestTypeSetInput

    """filter the rows which have to be updated"""
    where: RequestTypeBoolExp!
  ): RequestTypeMutationResponse

  """
  update single row of the table: "request_type"
  """
  updateRequestTypeByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RequestTypeSetInput
    pkColumns: RequestTypePkColumnsInput!
  ): RequestType

  """
  update multiples rows of table: "request_type"
  """
  updateRequestTypeMany(
    """updates to execute, in order"""
    updates: [RequestTypeUpdates!]!
  ): [RequestTypeMutationResponse]

  """
  update data of the table: "role"
  """
  updateRole(
    """sets the columns of the filtered rows to the given values"""
    _set: RoleSetInput

    """filter the rows which have to be updated"""
    where: RoleBoolExp!
  ): RoleMutationResponse

  """
  update single row of the table: "role"
  """
  updateRoleByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: RoleSetInput
    pkColumns: RolePkColumnsInput!
  ): Role

  """
  update multiples rows of table: "role"
  """
  updateRoleMany(
    """updates to execute, in order"""
    updates: [RoleUpdates!]!
  ): [RoleMutationResponse]

  """
  update data of the table: "service"
  """
  updateService(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceSetInput

    """filter the rows which have to be updated"""
    where: ServiceBoolExp!
  ): ServiceMutationResponse

  """
  update single row of the table: "service"
  """
  updateServiceByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceSetInput
    pkColumns: ServicePkColumnsInput!
  ): Service

  """
  update multiples rows of table: "service"
  """
  updateServiceMany(
    """updates to execute, in order"""
    updates: [ServiceUpdates!]!
  ): [ServiceMutationResponse]

  """
  update data of the table: "service_modification"
  """
  updateServiceModification(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceModificationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceModificationSetInput

    """filter the rows which have to be updated"""
    where: ServiceModificationBoolExp!
  ): ServiceModificationMutationResponse

  """
  update single row of the table: "service_modification"
  """
  updateServiceModificationByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceModificationIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceModificationSetInput
    pkColumns: ServiceModificationPkColumnsInput!
  ): ServiceModification

  """
  update multiples rows of table: "service_modification"
  """
  updateServiceModificationMany(
    """updates to execute, in order"""
    updates: [ServiceModificationUpdates!]!
  ): [ServiceModificationMutationResponse]

  """
  update data of the table: "service_modification_type"
  """
  updateServiceModificationType(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceModificationTypeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceModificationTypeSetInput

    """filter the rows which have to be updated"""
    where: ServiceModificationTypeBoolExp!
  ): ServiceModificationTypeMutationResponse

  """
  update single row of the table: "service_modification_type"
  """
  updateServiceModificationTypeByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ServiceModificationTypeIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: ServiceModificationTypeSetInput
    pkColumns: ServiceModificationTypePkColumnsInput!
  ): ServiceModificationType

  """
  update multiples rows of table: "service_modification_type"
  """
  updateServiceModificationTypeMany(
    """updates to execute, in order"""
    updates: [ServiceModificationTypeUpdates!]!
  ): [ServiceModificationTypeMutationResponse]

  """
  update data of the table: "teacher"
  """
  updateTeacher(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeacherIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeacherSetInput

    """filter the rows which have to be updated"""
    where: TeacherBoolExp!
  ): TeacherMutationResponse

  """
  update single row of the table: "teacher"
  """
  updateTeacherByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeacherIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeacherSetInput
    pkColumns: TeacherPkColumnsInput!
  ): Teacher

  """
  update multiples rows of table: "teacher"
  """
  updateTeacherMany(
    """updates to execute, in order"""
    updates: [TeacherUpdates!]!
  ): [TeacherMutationResponse]

  """
  update data of the table: "teacher_role"
  """
  updateTeacherRole(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeacherRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeacherRoleSetInput

    """filter the rows which have to be updated"""
    where: TeacherRoleBoolExp!
  ): TeacherRoleMutationResponse

  """
  update single row of the table: "teacher_role"
  """
  updateTeacherRoleByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TeacherRoleIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TeacherRoleSetInput
    pkColumns: TeacherRolePkColumnsInput!
  ): TeacherRole

  """
  update multiples rows of table: "teacher_role"
  """
  updateTeacherRoleMany(
    """updates to execute, in order"""
    updates: [TeacherRoleUpdates!]!
  ): [TeacherRoleMutationResponse]

  """
  update data of the table: "track"
  """
  updateTrack(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TrackIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TrackSetInput

    """filter the rows which have to be updated"""
    where: TrackBoolExp!
  ): TrackMutationResponse

  """
  update single row of the table: "track"
  """
  updateTrackByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TrackIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: TrackSetInput
    pkColumns: TrackPkColumnsInput!
  ): Track

  """
  update multiples rows of table: "track"
  """
  updateTrackMany(
    """updates to execute, in order"""
    updates: [TrackUpdates!]!
  ): [TrackMutationResponse]

  """
  update data of the table: "year"
  """
  updateYear(
    """increments the numeric columns with given value of the filtered values"""
    _inc: YearIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: YearSetInput

    """filter the rows which have to be updated"""
    where: YearBoolExp!
  ): YearMutationResponse

  """
  update single row of the table: "year"
  """
  updateYearByPk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: YearIncInput

    """sets the columns of the filtered rows to the given values"""
    _set: YearSetInput
    pkColumns: YearPkColumnsInput!
  ): Year

  """
  update multiples rows of table: "year"
  """
  updateYearMany(
    """updates to execute, in order"""
    updates: [YearUpdates!]!
  ): [YearMutationResponse]
}

input positionAggregateBoolExpCount {
  arguments: [PositionSelectColumn!]
  distinct: Boolean
  filter: PositionBoolExp
  predicate: IntComparisonExp!
}

input priorityAggregateBoolExpBool_and {
  arguments: PrioritySelectColumnPriorityAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: PriorityBoolExp
  predicate: BooleanComparisonExp!
}

input priorityAggregateBoolExpBool_or {
  arguments: PrioritySelectColumnPriorityAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: PriorityBoolExp
  predicate: BooleanComparisonExp!
}

input priorityAggregateBoolExpCount {
  arguments: [PrioritySelectColumn!]
  distinct: Boolean
  filter: PriorityBoolExp
  predicate: IntComparisonExp!
}

input programAggregateBoolExpBool_and {
  arguments: ProgramSelectColumnProgramAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: ProgramBoolExp
  predicate: BooleanComparisonExp!
}

input programAggregateBoolExpBool_or {
  arguments: ProgramSelectColumnProgramAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: ProgramBoolExp
  predicate: BooleanComparisonExp!
}

input programAggregateBoolExpCount {
  arguments: [ProgramSelectColumn!]
  distinct: Boolean
  filter: ProgramBoolExp
  predicate: IntComparisonExp!
}

type query_root {
  """
  fetch data from the table: "app_setting"
  """
  appSetting(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): [AppSetting!]!

  """
  fetch aggregated fields from the table: "app_setting"
  """
  appSettingAggregate(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): AppSettingAggregate!

  """fetch data from the table: "app_setting" using primary key columns"""
  appSettingByPk(
    """Setting name (unique)"""
    key: String!

    """Organization reference"""
    oid: Int!
  ): AppSetting

  """
  fetch data from the table: "coordination"
  """
  coordination(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """
  fetch aggregated fields from the table: "coordination"
  """
  coordinationAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """fetch data from the table: "coordination" using primary key columns"""
  coordinationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Coordination

  """
  fetch data from the table: "course"
  """
  course(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """
  fetch aggregated fields from the table: "course"
  """
  courseAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """fetch data from the table: "course" using primary key columns"""
  courseByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Course

  """
  fetch data from the table: "course_type"
  """
  courseType(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): [CourseType!]!

  """
  fetch aggregated fields from the table: "course_type"
  """
  courseTypeAggregate(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): CourseTypeAggregate!

  """fetch data from the table: "course_type" using primary key columns"""
  courseTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): CourseType

  """
  fetch data from the table: "current_phase"
  """
  currentPhase(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): [CurrentPhase!]!

  """
  fetch aggregated fields from the table: "current_phase"
  """
  currentPhaseAggregate(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): CurrentPhaseAggregate!

  """fetch data from the table: "current_phase" using primary key columns"""
  currentPhaseByPk(
    """Organization reference"""
    oid: Int!
  ): CurrentPhase

  """
  fetch data from the table: "degree"
  """
  degree(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): [Degree!]!

  """
  fetch aggregated fields from the table: "degree"
  """
  degreeAggregate(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): DegreeAggregate!

  """fetch data from the table: "degree" using primary key columns"""
  degreeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Degree

  """
  fetch data from the table: "locale"
  """
  locale(
    """distinct select on columns"""
    distinctOn: [LocaleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LocaleOrderBy!]

    """filter the rows returned"""
    where: LocaleBoolExp
  ): [Locale!]!

  """
  fetch aggregated fields from the table: "locale"
  """
  localeAggregate(
    """distinct select on columns"""
    distinctOn: [LocaleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LocaleOrderBy!]

    """filter the rows returned"""
    where: LocaleBoolExp
  ): LocaleAggregate!

  """fetch data from the table: "locale" using primary key columns"""
  localeByPk(
    """Unique identifier"""
    value: String!
  ): Locale

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): [Message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  messageAggregate(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): MessageAggregate!

  """fetch data from the table: "message" using primary key columns"""
  messageByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Message

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinctOn: [OrganizationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [OrganizationOrderBy!]

    """filter the rows returned"""
    where: OrganizationBoolExp
  ): [Organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organizationAggregate(
    """distinct select on columns"""
    distinctOn: [OrganizationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [OrganizationOrderBy!]

    """filter the rows returned"""
    where: OrganizationBoolExp
  ): OrganizationAggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organizationByPk(
    """Unique identifier"""
    id: Int!
  ): Organization

  """
  fetch data from the table: "phase"
  """
  phase(
    """distinct select on columns"""
    distinctOn: [PhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PhaseOrderBy!]

    """filter the rows returned"""
    where: PhaseBoolExp
  ): [Phase!]!

  """
  fetch aggregated fields from the table: "phase"
  """
  phaseAggregate(
    """distinct select on columns"""
    distinctOn: [PhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PhaseOrderBy!]

    """filter the rows returned"""
    where: PhaseBoolExp
  ): PhaseAggregate!

  """fetch data from the table: "phase" using primary key columns"""
  phaseByPk(
    """Unique identifier"""
    value: String!
  ): Phase

  """
  fetch data from the table: "position"
  """
  position(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): [Position!]!

  """
  fetch aggregated fields from the table: "position"
  """
  positionAggregate(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): PositionAggregate!

  """fetch data from the table: "position" using primary key columns"""
  positionByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Position

  """
  fetch data from the table: "priority"
  """
  priority(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """
  fetch aggregated fields from the table: "priority"
  """
  priorityAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """fetch data from the table: "priority" using primary key columns"""
  priorityByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Priority

  """
  fetch data from the table: "program"
  """
  program(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): [Program!]!

  """
  fetch aggregated fields from the table: "program"
  """
  programAggregate(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): ProgramAggregate!

  """fetch data from the table: "program" using primary key columns"""
  programByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Program

  """
  fetch data from the table: "request"
  """
  request(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """
  fetch aggregated fields from the table: "request"
  """
  requestAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """fetch data from the table: "request" using primary key columns"""
  requestByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Request

  """
  fetch data from the table: "request_type"
  """
  requestType(
    """distinct select on columns"""
    distinctOn: [RequestTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestTypeOrderBy!]

    """filter the rows returned"""
    where: RequestTypeBoolExp
  ): [RequestType!]!

  """
  fetch aggregated fields from the table: "request_type"
  """
  requestTypeAggregate(
    """distinct select on columns"""
    distinctOn: [RequestTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestTypeOrderBy!]

    """filter the rows returned"""
    where: RequestTypeBoolExp
  ): RequestTypeAggregate!

  """fetch data from the table: "request_type" using primary key columns"""
  requestTypeByPk(
    """Unique identifier"""
    value: String!
  ): RequestType

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  roleAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!

  """fetch data from the table: "role" using primary key columns"""
  roleByPk(
    """Unique identifier"""
    value: String!
  ): Role

  """
  fetch data from the table: "service"
  """
  service(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  fetch aggregated fields from the table: "service"
  """
  serviceAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): ServiceAggregate!

  """fetch data from the table: "service" using primary key columns"""
  serviceByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Service

  """
  fetch data from the table: "service_modification"
  """
  serviceModification(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """
  fetch aggregated fields from the table: "service_modification"
  """
  serviceModificationAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): ServiceModificationAggregate!

  """
  fetch data from the table: "service_modification" using primary key columns
  """
  serviceModificationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModification

  """
  fetch data from the table: "service_modification_type"
  """
  serviceModificationType(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): [ServiceModificationType!]!

  """
  fetch aggregated fields from the table: "service_modification_type"
  """
  serviceModificationTypeAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): ServiceModificationTypeAggregate!

  """
  fetch data from the table: "service_modification_type" using primary key columns
  """
  serviceModificationTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModificationType

  """
  fetch data from the table: "teacher"
  """
  teacher(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): [Teacher!]!

  """
  fetch aggregated fields from the table: "teacher"
  """
  teacherAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): TeacherAggregate!

  """fetch data from the table: "teacher" using primary key columns"""
  teacherByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Teacher

  """
  fetch data from the table: "teacher_role"
  """
  teacherRole(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): [TeacherRole!]!

  """
  fetch aggregated fields from the table: "teacher_role"
  """
  teacherRoleAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): TeacherRoleAggregate!

  """fetch data from the table: "teacher_role" using primary key columns"""
  teacherRoleByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): TeacherRole

  """
  fetch data from the table: "track"
  """
  track(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): [Track!]!

  """
  fetch aggregated fields from the table: "track"
  """
  trackAggregate(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): TrackAggregate!

  """fetch data from the table: "track" using primary key columns"""
  trackByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Track

  """
  fetch data from the table: "year"
  """
  year(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): [Year!]!

  """
  fetch aggregated fields from the table: "year"
  """
  yearAggregate(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): YearAggregate!

  """fetch data from the table: "year" using primary key columns"""
  yearByPk(
    """Organization reference"""
    oid: Int!

    """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
    value: Int!
  ): Year
}

input requestAggregateBoolExpCount {
  arguments: [RequestSelectColumn!]
  distinct: Boolean
  filter: RequestBoolExp
  predicate: IntComparisonExp!
}

input serviceAggregateBoolExpCount {
  arguments: [ServiceSelectColumn!]
  distinct: Boolean
  filter: ServiceBoolExp
  predicate: IntComparisonExp!
}

input serviceModificationAggregateBoolExpCount {
  arguments: [ServiceModificationSelectColumn!]
  distinct: Boolean
  filter: ServiceModificationBoolExp
  predicate: IntComparisonExp!
}

input serviceModificationTypeAggregateBoolExpCount {
  arguments: [ServiceModificationTypeSelectColumn!]
  distinct: Boolean
  filter: ServiceModificationTypeBoolExp
  predicate: IntComparisonExp!
}

scalar service_scalar

type subscription_root {
  """
  fetch data from the table: "app_setting"
  """
  appSetting(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): [AppSetting!]!

  """
  fetch aggregated fields from the table: "app_setting"
  """
  appSettingAggregate(
    """distinct select on columns"""
    distinctOn: [AppSettingSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [AppSettingOrderBy!]

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): AppSettingAggregate!

  """fetch data from the table: "app_setting" using primary key columns"""
  appSettingByPk(
    """Setting name (unique)"""
    key: String!

    """Organization reference"""
    oid: Int!
  ): AppSetting

  """
  fetch data from the table in a streaming manner: "app_setting"
  """
  appSettingStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [AppSettingStreamCursorInput]!

    """filter the rows returned"""
    where: AppSettingBoolExp
  ): [AppSetting!]!

  """
  fetch data from the table: "coordination"
  """
  coordination(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """
  fetch aggregated fields from the table: "coordination"
  """
  coordinationAggregate(
    """distinct select on columns"""
    distinctOn: [CoordinationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CoordinationOrderBy!]

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): CoordinationAggregate!

  """fetch data from the table: "coordination" using primary key columns"""
  coordinationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Coordination

  """
  fetch data from the table in a streaming manner: "coordination"
  """
  coordinationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CoordinationStreamCursorInput]!

    """filter the rows returned"""
    where: CoordinationBoolExp
  ): [Coordination!]!

  """
  fetch data from the table: "course"
  """
  course(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """
  fetch aggregated fields from the table: "course"
  """
  courseAggregate(
    """distinct select on columns"""
    distinctOn: [CourseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseOrderBy!]

    """filter the rows returned"""
    where: CourseBoolExp
  ): CourseAggregate!

  """fetch data from the table: "course" using primary key columns"""
  courseByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Course

  """
  fetch data from the table in a streaming manner: "course"
  """
  courseStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CourseStreamCursorInput]!

    """filter the rows returned"""
    where: CourseBoolExp
  ): [Course!]!

  """
  fetch data from the table: "course_type"
  """
  courseType(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): [CourseType!]!

  """
  fetch aggregated fields from the table: "course_type"
  """
  courseTypeAggregate(
    """distinct select on columns"""
    distinctOn: [CourseTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CourseTypeOrderBy!]

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): CourseTypeAggregate!

  """fetch data from the table: "course_type" using primary key columns"""
  courseTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): CourseType

  """
  fetch data from the table in a streaming manner: "course_type"
  """
  courseTypeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CourseTypeStreamCursorInput]!

    """filter the rows returned"""
    where: CourseTypeBoolExp
  ): [CourseType!]!

  """
  fetch data from the table: "current_phase"
  """
  currentPhase(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): [CurrentPhase!]!

  """
  fetch aggregated fields from the table: "current_phase"
  """
  currentPhaseAggregate(
    """distinct select on columns"""
    distinctOn: [CurrentPhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [CurrentPhaseOrderBy!]

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): CurrentPhaseAggregate!

  """fetch data from the table: "current_phase" using primary key columns"""
  currentPhaseByPk(
    """Organization reference"""
    oid: Int!
  ): CurrentPhase

  """
  fetch data from the table in a streaming manner: "current_phase"
  """
  currentPhaseStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [CurrentPhaseStreamCursorInput]!

    """filter the rows returned"""
    where: CurrentPhaseBoolExp
  ): [CurrentPhase!]!

  """
  fetch data from the table: "degree"
  """
  degree(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): [Degree!]!

  """
  fetch aggregated fields from the table: "degree"
  """
  degreeAggregate(
    """distinct select on columns"""
    distinctOn: [DegreeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [DegreeOrderBy!]

    """filter the rows returned"""
    where: DegreeBoolExp
  ): DegreeAggregate!

  """fetch data from the table: "degree" using primary key columns"""
  degreeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Degree

  """
  fetch data from the table in a streaming manner: "degree"
  """
  degreeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [DegreeStreamCursorInput]!

    """filter the rows returned"""
    where: DegreeBoolExp
  ): [Degree!]!

  """
  fetch data from the table: "locale"
  """
  locale(
    """distinct select on columns"""
    distinctOn: [LocaleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LocaleOrderBy!]

    """filter the rows returned"""
    where: LocaleBoolExp
  ): [Locale!]!

  """
  fetch aggregated fields from the table: "locale"
  """
  localeAggregate(
    """distinct select on columns"""
    distinctOn: [LocaleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [LocaleOrderBy!]

    """filter the rows returned"""
    where: LocaleBoolExp
  ): LocaleAggregate!

  """fetch data from the table: "locale" using primary key columns"""
  localeByPk(
    """Unique identifier"""
    value: String!
  ): Locale

  """
  fetch data from the table in a streaming manner: "locale"
  """
  localeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [LocaleStreamCursorInput]!

    """filter the rows returned"""
    where: LocaleBoolExp
  ): [Locale!]!

  """
  fetch data from the table: "message"
  """
  message(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): [Message!]!

  """
  fetch aggregated fields from the table: "message"
  """
  messageAggregate(
    """distinct select on columns"""
    distinctOn: [MessageSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [MessageOrderBy!]

    """filter the rows returned"""
    where: MessageBoolExp
  ): MessageAggregate!

  """fetch data from the table: "message" using primary key columns"""
  messageByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Message

  """
  fetch data from the table in a streaming manner: "message"
  """
  messageStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [MessageStreamCursorInput]!

    """filter the rows returned"""
    where: MessageBoolExp
  ): [Message!]!

  """
  fetch data from the table: "organization"
  """
  organization(
    """distinct select on columns"""
    distinctOn: [OrganizationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [OrganizationOrderBy!]

    """filter the rows returned"""
    where: OrganizationBoolExp
  ): [Organization!]!

  """
  fetch aggregated fields from the table: "organization"
  """
  organizationAggregate(
    """distinct select on columns"""
    distinctOn: [OrganizationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [OrganizationOrderBy!]

    """filter the rows returned"""
    where: OrganizationBoolExp
  ): OrganizationAggregate!

  """fetch data from the table: "organization" using primary key columns"""
  organizationByPk(
    """Unique identifier"""
    id: Int!
  ): Organization

  """
  fetch data from the table in a streaming manner: "organization"
  """
  organizationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [OrganizationStreamCursorInput]!

    """filter the rows returned"""
    where: OrganizationBoolExp
  ): [Organization!]!

  """
  fetch data from the table: "phase"
  """
  phase(
    """distinct select on columns"""
    distinctOn: [PhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PhaseOrderBy!]

    """filter the rows returned"""
    where: PhaseBoolExp
  ): [Phase!]!

  """
  fetch aggregated fields from the table: "phase"
  """
  phaseAggregate(
    """distinct select on columns"""
    distinctOn: [PhaseSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PhaseOrderBy!]

    """filter the rows returned"""
    where: PhaseBoolExp
  ): PhaseAggregate!

  """fetch data from the table: "phase" using primary key columns"""
  phaseByPk(
    """Unique identifier"""
    value: String!
  ): Phase

  """
  fetch data from the table in a streaming manner: "phase"
  """
  phaseStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PhaseStreamCursorInput]!

    """filter the rows returned"""
    where: PhaseBoolExp
  ): [Phase!]!

  """
  fetch data from the table: "position"
  """
  position(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): [Position!]!

  """
  fetch aggregated fields from the table: "position"
  """
  positionAggregate(
    """distinct select on columns"""
    distinctOn: [PositionSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PositionOrderBy!]

    """filter the rows returned"""
    where: PositionBoolExp
  ): PositionAggregate!

  """fetch data from the table: "position" using primary key columns"""
  positionByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Position

  """
  fetch data from the table in a streaming manner: "position"
  """
  positionStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PositionStreamCursorInput]!

    """filter the rows returned"""
    where: PositionBoolExp
  ): [Position!]!

  """
  fetch data from the table: "priority"
  """
  priority(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """
  fetch aggregated fields from the table: "priority"
  """
  priorityAggregate(
    """distinct select on columns"""
    distinctOn: [PrioritySelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [PriorityOrderBy!]

    """filter the rows returned"""
    where: PriorityBoolExp
  ): PriorityAggregate!

  """fetch data from the table: "priority" using primary key columns"""
  priorityByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Priority

  """
  fetch data from the table in a streaming manner: "priority"
  """
  priorityStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PriorityStreamCursorInput]!

    """filter the rows returned"""
    where: PriorityBoolExp
  ): [Priority!]!

  """
  fetch data from the table: "program"
  """
  program(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): [Program!]!

  """
  fetch aggregated fields from the table: "program"
  """
  programAggregate(
    """distinct select on columns"""
    distinctOn: [ProgramSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ProgramOrderBy!]

    """filter the rows returned"""
    where: ProgramBoolExp
  ): ProgramAggregate!

  """fetch data from the table: "program" using primary key columns"""
  programByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Program

  """
  fetch data from the table in a streaming manner: "program"
  """
  programStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ProgramStreamCursorInput]!

    """filter the rows returned"""
    where: ProgramBoolExp
  ): [Program!]!

  """
  fetch data from the table: "request"
  """
  request(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """
  fetch aggregated fields from the table: "request"
  """
  requestAggregate(
    """distinct select on columns"""
    distinctOn: [RequestSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestOrderBy!]

    """filter the rows returned"""
    where: RequestBoolExp
  ): RequestAggregate!

  """fetch data from the table: "request" using primary key columns"""
  requestByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Request

  """
  fetch data from the table in a streaming manner: "request"
  """
  requestStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [RequestStreamCursorInput]!

    """filter the rows returned"""
    where: RequestBoolExp
  ): [Request!]!

  """
  fetch data from the table: "request_type"
  """
  requestType(
    """distinct select on columns"""
    distinctOn: [RequestTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestTypeOrderBy!]

    """filter the rows returned"""
    where: RequestTypeBoolExp
  ): [RequestType!]!

  """
  fetch aggregated fields from the table: "request_type"
  """
  requestTypeAggregate(
    """distinct select on columns"""
    distinctOn: [RequestTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RequestTypeOrderBy!]

    """filter the rows returned"""
    where: RequestTypeBoolExp
  ): RequestTypeAggregate!

  """fetch data from the table: "request_type" using primary key columns"""
  requestTypeByPk(
    """Unique identifier"""
    value: String!
  ): RequestType

  """
  fetch data from the table in a streaming manner: "request_type"
  """
  requestTypeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [RequestTypeStreamCursorInput]!

    """filter the rows returned"""
    where: RequestTypeBoolExp
  ): [RequestType!]!

  """
  fetch data from the table: "role"
  """
  role(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch aggregated fields from the table: "role"
  """
  roleAggregate(
    """distinct select on columns"""
    distinctOn: [RoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [RoleOrderBy!]

    """filter the rows returned"""
    where: RoleBoolExp
  ): RoleAggregate!

  """fetch data from the table: "role" using primary key columns"""
  roleByPk(
    """Unique identifier"""
    value: String!
  ): Role

  """
  fetch data from the table in a streaming manner: "role"
  """
  roleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [RoleStreamCursorInput]!

    """filter the rows returned"""
    where: RoleBoolExp
  ): [Role!]!

  """
  fetch data from the table: "service"
  """
  service(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  fetch aggregated fields from the table: "service"
  """
  serviceAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceOrderBy!]

    """filter the rows returned"""
    where: ServiceBoolExp
  ): ServiceAggregate!

  """fetch data from the table: "service" using primary key columns"""
  serviceByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Service

  """
  fetch data from the table: "service_modification"
  """
  serviceModification(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """
  fetch aggregated fields from the table: "service_modification"
  """
  serviceModificationAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): ServiceModificationAggregate!

  """
  fetch data from the table: "service_modification" using primary key columns
  """
  serviceModificationByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModification

  """
  fetch data from the table in a streaming manner: "service_modification"
  """
  serviceModificationStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ServiceModificationStreamCursorInput]!

    """filter the rows returned"""
    where: ServiceModificationBoolExp
  ): [ServiceModification!]!

  """
  fetch data from the table: "service_modification_type"
  """
  serviceModificationType(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): [ServiceModificationType!]!

  """
  fetch aggregated fields from the table: "service_modification_type"
  """
  serviceModificationTypeAggregate(
    """distinct select on columns"""
    distinctOn: [ServiceModificationTypeSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [ServiceModificationTypeOrderBy!]

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): ServiceModificationTypeAggregate!

  """
  fetch data from the table: "service_modification_type" using primary key columns
  """
  serviceModificationTypeByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): ServiceModificationType

  """
  fetch data from the table in a streaming manner: "service_modification_type"
  """
  serviceModificationTypeStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ServiceModificationTypeStreamCursorInput]!

    """filter the rows returned"""
    where: ServiceModificationTypeBoolExp
  ): [ServiceModificationType!]!

  """
  fetch data from the table in a streaming manner: "service"
  """
  serviceStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [ServiceStreamCursorInput]!

    """filter the rows returned"""
    where: ServiceBoolExp
  ): [Service!]!

  """
  fetch data from the table: "teacher"
  """
  teacher(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): [Teacher!]!

  """
  fetch aggregated fields from the table: "teacher"
  """
  teacherAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherOrderBy!]

    """filter the rows returned"""
    where: TeacherBoolExp
  ): TeacherAggregate!

  """fetch data from the table: "teacher" using primary key columns"""
  teacherByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Teacher

  """
  fetch data from the table: "teacher_role"
  """
  teacherRole(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): [TeacherRole!]!

  """
  fetch aggregated fields from the table: "teacher_role"
  """
  teacherRoleAggregate(
    """distinct select on columns"""
    distinctOn: [TeacherRoleSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TeacherRoleOrderBy!]

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): TeacherRoleAggregate!

  """fetch data from the table: "teacher_role" using primary key columns"""
  teacherRoleByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): TeacherRole

  """
  fetch data from the table in a streaming manner: "teacher_role"
  """
  teacherRoleStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeacherRoleStreamCursorInput]!

    """filter the rows returned"""
    where: TeacherRoleBoolExp
  ): [TeacherRole!]!

  """
  fetch data from the table in a streaming manner: "teacher"
  """
  teacherStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TeacherStreamCursorInput]!

    """filter the rows returned"""
    where: TeacherBoolExp
  ): [Teacher!]!

  """
  fetch data from the table: "track"
  """
  track(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): [Track!]!

  """
  fetch aggregated fields from the table: "track"
  """
  trackAggregate(
    """distinct select on columns"""
    distinctOn: [TrackSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [TrackOrderBy!]

    """filter the rows returned"""
    where: TrackBoolExp
  ): TrackAggregate!

  """fetch data from the table: "track" using primary key columns"""
  trackByPk(
    """Unique identifier"""
    id: Int!

    """Organization reference"""
    oid: Int!
  ): Track

  """
  fetch data from the table in a streaming manner: "track"
  """
  trackStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TrackStreamCursorInput]!

    """filter the rows returned"""
    where: TrackBoolExp
  ): [Track!]!

  """
  fetch data from the table: "year"
  """
  year(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): [Year!]!

  """
  fetch aggregated fields from the table: "year"
  """
  yearAggregate(
    """distinct select on columns"""
    distinctOn: [YearSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [YearOrderBy!]

    """filter the rows returned"""
    where: YearBoolExp
  ): YearAggregate!

  """fetch data from the table: "year" using primary key columns"""
  yearByPk(
    """Organization reference"""
    oid: Int!

    """Academic year identifier, unique (e.g., 2025 for 2025-2026)"""
    value: Int!
  ): Year

  """
  fetch data from the table in a streaming manner: "year"
  """
  yearStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [YearStreamCursorInput]!

    """filter the rows returned"""
    where: YearBoolExp
  ): [Year!]!
}

input teacherAggregateBoolExpBool_and {
  arguments: TeacherSelectColumnTeacherAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TeacherBoolExp
  predicate: BooleanComparisonExp!
}

input teacherAggregateBoolExpBool_or {
  arguments: TeacherSelectColumnTeacherAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TeacherBoolExp
  predicate: BooleanComparisonExp!
}

input teacherAggregateBoolExpCount {
  arguments: [TeacherSelectColumn!]
  distinct: Boolean
  filter: TeacherBoolExp
  predicate: IntComparisonExp!
}

input teacherRoleAggregateBoolExpCount {
  arguments: [TeacherRoleSelectColumn!]
  distinct: Boolean
  filter: TeacherRoleBoolExp
  predicate: IntComparisonExp!
}

scalar timestamptz

input trackAggregateBoolExpBool_and {
  arguments: TrackSelectColumnTrackAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: TrackBoolExp
  predicate: BooleanComparisonExp!
}

input trackAggregateBoolExpBool_or {
  arguments: TrackSelectColumnTrackAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: TrackBoolExp
  predicate: BooleanComparisonExp!
}

input trackAggregateBoolExpCount {
  arguments: [TrackSelectColumn!]
  distinct: Boolean
  filter: TrackBoolExp
  predicate: IntComparisonExp!
}

input yearAggregateBoolExpBool_and {
  arguments: YearSelectColumnYearAggregateBoolExpBool_andArgumentsColumns!
  distinct: Boolean
  filter: YearBoolExp
  predicate: BooleanComparisonExp!
}

input yearAggregateBoolExpBool_or {
  arguments: YearSelectColumnYearAggregateBoolExpBool_orArgumentsColumns!
  distinct: Boolean
  filter: YearBoolExp
  predicate: BooleanComparisonExp!
}

input yearAggregateBoolExpCount {
  arguments: [YearSelectColumn!]
  distinct: Boolean
  filter: YearBoolExp
  predicate: IntComparisonExp!
}