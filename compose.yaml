name: geyser
services:
  kc-db:
    image: postgres:17.5
    restart: always
    healthcheck:
      test: "pg_isready -U postgres -d keycloak || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${KC_DB_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5433:5432"
    networks:
      - private-kc-db
    volumes:
      - kc-data:/var/lib/postgresql/data

  keycloak:
    build: keycloak
    restart: always
    depends_on:
      kc-db:
        condition: service_healthy
    healthcheck:
      test: "healthcheck.sh"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
      start_interval: 1s
    environment:
      KC_DB_URL: "jdbc:postgresql://kc-db:5432/keycloak"
      KC_DB_USERNAME: "postgres"
      KC_DB_PASSWORD: "${KC_DB_PASSWORD}"
      KC_DB_SCHEMA: "public"
      KC_HOSTNAME: "${KC_HOSTNAME}"
      KC_HOSTNAME_ADMIN: "${KC_HOSTNAME_ADMIN}"
      KC_HOSTNAME_STRICT: "true"
      KC_HOSTNAME_DEBUG: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: "xforwarded"
    ports:
      - "8081:8080"
    networks:
      - private-kc-db
      - public
    volumes:
      - ./keycloak/backups:/opt/keycloak/data/backups
    command: start --optimized

  db:
    image: postgres:17.5
    restart: always
    healthcheck:
      test: "pg_isready -U postgres -d geyser || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      POSTGRES_DB: "geyser"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    networks:
      - private-db
    volumes:
      - data:/var/lib/postgresql/data
      - ./backups:/backups

  hasura:
    image: hasura/graphql-engine:v2.48.3-ce.cli-migrations-v2
    restart: always
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: "curl -fsS http://localhost:8080/healthz || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgresql://postgres:${DB_PASSWORD}@db:5432/geyser"
      HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
    ports:
      - "8080:8080"
    networks:
      - private-db
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata

  backend:
    image: ghcr.io/arkandias/geyser-backend:${GEYSER_VERSION}
    build:
      context: .
      target: backend
    restart: always
    depends_on:
      keycloak:
        condition: service_healthy
      db:
        condition: service_healthy
      hasura:
        condition: service_healthy
    healthcheck:
      test: "curl -fsS http://localhost:3000/health || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      API_URL: "${API_URL}"
      API_ORIGINS: "${API_ORIGINS}"
      API_ADMIN_SECRET: "${API_ADMIN_SECRET}"
      API_DATABASE_URL: "postgresql://postgres:${DB_PASSWORD}@db:5432/geyser"
      API_GRAPHQL_URL: "http://hasura:8080/v1/graphql"
      API_GRAPHQL_ADMIN_SECRET: "${HASURA_GRAPHQL_ADMIN_SECRET}"
      API_OIDC_DISCOVERY_URL: "http://keycloak:8080/realms/geyser/.well-known/openid-configuration"
      API_OIDC_CLIENT_ID: "app"
      API_OIDC_CLIENT_SECRET: "${OIDC_CLIENT_SECRET}"
    ports:
      - "3000:3000"
    networks:
      - private-db
      - public
    volumes:
      - ./keys:/app/keys

  frontend:
    image: ghcr.io/arkandias/geyser-frontend:${GEYSER_VERSION}
    build:
      context: .
      target: frontend
      args:
        BUILD_VERSION: "${GEYSER_VERSION}"
    restart: always
    depends_on:
      keycloak:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: "service nginx status || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      VITE_API_URL: "${API_URL}"
      VITE_GRAPHQL_URL: "${API_URL}/graphql"
      VITE_TENANCY_MODE: "${GEYSER_TENANCY}"
      NGINX_DOMAIN: "${GEYSER_DOMAIN}"
      NGINX_PROXY_KEYCLOAK_URL: "http://keycloak:8080"
      NGINX_PROXY_API_URL: "http://backend:3000"
      NGINX_AUTH_ADMIN_ALLOW: "${NGINX_AUTH_ADMIN_ALLOW:-0.0.0.0/0}"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - public
    volumes:
      - ./certs:/etc/nginx/certs:ro

networks:
  private-db:
  private-kc-db:
  public:

volumes:
  data:
  kc-data:
