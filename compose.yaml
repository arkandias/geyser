name: geyser
services:
  kc-db:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U postgres -d keycloak || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      POSTGRES_DB: "keycloak"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "${POSTGRES_KC_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5433:5432"
    networks:
      - private-kc-db
    volumes:
      - kc-data:/var/lib/postgresql/data

  keycloak:
    build: keycloak
    restart: unless-stopped
    depends_on:
      kc-db:
        condition: service_healthy
    healthcheck:
      test: "healthcheck.sh"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
      start_interval: 1s
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
      KC_BOOTSTRAP_ADMIN_PASSWORD: null
      KC_DB_URL: "jdbc:postgresql://kc-db:5432/keycloak"
      KC_DB_USERNAME: "postgres"
      KC_DB_PASSWORD: "${POSTGRES_KC_PASSWORD}"
      KC_DB_SCHEMA: "public"
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: "xforwarded"
      KC_HOSTNAME_STRICT: "true"
      KC_HOSTNAME: "${GEYSER_URL}/auth"
      KC_HOSTNAME_ADMIN: "http://localhost:8081"
      KC_HOSTNAME_DEBUG: "false"
      CLIENT_BACKEND_ROOT_URL: "${GEYSER_URL}"
      CLIENT_BACKEND_SECRET: null
    ports:
      - "8081:8080"
    networks:
      - private-kc-db
      - public
    volumes:
      - ./keycloak/backups:/opt/keycloak/data/backups
    command: start --optimized --import-realm

  db:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U postgres -d geyser || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      POSTGRES_DB: "geyser"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: null
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    networks:
      - private-db
    volumes:
      - data:/var/lib/postgresql/data
      - ./postgres/init:/initdb
      - ./postgres/backups:/backups

  api:
    build:
      context: .
      target: api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: "curl -fsS http://localhost:3000/health || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    environment:
      API_URL: "${GEYSER_URL}/api"
      API_DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/geyser"
      API_OIDC_ISSUER_URL: "http://keycloak:8080/realms/geyser"
      API_OIDC_CLIENT_ID: "backend"
      API_OIDC_CLIENT_SECRET: "${CLIENT_BACKEND_SECRET}"
    ports:
      - "3000:3000"
    networks:
      - private-db
      - public

  hasura:
    image: hasura/graphql-engine:latest
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: "curl -fsS http://localhost:8080/healthz || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/geyser"
      HASURA_GRAPHQL_ADMIN_SECRET: null
      HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url":"http://api:3000/.well-known/jwks.json","header":{"type":"Cookie","name":"access_token"},"issuer":"api","audience":"hasura","claims_namespace":"hasura"}'
      HASURA_GRAPHQL_CORS_DOMAIN: "${GEYSER_URL}"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_EXPERIMENTAL_FEATURES: "naming_convention"
    ports:
      - "8080:8080"
    networks:
      - private-db
      - public

  nginx:
    build:
      context: .
      target: client
      args:
        GEYSER_URL: "${GEYSER_URL}"
    restart: unless-stopped
    depends_on:
      keycloak:
        condition: service_healthy
      api:
        condition: service_healthy
      hasura:
        condition: service_healthy
    healthcheck:
      test: "curl -fsS http://localhost/health || exit 1"
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 1s
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      GEYSER_URL: null
      NGINX_PROXY_API_URL: "http://api:3000"
      NGINX_PROXY_HASURA_URL: "http://hasura:8080/v1/graphql"
      NGINX_PROXY_KEYCLOAK_URL: "http://keycloak:8080"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - public

networks:
  private-db:
  private-kc-db:
  public:

volumes:
  data:
  kc-data:
