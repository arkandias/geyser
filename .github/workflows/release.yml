name: Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GHCR_REPOSITORY: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set variables
        id: vars
        run: |
          echo "date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "${GITHUB_OUTPUT}"

          # For release workflow, we use the release name (version without 'v')
          VERSION="${{ github.event.release.name }}"
          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"

          # Set tags based on whether it's a prerelease
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            echo "backend_tags=${GHCR_REPOSITORY}-backend:${VERSION}" >> "${GITHUB_OUTPUT}"
            echo "frontend_tags=${GHCR_REPOSITORY}-frontend:${VERSION}" >> "${GITHUB_OUTPUT}"
          else
            echo "backend_tags=${GHCR_REPOSITORY}-backend:${VERSION},${GHCR_REPOSITORY}-backend:latest" >> "${GITHUB_OUTPUT}"
            echo "frontend_tags=${GHCR_REPOSITORY}-frontend:${VERSION},${GHCR_REPOSITORY}-frontend:latest" >> "${GITHUB_OUTPUT}"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: backend
          tags: ${{ steps.vars.outputs.backend_tags }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          labels: |
            org.opencontainers.image.title=${{ github.repository }}-backend
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.vars.outputs.date }}

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          target: frontend
          tags: ${{ steps.vars.outputs.frontend_tags }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            VITE_BUILD_VERSION=${{ steps.vars.outputs.version }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}-frontend
            org.opencontainers.image.version=${{ steps.vars.outputs.version }}
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.vars.outputs.date }}

      - name: Create release artifact
        run: |
          # Read MANIFEST file and copy all mentioned files
          echo "üìã Reading MANIFEST file..."

          # Create a temporary file list for tar
          TEMP_FILE_LIST=$(mktemp)

          while IFS= read -r item; do
            # Skip empty lines and comments
            [[ -z "$item" || "$item" =~ ^[[:space:]]*# ]] && continue

            # Check if item exists (file or directory)
            if [[ -e "$item" ]]; then
              if [[ -d "$item" ]]; then
                echo "‚úÖ Will include directory: ${item%/}/"
                # Add directory and all its contents
                find "$item" -type f >> "$TEMP_FILE_LIST"
              elif [[ -f "$item" ]]; then
                echo "‚úÖ Will include file: $item"
                echo "$item" >> "$TEMP_FILE_LIST"
              fi
            else
              echo "‚ùå Not found: $item"
              exit 1
            fi
          done < MANIFEST

          # Create tarball from the collected file list
          echo "üì¶ Creating release artifact..."
          if [[ -s "$TEMP_FILE_LIST" ]]; then
            tar -czf "release-${{ steps.vars.outputs.version }}.tar.gz" --files-from="$TEMP_FILE_LIST"

            echo "üì¶ Created release artifact: release-${{ steps.vars.outputs.version }}.tar.gz"

            # Show contents for verification
            echo "üìÇ Artifact contents:"
            tar -tzf "release-${{ steps.vars.outputs.version }}.tar.gz"

            # Show total file count
            FILE_COUNT=$(tar -tzf "release-${{ steps.vars.outputs.version }}.tar.gz" | wc -l)
            echo "üìä Total files in artifact: $FILE_COUNT"
          else
            echo "‚ùå No files found to include in artifact"
            exit 1
          fi

          # Clean up temporary file
          rm "$TEMP_FILE_LIST"

      - name: Upload release artifact
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload "${{ github.event.release.tag_name }}" \
            "geyser-${{ steps.vars.outputs.version }}.tar.gz" \
            --clobber
