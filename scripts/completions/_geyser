#compdef geyser

# shellcheck disable=SC2120
# shellcheck disable=SC2153

_geyser() {
    # Handle completion for wrappers
    if [[ " ${words[*]} " == *" compose "* ]]; then
        _geyser_compose
        return
    elif [[ " ${words[*]} " == *" hasura "* ]]; then
        _geyser_hasura
        return
    elif [[ " ${words[*]} " == *" kc "* ]]; then
        _geyser_kc
        return
    elif [[ " ${words[*]} " == *" kcadm "* ]]; then
        _geyser_kcadm
        return
    fi

    # shellcheck disable=SC2034
    local -a commands=(
        'init:Initialize a fresh Geyser installation'
        'start:Start Geyser services'
        'stop:Stop Geyser services'
        'restart:Restart Geyser services'
        'show:Show Geyser services'
        'update:Update Geyser services'
        'cleanup:Cleanup Geyser services'
        'purge:Completely remove Geyser installation and all data'
        'data-backup:Backup Geyser main database'
        'data-restore:Restore Geyser main database'
        'keycloak-export:Export Keycloak realms and users'
        'keycloak-import:Import Keycloak realms and users'
        'webdav-upload:Upload a file or a directory to a WebDAV server'
        'compose:Docker Compose wrapper'
        'hasura:Hasura CLI wrapper'
        'kc:Keycloak CLI access'
        'kcadm:Keycloak Admin CLI access'
        'webhook:Webhook wrapper'
        'webhook-start:Start a webhook on port 9000'
        'webhook-stop:Terminate any process listening on port 9000'
        'deploy:Deploy Geyser from remote repository'
        'install-completion:Install zsh completion'
    )

    local state

    _arguments -s -S -C \
        '(-h --help)'{-h,--help}'[Show help message]' \
        '(-v --version)'{-v,--version}'[Show version information]' \
        '--log-level[Set log level]:level:(silent debug info warn error)' \
        '--silent[Set log level to silent]' \
        '--debug[Set log level to debug]' \
        '--env[Set deployment env]:env:(development production)' \
        '--dev[Set env to development]' \
        '--prod[Set env to production]' \
        '--domain[Set domain name for deployment]:domain' \
        '--origins[Set allowed origins (comma-separated, wildcard allowed)]:origins' \
        '--as-service[Run as a systemd service]' \
        '1: :->cmds' \
        '*:: :->args'

    case "${state}" in
    cmds)
        _describe -t commands 'geyser commands' commands
        ;;
    args)
        case "${words[1]}" in
        data-backup)
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '--name[Set the name of the backup]:name'
            ;;
        data-restore)
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '--name[Set the name of the backup]:name'
            ;;
        keycloak-export)
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '--name[Set the name of the export]:name'
            ;;
        keycloak-import)
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '--name[Set the name of the export]:name'
            ;;
        webdav-upload)
            _arguments \
                '(-h --help)'{-h,--help}'[Show help message]' \
                '--path[Set the path of the file or directory]:path'
            ;;
        init | start | stop | restart | show | update | cleanup | purge)
            _arguments '(-h --help)'{-h,--help}'[Show help message]'
            ;;
        esac
        ;;
    esac
}

# shellcheck disable=SC2120
_geyser_compose() {
    if [[ -z "${GEYSER_HOME}" ]]; then
        echo "Error: GEYSER_HOME environment variable is not set" >&2
        return 1
    fi

    # Parse options before compose and store words after
    for ((i = 2; i <= ${#words}; i++)); do
        case "${words[i]}" in
        compose) break ;;
        --*) continue ;;
        *) return 1 ;;
        esac
    done
    words_after_compose=("${words[@]:$((i))}")

    words=("docker" "compose" "-f" "${GEYSER_HOME}/compose.yaml" "${words_after_compose[@]}")
    ((CURRENT = CURRENT + 4 - i))

    _docker
}

# shellcheck disable=SC2120
_geyser_hasura() {
    if [[ -z "${GEYSER_HOME}" ]]; then
        echo "Error: GEYSER_HOME environment variable is not set" >&2
        return 1
    fi

    # Parse options before hasura and store words after
    for ((i = 2; i <= ${#words}; i++)); do
        case "${words[i]}" in
        hasura) break ;;
        --*) continue ;;
        *) return 1 ;;
        esac
    done
    words_after_hasura=("${words[@]:$((i))}")

    words=("hasura" "--project" "${GEYSER_HOME}/hasura" "${words_after_hasura[@]}")
    ((CURRENT = CURRENT + 3 - i))

    _hasura
}

# shellcheck disable=SC2120
_geyser_kc() {
    # Parse options before kc and store words after
    for ((i = 2; i <= ${#words}; i++)); do
        case "${words[i]}" in
        kc) break ;;
        --*) continue ;;
        *) return 1 ;;
        esac
    done
    words_after_kc=("${words[@]:$((i))}")

    words=("kc.sh" "${words_after_kc[@]}")
    ((CURRENT = CURRENT + 1 - i))

    _kc
}

# shellcheck disable=SC2120
_geyser_kcadm() {
    # Parse options before kcadm and store words after
    for ((i = 2; i <= ${#words}; i++)); do
        case "${words[i]}" in
        kcadm) break ;;
        --*) continue ;;
        *) return 1 ;;
        esac
    done
    words_after_kcadm=("${words[@]:$((i))}")

    words=("kcadm.sh" "${words_after_kcadm[@]}")
    ((CURRENT = CURRENT + 1 - i))

    _kcadm
}

_geyser
