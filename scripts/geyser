#!/usr/bin/env bash
# shellcheck disable=SC2034

#######################################
# Geyser Administration Script
# Author: Julien Hauseux <julien.hauseux@gmail.fr>
# License: GNU AGPL v3.0
#######################################

readonly VERSION="1.0.0"

# Exit the script immediately if any command fails
set -e

###############################################################################
# HELP
###############################################################################

# Help text function
show_help() {
    cat <<EOF
Geyser Administration Script v${VERSION}

Usage: geyser [OPTIONS] COMMAND

Core Commands:
  init              Initialize a fresh Geyser installation
  start             Start Geyser services
  stop              Stop Geyser services
  show              Show Geyser services
  update            Update Geyser services
  cleanup           Cleanup Geyser services
  reset             Reset Geyser to a fresh installation

Data Management:
  data-dump         Dump Geyser main database
  data-restore      Restore Geyser main database
  realms-export     Export Keycloak realms and users
  realms-import     Import Keycloak realms and users
  webdav-backup     Backup to a WebDAV server
  keycloak-sync     Synchronize Keycloak users and groups with app data

Development Tools:
  compose           Docker Compose wrapper
  hasura            Hasura CLI wrapper
  kc                Keycloak CLI access
  kcadm             Keycloak Admin CLI access
  rsync             Configured rsync wrapper
  webdav-upload     Upload a file via WebDAV
  webhook-start     Start a webhook on port 9000
  webhook-stop      Terminate any process listening on port 9000
  deploy            Deploy Geyser from remote repository

Setup:
  install-completion    Install zsh completion (using oh-my-zsh)

Options:
  -h, --help        Show this help message
  -v, --version     Show version information
  -s, --status      Show current status
  -q, --quiet       Disable log messages

Run 'geyser COMMAND --help' for more information on a command.
EOF
}

###############################################################################
# PATHS & DIRECTORIES
###############################################################################

# Absolute path to the directory containing the current script
SCRIPT_DIR="$(cd -- "$(dirname -- "$(readlink -f "${BASH_SOURCE[0]}")")" &>/dev/null && pwd)"
readonly SCRIPT_DIR

# Absolute path to the directory containing the application
: "${GEYSER_HOME:="$(cd "${SCRIPT_DIR}/.." &>/dev/null && pwd)"}"
readonly GEYSER_HOME

# Directories paths
readonly BACKUPS_DIR="${GEYSER_HOME}/backups"
readonly DB_BACKUPS_DIR="${BACKUPS_DIR}/data"
readonly KC_BACKUPS_DIR="${BACKUPS_DIR}/realms"
readonly LOG_DIR="${GEYSER_HOME}/logs"

# Create required directories
mkdir -p "${DB_BACKUPS_DIR}"
mkdir -p "${KC_BACKUPS_DIR}"
mkdir -p "${LOG_DIR}"

###############################################################################
# LOAD LIBRARIES
###############################################################################

shopt -s globstar
for file in "${SCRIPT_DIR}"/lib/**/*.sh; do
    if [[ -f "${file}" ]]; then
        # shellcheck disable=SC1090
        source "${file}"
    fi
done
shopt -u globstar

###############################################################################
# MAIN
###############################################################################

main() {
    # If no arguments provided, show help
    if [[ "$#" -eq 0 ]]; then
        show_help
        exit 0
    fi

    # Parse options
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
        -h | --help)
            show_help
            exit 0
            ;;
        -v | --version)
            echo "Geyser Administration Script v${VERSION}"
            exit 0
            ;;
        -s | --status)
            echo "Checking status..."
            if ! compose ps -a --format '{{.Service}}: {{.Status}}' 2>/dev/null; then
                error "Failed to check Geyser status. Is Docker daemon running?" >&2
                exit 1
            fi
            exit 0
            ;;
        -q | --quiet)
            GEYSER_LOG_LEVEL="silent"
            shift
            ;;
        *)
            break
            ;;
        esac
    done

    load_environment
    check_dependencies

    # Execute command
    case "$1" in
    init)
        shift
        handle_init "$@"
        ;;
    start)
        shift
        handle_start "$@"
        ;;
    stop)
        shift
        handle_stop "$@"
        ;;
    show)
        shift
        handle_show "$@"
        ;;
    update)
        shift
        handle_update "$@"
        ;;
    cleanup)
        shift
        handle_cleanup "$@"
        ;;
    reset)
        shift
        handle_reset "$@"
        ;;
    data-dump)
        shift
        handle_data_dump "$@"
        ;;
    data-restore)
        shift
        handle_data_restore "$@"
        ;;
    realms-export)
        shift
        handle_realms_export "$@"
        ;;
    realms-import)
        shift
        handle_realms_import "$@"
        ;;
    keycloak-sync)
        shift
        handle_keycloak_sync "$@"
        ;;
    compose | hasura | kc | kcadm | rsync)
        cmd="$1"
        shift
        "${cmd}" "$@"
        ;;
    webhook-start)
        shift
        handle_webhook_start "$@"
        ;;
    webhook-stop)
        shift
        handle_webhook_stop "$@"
        ;;
    deploy)
        shift
        handle_deploy "$@"
        ;;
    install-completion)
        handle_install_completion
        ;;
    "")
        exit 0
        ;;
    *)
        error "Unknown command '$1' (see 'geyser --help')"
        exit 1
        ;;
    esac
}

main "$@"
